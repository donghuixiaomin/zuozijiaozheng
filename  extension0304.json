{"MAX30105.cpp":"/***************************************************\n  This is a library written for the Maxim MAX30105 Optical Smoke Detector\n  It should also work with the MAX30102. However, the MAX30102 does not have a Green LED.\n\n  These sensors use I2C to communicate, as well as a single (optional)\n  interrupt line that is not currently supported in this driver.\n\n  Written by Peter Jansen and Nathan Seidle (SparkFun)\n  BSD license, all text above must be included in any redistribution.\n *****************************************************/\n\n#include \"MAX30105.h\"\n\n#ifndef __MICROBIT_H_\n#define __MICROBIT_H_\n#include \"MicroBit.h\"\n#endif\n\n//static MicroBitI2C i2c(I2C_SDA0, I2C_SCL0);\n\nint16_t placeholder;\n\nstatic const char MAX30105_ADDRESS = 0xAE;\n\n\n// Status Registers\nstatic const char MAX30105_INTSTAT1 =\t\t0x00;\nstatic const char MAX30105_INTSTAT2 =\t\t0x01;\nstatic const char MAX30105_INTENABLE1 =\t\t0x02;\nstatic const char MAX30105_INTENABLE2 =\t\t0x03;\n\n// FIFO Registers\nstatic const char MAX30105_FIFOWRITEPTR = \t0x04;\nstatic const char MAX30105_FIFOOVERFLOW = \t0x05;\nstatic const char MAX30105_FIFOREADPTR = \t0x06;\nstatic const char MAX30105_FIFODATA =\t\t0x07;\n\n// Configuration Registers\nstatic const char MAX30105_FIFOCONFIG = \t\t0x08;\nstatic const char MAX30105_MODECONFIG = \t\t0x09;\nstatic const char MAX30105_PARTICLECONFIG = \t0x0A;    // Note, sometimes listed as \"SPO2\" config in datasheet (pg. 11)\nstatic const char MAX30105_LED1_PULSEAMP = \t0x0C;\nstatic const char MAX30105_LED2_PULSEAMP = \t0x0D;\nstatic const char MAX30105_MULTILEDCONFIG1 = 0x11;\nstatic const char MAX30105_MULTILEDCONFIG2 = 0x12;\n\n// Die Temperature Registers\nstatic const char MAX30105_DIETEMPINT = \t\t0x1F;\nstatic const char MAX30105_DIETEMPFRAC = \t0x20;\nstatic const char MAX30105_DIETEMPCONFIG = \t0x21;\n\n// Proximity Function Registers\nstatic const char MAX30105_PROXINTTHRESH = \t0x30;\n\n// Part ID Registers\nstatic const char MAX30105_REVISIONID = \t\t0xFE;\nstatic const char MAX30105_PARTID = \t\t\t0xFF;    // Should always be 0x15. Identical to MAX30102.\n\n// MAX30105 Commands\n// Interrupt configuration (pg 13, 14)\nstatic const char MAX30105_INT_A_FULL_MASK =\t\t(char)~0b10000000;\nstatic const char MAX30105_INT_A_FULL_ENABLE = \t0x80;\nstatic const char MAX30105_INT_A_FULL_DISABLE = \t0x00;\n\nstatic const char MAX30105_INT_DATA_RDY_MASK = (char)~0b01000000;\nstatic const char MAX30105_INT_DATA_RDY_ENABLE =\t0x40;\nstatic const char MAX30105_INT_DATA_RDY_DISABLE = 0x00;\n\nstatic const char MAX30105_INT_ALC_OVF_MASK = (char)~0b00100000;\nstatic const char MAX30105_INT_ALC_OVF_ENABLE = \t0x20;\nstatic const char MAX30105_INT_ALC_OVF_DISABLE = 0x00;\n\nstatic const char MAX30105_INT_PROX_INT_MASK = (char)~0b00010000;\nstatic const char MAX30105_INT_PROX_INT_ENABLE = 0x10;\nstatic const char MAX30105_INT_PROX_INT_DISABLE = 0x00;\n\nstatic const char MAX30105_INT_DIE_TEMP_RDY_MASK = (char)~0b00000010;\nstatic const char MAX30105_INT_DIE_TEMP_RDY_ENABLE = 0x02;\nstatic const char MAX30105_INT_DIE_TEMP_RDY_DISABLE = 0x00;\n\nstatic const char MAX30105_SAMPLEAVG_MASK =\t(char)~0b11100000;\nstatic const char MAX30105_SAMPLEAVG_1 = \t0x00;\nstatic const char MAX30105_SAMPLEAVG_2 = \t0x20;\nstatic const char MAX30105_SAMPLEAVG_4 = \t0x40;\nstatic const char MAX30105_SAMPLEAVG_8 = \t0x60;\nstatic const char MAX30105_SAMPLEAVG_16 = \t0x80;\nstatic const char MAX30105_SAMPLEAVG_32 = \t0xA0;\n\nstatic const char MAX30105_ROLLOVER_MASK = \t0xEF;\nstatic const char MAX30105_ROLLOVER_ENABLE = 0x10;\nstatic const char MAX30105_ROLLOVER_DISABLE = 0x00;\n\nstatic const char MAX30105_A_FULL_MASK = \t0xF0;\n\n// Mode configuration commands (page 19)\nstatic const char MAX30105_SHUTDOWN_MASK = \t0x7F;\nstatic const char MAX30105_SHUTDOWN = \t\t0x80;\nstatic const char MAX30105_WAKEUP = \t\t\t0x00;\n\nstatic const char MAX30105_RESET_MASK = \t\t0xBF;\nstatic const char MAX30105_RESET = \t\t\t0x40;\n\nstatic const char MAX30105_MODE_MASK = \t\t0xF8;\nstatic const char MAX30105_MODE_REDONLY = \t0x02;\nstatic const char MAX30105_MODE_REDIRONLY = \t0x03;\n\n// Particle sensing configuration commands (pgs 19-20)\nstatic const char MAX30105_ADCRANGE_MASK = \t0x9F;\nstatic const char MAX30105_ADCRANGE_2048 = \t0x00;\nstatic const char MAX30105_ADCRANGE_4096 = \t0x20;\nstatic const char MAX30105_ADCRANGE_8192 = \t0x40;\nstatic const char MAX30105_ADCRANGE_16384 = \t0x60;\n\nstatic const char MAX30105_SAMPLERATE_MASK = 0xE3;\nstatic const char MAX30105_SAMPLERATE_50 = \t0x00;\nstatic const char MAX30105_SAMPLERATE_100 = \t0x04;\nstatic const char MAX30105_SAMPLERATE_200 = \t0x08;\nstatic const char MAX30105_SAMPLERATE_400 = \t0x0C;\nstatic const char MAX30105_SAMPLERATE_800 = \t0x10;\nstatic const char MAX30105_SAMPLERATE_1000 = 0x14;\nstatic const char MAX30105_SAMPLERATE_1600 = 0x18;\nstatic const char MAX30105_SAMPLERATE_3200 = 0x1C;\n\nstatic const char MAX30105_PULSEWIDTH_MASK = 0xFC;\nstatic const char MAX30105_PULSEWIDTH_69 = \t0x00;\nstatic const char MAX30105_PULSEWIDTH_118 = \t0x01;\nstatic const char MAX30105_PULSEWIDTH_215 = \t0x02;\nstatic const char MAX30105_PULSEWIDTH_411 = \t0x03;\n\n//Multi-LED Mode configuration (pg 22)\nstatic const char MAX30105_SLOT1_MASK = \t\t0xF8;\nstatic const char MAX30105_SLOT2_MASK = \t\t0x8F;\nstatic const char MAX30105_SLOT3_MASK = \t\t0xF8;\nstatic const char MAX30105_SLOT4_MASK = \t\t0x8F;\n\nstatic const char SLOT_NONE = \t\t\t\t0x00;\nstatic const char SLOT_RED_LED = \t\t\t0x01;\nstatic const char SLOT_IR_LED = \t\t\t\t0x02;\nstatic const char SLOT_GREEN_LED = \t\t\t0x03;\nstatic const char SLOT_NONE_PILOT = \t\t\t0x04;\nstatic const char SLOT_RED_PILOT =\t\t\t0x05;\nstatic const char SLOT_IR_PILOT = \t\t\t0x06;\nstatic const char SLOT_GREEN_PILOT = \t\t0x07;\n\nstatic const char MAX_30105_EXPECTEDPARTID = 0x15;\n\nuint8_t activeDiodes = 3; //Gets set during setup. Allows check() to calculate how many bytes to read from FIFO\n\n#define STORAGE_SIZE 4 //Each long is 4 bytes so limit this to fit on your micro\n\nint16_t IR_AC_Max = 20;\nint16_t IR_AC_Min = -20;\n\nint16_t IR_AC_Signal_Current = 0;\nint16_t IR_AC_Signal_Previous;\nint16_t IR_AC_Signal_min = 0;\nint16_t IR_AC_Signal_max = 0;\nint16_t IR_Average_Estimated;\n\nint16_t positiveEdge = 0;\nint16_t negativeEdge = 0;\nint32_t ir_avg_reg = 0;\n\nint16_t cbuf[32];\nuint8_t offset = 0;\n\nstatic const uint16_t FIRCoeffs[12] = {172, 321, 579, 927, 1360, 1858, 2390, 2916, 3391, 3768, 4012, 4096};\n\ntypedef struct Record\n{\n  uint32_t red[STORAGE_SIZE];\n  uint32_t IR[STORAGE_SIZE];\n  uint32_t green[STORAGE_SIZE];\n  uint8_t head;\n  uint8_t tail;\n} sense_struct; //This is our circular buffer of readings from the sensor\n\nsense_struct sense;\n\nMAX30105::MAX30105() {\n  // Constructor\n}\n\nvoid MAX30105::beginParticle() {\n\n  // Step 1: Initial Communication and Verification\n  // Check that a MAX30105 is connected\n  if (readPartID() != MAX_30105_EXPECTEDPARTID) {\n    // Error -- Part ID read from MAX30105 does not match expected part ID.\n    // This may mean there is a physical connectivity problem (broken wire, unpowered, etc).\n  }\n\n  // Populate revision ID\n  readRevisionID();\n  \n}\n\n//\n// Configuration\n//\n\n//Begin Interrupt configuration\nuint8_t MAX30105::getINT1(void) {\n  return (readRegister8(MAX30105_ADDRESS, MAX30105_INTSTAT1));\n}\nuint8_t MAX30105::getINT2(void) {\n  return (readRegister8(MAX30105_ADDRESS, MAX30105_INTSTAT2));\n}\n\nvoid MAX30105::enableAFULL(void) {\n  bitMask(MAX30105_INTENABLE1, MAX30105_INT_A_FULL_MASK, MAX30105_INT_A_FULL_ENABLE);\n}\nvoid MAX30105::disableAFULL(void) {\n  bitMask(MAX30105_INTENABLE1, MAX30105_INT_A_FULL_MASK, MAX30105_INT_A_FULL_DISABLE);\n}\n\nvoid MAX30105::enableDATARDY(void) {\n  bitMask(MAX30105_INTENABLE1, MAX30105_INT_DATA_RDY_MASK, MAX30105_INT_DATA_RDY_ENABLE);\n}\nvoid MAX30105::disableDATARDY(void) {\n  bitMask(MAX30105_INTENABLE1, MAX30105_INT_DATA_RDY_MASK, MAX30105_INT_DATA_RDY_DISABLE);\n}\n\nvoid MAX30105::enableALCOVF(void) {\n  bitMask(MAX30105_INTENABLE1, MAX30105_INT_ALC_OVF_MASK, MAX30105_INT_ALC_OVF_ENABLE);\n}\nvoid MAX30105::disableALCOVF(void) {\n  bitMask(MAX30105_INTENABLE1, MAX30105_INT_ALC_OVF_MASK, MAX30105_INT_ALC_OVF_DISABLE);\n}\n\nvoid MAX30105::enablePROXINT(void) {\n  bitMask(MAX30105_INTENABLE1, MAX30105_INT_PROX_INT_MASK, MAX30105_INT_PROX_INT_ENABLE);\n}\nvoid MAX30105::disablePROXINT(void) {\n  bitMask(MAX30105_INTENABLE1, MAX30105_INT_PROX_INT_MASK, MAX30105_INT_PROX_INT_DISABLE);\n}\n\nvoid MAX30105::enableDIETEMPRDY(void) {\n  bitMask(MAX30105_INTENABLE2, MAX30105_INT_DIE_TEMP_RDY_MASK, MAX30105_INT_DIE_TEMP_RDY_ENABLE);\n}\nvoid MAX30105::disableDIETEMPRDY(void) {\n  bitMask(MAX30105_INTENABLE2, MAX30105_INT_DIE_TEMP_RDY_MASK, MAX30105_INT_DIE_TEMP_RDY_DISABLE);\n}\n\n//End Interrupt configuration\n\nvoid MAX30105::softReset(void) {\n  bitMask(MAX30105_MODECONFIG, MAX30105_RESET_MASK, MAX30105_RESET);\n\n  // Poll for bit to clear, reset is then complete\n  // Timeout after 100ms\n  unsigned long startTime = system_timer_current_time();\n  while (system_timer_current_time() - startTime < 100)\n  {\n    uint8_t response = readRegister8(MAX30105_ADDRESS, MAX30105_MODECONFIG);\n    if ((response & MAX30105_RESET) == 0) break; //We're done!\n    fiber_sleep(1); //Let's not over burden the I2C bus\n  }\n}\n\nvoid MAX30105::shutDown(void) {\n  // Put IC into low power mode (datasheet pg. 19)\n  // During shutdown the IC will continue to respond to I2C commands but will\n  // not update with or take new readings (such as temperature)\n  bitMask(MAX30105_MODECONFIG, MAX30105_SHUTDOWN_MASK, MAX30105_SHUTDOWN);\n}\n\nvoid MAX30105::wakeUp(void) {\n  // Pull IC out of low power mode (datasheet pg. 19)\n  bitMask(MAX30105_MODECONFIG, MAX30105_SHUTDOWN_MASK, MAX30105_WAKEUP);\n}\n\nvoid MAX30105::setLEDMode(uint8_t mode) {\n  // Set which LEDs are used for sampling -- Red only, RED+IR only, or custom.\n  // See datasheet, page 19\n  activeDiodes = mode - 1;\n  bitMask(MAX30105_MODECONFIG, MAX30105_MODE_MASK, mode);\n}\n\nvoid MAX30105::setADCRange(uint8_t adcRange) {\n  // adcRange: one of MAX30105_ADCRANGE_2048, _4096, _8192, _16384\n  bitMask(MAX30105_PARTICLECONFIG, MAX30105_ADCRANGE_MASK, adcRange);\n}\n\nvoid MAX30105::setSampleRate(uint8_t sampleRate) {\n  // sampleRate: one of MAX30105_SAMPLERATE_50, _100, _200, _400, _800, _1000, _1600, _3200\n  bitMask(MAX30105_PARTICLECONFIG, MAX30105_SAMPLERATE_MASK, sampleRate);\n}\n\nvoid MAX30105::setPulseWidth(uint8_t pulseWidth) {\n  // pulseWidth: one of MAX30105_PULSEWIDTH_69, _188, _215, _411\n  bitMask(MAX30105_PARTICLECONFIG, MAX30105_PULSEWIDTH_MASK, pulseWidth);\n}\n\n// NOTE: Amplitude values: 0x00 = 0mA, 0x7F = 25.4mA, 0xFF = 50mA (typical)\n// See datasheet, page 21\nvoid MAX30105::setPulseAmplitudeRed(uint8_t amplitude) {\n  writeRegister8(MAX30105_ADDRESS, MAX30105_LED1_PULSEAMP, amplitude);\n}\n\nvoid MAX30105::setPulseAmplitudeIR(uint8_t amplitude) {\n  writeRegister8(MAX30105_ADDRESS, MAX30105_LED2_PULSEAMP, amplitude);\n}\n\nvoid MAX30105::setProximityThreshold(uint8_t threshMSB) {\n  // Set the IR ADC count that will trigger the beginning of particle-sensing mode.\n  // The threshMSB signifies only the 8 most significant-bits of the ADC count.\n  // See datasheet, page 24.\n  writeRegister8(MAX30105_ADDRESS, MAX30105_PROXINTTHRESH, threshMSB);\n}\n\n//Given a slot number assign a thing to it\n//Devices are SLOT_RED_LED or SLOT_RED_PILOT (proximity)\n//Assigning a SLOT_RED_LED will pulse LED\n//Assigning a SLOT_RED_PILOT will ??\nvoid MAX30105::enableSlot(uint8_t slotNumber, uint8_t device) {\n\n  switch (slotNumber) {\n    case (1):\n      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT1_MASK, device);\n      break;\n    case (2):\n      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT2_MASK, device << 4);\n      break;\n    case (3):\n      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT3_MASK, device);\n      break;\n    case (4):\n      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT4_MASK, device << 4);\n      break;\n    default:\n      //Shouldn't be here!\n      break;\n  }\n}\n\n//Clears all slot assignments\nvoid MAX30105::disableSlots(void) {\n  writeRegister8(MAX30105_ADDRESS, MAX30105_MULTILEDCONFIG1, 0);\n  writeRegister8(MAX30105_ADDRESS, MAX30105_MULTILEDCONFIG2, 0);\n}\n\n//\n// FIFO Configuration\n//\n\n//Set sample average (Table 3, Page 18)\nvoid MAX30105::setFIFOAverage(uint8_t numberOfSamples) {\n  bitMask(MAX30105_FIFOCONFIG, MAX30105_SAMPLEAVG_MASK, numberOfSamples);\n}\n\n//Resets all points to start in a known state\n//Page 15 recommends clearing FIFO before beginning a read\nvoid MAX30105::clearFIFO(void) {\n  writeRegister8(MAX30105_ADDRESS, MAX30105_FIFOWRITEPTR, 0);\n  writeRegister8(MAX30105_ADDRESS, MAX30105_FIFOOVERFLOW, 0);\n  writeRegister8(MAX30105_ADDRESS, MAX30105_FIFOREADPTR, 0);\n}\n\n//Enable roll over if FIFO over flows\nvoid MAX30105::enableFIFORollover(void) {\n  bitMask(MAX30105_FIFOCONFIG, MAX30105_ROLLOVER_MASK, MAX30105_ROLLOVER_ENABLE);\n}\n\n//Disable roll over if FIFO over flows\nvoid MAX30105::disableFIFORollover(void) {\n  bitMask(MAX30105_FIFOCONFIG, MAX30105_ROLLOVER_MASK, MAX30105_ROLLOVER_DISABLE);\n}\n\n//Set number of samples to trigger the almost full interrupt (Page 18)\n//Power on default is 32 samples\n//Note it is reverse: 0x00 is 32 samples, 0x0F is 17 samples\nvoid MAX30105::setFIFOAlmostFull(uint8_t numberOfSamples) {\n  bitMask(MAX30105_FIFOCONFIG, MAX30105_A_FULL_MASK, numberOfSamples);\n}\n\n//Read the FIFO Write Pointer\nuint8_t MAX30105::getWritePointer(void) {\n  return (readRegister8(MAX30105_ADDRESS, MAX30105_FIFOWRITEPTR));\n}\n\n//Read the FIFO Read Pointer\nuint8_t MAX30105::getReadPointer(void) {\n  return (readRegister8(MAX30105_ADDRESS, MAX30105_FIFOREADPTR));\n}\n\n\n// Die Temperature\n// Returns temp in C\nfloat MAX30105::readTemperature() {\n\t\n  //DIE_TEMP_RDY interrupt must be enabled\n  //See issue 19: https://github.com/sparkfun/SparkFun_MAX3010x_Sensor_Library/issues/19\n  \n  // Step 1: Config die temperature register to take 1 temperature sample\n  writeRegister8(MAX30105_ADDRESS, MAX30105_DIETEMPCONFIG, 0x01);\n\n  // Poll for bit to clear, reading is then complete\n  // Timeout after 100ms\n  unsigned long startTime = system_timer_current_time();\n  while (system_timer_current_time() - startTime < 100)\n  {\n    //uint8_t response = readRegister8(MAX30105_ADDRESS, MAX30105_DIETEMPCONFIG); //Original way\n    //if ((response & 0x01) == 0) break; //We're done!\n    \n\t//Check to see if DIE_TEMP_RDY interrupt is set\n\tuint8_t response = readRegister8(MAX30105_ADDRESS, MAX30105_INTSTAT2);\n    if ((response & MAX30105_INT_DIE_TEMP_RDY_ENABLE) > 0) break; //We're done!\n    fiber_sleep(1); //Let's not over burden the I2C bus\n  }\n  //TODO How do we want to fail? With what type of error?\n  //? if(uBit.systemTime() - startTime >= 100) return(-999.0);\n\n  // Step 2: Read die temperature register (integer)\n  int8_t tempInt = readRegister8(MAX30105_ADDRESS, MAX30105_DIETEMPINT);\n  uint8_t tempFrac = readRegister8(MAX30105_ADDRESS, MAX30105_DIETEMPFRAC); //Causes the clearing of the DIE_TEMP_RDY interrupt\n\n  // Step 3: Calculate temperature (datasheet pg. 23)\n  return (float)tempInt + ((float)tempFrac * 0.0625);\n}\n\n// Returns die temp in F\nfloat MAX30105::readTemperatureF() {\n  float temp = readTemperature();\n\n  if (temp != -999.0) temp = temp * 1.8 + 32.0;\n\n  return (temp);\n}\n\n// Set the PROX_INT_THRESHold\nvoid MAX30105::setPROXINTTHRESH(uint8_t val) {\n  writeRegister8(MAX30105_ADDRESS, MAX30105_PROXINTTHRESH, val);\n}\n\n\n//\n// Device ID and Revision\n//\nuint8_t MAX30105::readPartID() {\n  return readRegister8(MAX30105_ADDRESS, MAX30105_PARTID);\n}\n\nvoid MAX30105::readRevisionID() {\n  revisionID = readRegister8(MAX30105_ADDRESS, MAX30105_REVISIONID);\n}\n\nuint8_t MAX30105::getRevisionID() {\n  return revisionID;\n}\n\n\n//Setup the sensor\n//The MAX30105 has many settings. By default we select:\n// Sample Average = 4\n// Mode = MultiLED\n// ADC Range = 16384 (62.5pA per LSB)\n// Sample rate = 50\n//Use the default setup if you are just getting started with the MAX30105 sensor\nvoid MAX30105::setup(uint8_t powerLevel, uint8_t sampleAverage, uint8_t ledMode, int sampleRate, int pulseWidth, int adcRange) {\n  softReset(); //Reset all configuration, threshold, and data registers to POR values\n  //FIFO Configuration\n  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\n  //The chip will average multiple samples of same type together if you wish\n  if (sampleAverage == 1) setFIFOAverage(MAX30105_SAMPLEAVG_1); //No averaging per FIFO record\n  else if (sampleAverage == 2) setFIFOAverage(MAX30105_SAMPLEAVG_2);\n  else if (sampleAverage == 4) setFIFOAverage(MAX30105_SAMPLEAVG_4);\n  else if (sampleAverage == 8) setFIFOAverage(MAX30105_SAMPLEAVG_8);\n  else if (sampleAverage == 16) setFIFOAverage(MAX30105_SAMPLEAVG_16);\n  else if (sampleAverage == 32) setFIFOAverage(MAX30105_SAMPLEAVG_32);\n  else setFIFOAverage(MAX30105_SAMPLEAVG_4);\n\n  //setFIFOAlmostFull(2); //Set to 30 samples to trigger an 'Almost Full' interrupt\n  enableFIFORollover(); //Allow FIFO to wrap/roll over\n  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\n\n  //Mode Configuration\n  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\n  if (ledMode == 2) setLEDMode(MAX30105_MODE_REDIRONLY); //Red and IR\n  else setLEDMode(MAX30105_MODE_REDONLY); //Red only\n  activeDiodes = ledMode; //Used to control how many uint8_ts to read from FIFO buffer\n  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\n\n  //Particle Sensing Configuration\n  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\n  if(adcRange < 4096) setADCRange(MAX30105_ADCRANGE_2048); //7.81pA per LSB\n  else if(adcRange < 8192) setADCRange(MAX30105_ADCRANGE_4096); //15.63pA per LSB\n  else if(adcRange < 16384) setADCRange(MAX30105_ADCRANGE_8192); //31.25pA per LSB\n  else if(adcRange == 16384) setADCRange(MAX30105_ADCRANGE_16384); //62.5pA per LSB\n  else setADCRange(MAX30105_ADCRANGE_2048);\n\n  if (sampleRate < 100) setSampleRate(MAX30105_SAMPLERATE_50); //Take 50 samples per second\n  else if (sampleRate < 200) setSampleRate(MAX30105_SAMPLERATE_100);\n  else if (sampleRate < 400) setSampleRate(MAX30105_SAMPLERATE_200);\n  else if (sampleRate < 800) setSampleRate(MAX30105_SAMPLERATE_400);\n  else if (sampleRate < 1000) setSampleRate(MAX30105_SAMPLERATE_800);\n  else if (sampleRate < 1600) setSampleRate(MAX30105_SAMPLERATE_1000);\n  else if (sampleRate < 3200) setSampleRate(MAX30105_SAMPLERATE_1600);\n  else if (sampleRate == 3200) setSampleRate(MAX30105_SAMPLERATE_3200);\n  else setSampleRate(MAX30105_SAMPLERATE_50);\n\n  //The longer the pulse width the longer range of detection you'll have\n  //At 69us and 0.4mA it's about 2 inches\n  //At 411us and 0.4mA it's about 6 inches\n  if (pulseWidth < 118) setPulseWidth(MAX30105_PULSEWIDTH_69); //Page 26, Gets us 15 bit resolution\n  else if (pulseWidth < 215) setPulseWidth(MAX30105_PULSEWIDTH_118); //16 bit resolution\n  else if (pulseWidth < 411) setPulseWidth(MAX30105_PULSEWIDTH_215); //17 bit resolution\n  else if (pulseWidth == 411) setPulseWidth(MAX30105_PULSEWIDTH_411); //18 bit resolution\n  else setPulseWidth(MAX30105_PULSEWIDTH_69);\n  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\n\n  //LED Pulse Amplitude Configuration\n  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\n  //Default is 0x1F which gets us 6.4mA\n  //powerLevel = 0x02, 0.4mA - Presence detection of ~4 inch\n  //powerLevel = 0x1F, 6.4mA - Presence detection of ~8 inch\n  //powerLevel = 0x7F, 25.4mA - Presence detection of ~8 inch\n  //powerLevel = 0xFF, 50.0mA - Presence detection of ~12 inch\n\n  setPulseAmplitudeRed(powerLevel);\n  setPulseAmplitudeIR(powerLevel);\n  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\n\n  //Multi-LED Mode Configuration, Enable the reading of the three LEDs\n  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\n  enableSlot(1, SLOT_RED_LED);\n  if (ledMode > 1) enableSlot(2, SLOT_IR_LED);\n  //enableSlot(1, SLOT_RED_PILOT);\n  //enableSlot(2, SLOT_IR_PILOT);\n  //enableSlot(3, SLOT_GREEN_PILOT);\n  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\n\n  clearFIFO(); //Reset the FIFO before we begin checking the sensor\n}\n\t\n//\n// Data Collection\n//\n\n//Tell caller how many samples are available\nuint8_t MAX30105::available(void)\n{\n  int8_t numberOfSamples = sense.head - sense.tail;\n  if (numberOfSamples < 0) numberOfSamples += STORAGE_SIZE;\n\n  return (numberOfSamples);\n}\n\n//Report the most recent red value\nuint32_t MAX30105::getRed(void)\n{\n  //Check the sensor for new data for 250ms\n  if(safeCheck(250)){\n    return sense.red[sense.head];\n  }\n  else\n    return(0); //Sensor failed to find new data\n}\n\n//Report the most recent IR value\nuint32_t MAX30105::getIR(void)\n{\n  //Check the sensor for new data for 250ms\n  if(safeCheck(250))\n    return (sense.IR[sense.head]);\n  else\n    return(0); //Sensor failed to find new data\n}\n\n//Report the most recent Green value\nuint32_t MAX30105::getGreen(void)\n{\n  //Check the sensor for new data for 250ms\n  if(safeCheck(250))\n    return (sense.green[sense.head]);\n  else\n    return(0); //Sensor failed to find new data\n}\n\n//Report the next Red value in the FIFO\nuint32_t MAX30105::getFIFORed(void)\n{\n  return (sense.red[sense.tail]);\n}\n\n//Report the next IR value in the FIFO\nuint32_t MAX30105::getFIFOIR(void)\n{\n  return (sense.IR[sense.tail]);\n}\n\n//Report the next Green value in the FIFO\nuint32_t MAX30105::getFIFOGreen(void)\n{\n  return (sense.green[sense.tail]);\n}\n\n//Advance the tail\nbool MAX30105::nextSample(void)\n{\n  if(available()) //Only advance the tail if new data is available\n  {\n    sense.tail++;\n    sense.tail %= STORAGE_SIZE; //Wrap condition\n\treturn true;\n  }\n  else\n  {\n\treturn false;\n  }\n}\n\n//Polls the sensor for new data\n//Call regularly\n//If new data is available, it updates the head and tail in the main struct\n//Returns number of new samples obtained\nuint16_t MAX30105::check(void)\n{\n  //Read register FIDO_DATA in (3-uint8_t * number of active LED) chunks\n  //Until FIFO_RD_PTR = FIFO_WR_PTR\n\n  uint8_t readPointer = getReadPointer();\n  uint8_t writePointer = getWritePointer();\n  int numberOfSamples = 0;\n\n  //Do we have new data?\n  if (readPointer != writePointer)\n  {\n    //Calculate the number of readings we need to get from sensor\n    numberOfSamples = writePointer - readPointer;\n    if (numberOfSamples < 0) \n\t\tnumberOfSamples += I2C_BUFFER_LENGTH; //Wrap condition\n\n    //We now have the number of readings, now calc uint8_ts to read\n    //For this example we are just doing Red and IR (3 uint8_ts each)\n    uint8_t bytesLeftToRead = numberOfSamples * activeDiodes * 3;\n\n    //Get ready to read a burst of data from the FIFO register\n\n    //We may need to read as many as 288 uint8_ts so we read in blocks no larger than I2C_BUFFER_LENGTH\n    //I2C_BUFFER_LENGTH changes based on the platform. 64 uint8_ts for SAMD21, 32 uint8_ts for Uno.\n    while (bytesLeftToRead > 0)\n    {\n\t\t\n      uint8_t toGet = activeDiodes * 3;\n\n      //Request toGet number of uint8_ts from sensor\n      //i2c.requestFrom(MAX30105_ADDRESS, toGet);\n      while(toGet > 0)\n\t  {\n\t\tuint8_t temp[9]; //Array of 9 uint8_ts that we will convert into longs\n\t\tuint8_t temp2[4];\n        uint32_t tempLong;\n\t\n\t\tuBit.i2c.readRegister(MAX30105_ADDRESS, (uint8_t)MAX30105_FIFODATA, temp, toGet);\n\n        sense.head++; //Advance the head of the storage struct\n        sense.head %= STORAGE_SIZE; //Wrap condition\n\t\tfor (int led = 0; led < activeDiodes; led++)\n\t\t{\n\t\t\tuint8_t checkOffset = led * 3;\n\t\t\ttemp2[3] = 0;\n\t\t\ttemp2[0] = temp[2 + checkOffset];\n\t\t\ttemp2[1] = temp[1 + checkOffset];\n\t\t\ttemp2[2] = temp[checkOffset];\n\t\t\tmemcpy(&tempLong, temp2, sizeof(tempLong)); //tempLong is 4 bytes, we only need 3\n\t\t\ttempLong &= 0x3FFFF;\n\t\t\tswitch (led)\n\t\t\t{\n\t\t\t\tcase 0:\n\t\t\t\t\tsense.red[sense.head] = tempLong;//Long;//Store this reading into the sense array\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1:\n\t\t\t\t\tsense.IR[sense.head] = tempLong;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tsense.green[sense.head] = tempLong;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tbytesLeftToRead -= toGet;\n\t\ttoGet -= activeDiodes * 3;\n\t  }\n    } //End while (bytesLeftToRead > 0)\n  } //End readPtr != writePtr\n  return (numberOfSamples); //Let the world know how much new data we found\n}\n\n//Check for new data but give up after a certain amount of time\n//Returns true if new data was found\n//Returns false if new data was not found\nbool MAX30105::safeCheck(uint8_t maxTimeToCheck)\n{\n  uint64_t markTime = system_timer_current_time();\n  \n  while(1)\n  {\n\tif(system_timer_current_time() - markTime > maxTimeToCheck){\n\t\t\n\t\treturn(false);\n\t}\n\n\tif(check() == true)\n\t{ //We found new data!\n\t  return(true);\n\t}\n\tfiber_sleep(1);\n  }\n}\n\n//Given a register, read it, mask it, and then set the thing\nvoid MAX30105::bitMask(uint8_t reg, uint8_t mask, uint8_t thing)\n{\n  // Grab current register context\n  uint8_t originalContents = readRegister8(MAX30105_ADDRESS, reg);\n\n  // Zero-out the portions of the register we're interested in\n  originalContents = originalContents & mask;\n\n  // Change contents\n  writeRegister8(MAX30105_ADDRESS, reg, originalContents | thing);\n}\n\n//  Heart Rate Monitor functions takes a sample value and the sample number\n//  Returns true if a beat is detected\n//  A running average of four samples is recommended for display on the screen.\nbool MAX30105::checkForBeat(uint32_t sample)\n{\n  bool beatDetected = false;\n  \n  //  Save current state\n  IR_AC_Signal_Previous = IR_AC_Signal_Current;\n  \n  //This is good to view for debugging\n  //uBit.serial.send(\"Signal_Current: \");\n  //uBit.serial.send(IR_AC_Signal_Current);\n\n  //  Process next data sample\n  IR_Average_Estimated = averageDCEstimator(&ir_avg_reg, sample);\n  IR_AC_Signal_Current = lowPassFIRFilter(sample - IR_Average_Estimated);\n\n  //  Detect positive zero crossing (rising edge)\n  if ((IR_AC_Signal_Previous < 0) && (IR_AC_Signal_Current >= 0))\n  {\n  \n    IR_AC_Max = IR_AC_Signal_max; //Adjust our AC max and min\n    IR_AC_Min = IR_AC_Signal_min;\n\n    positiveEdge = 1;\n    negativeEdge = 0;\n    IR_AC_Signal_max = 0;\n\n    //if ((IR_AC_Max - IR_AC_Min) > 100 & (IR_AC_Max - IR_AC_Min) < 1000)\n    if (((IR_AC_Max - IR_AC_Min) > 20) && ((IR_AC_Max - IR_AC_Min) < 1000))\n    {\n\t  placeholder++;\n      //Heart beat!!!\n      beatDetected = true;\n    }\n  }\n\n  //  Detect negative zero crossing (falling edge)\n  if ((IR_AC_Signal_Previous > 0) && (IR_AC_Signal_Current <= 0))\n  {\n    positiveEdge = 0;\n    negativeEdge = 1;\n    IR_AC_Signal_min = 0;\n  }\n\n  //  Find Maximum value in positive cycle\n  if (positiveEdge && (IR_AC_Signal_Current > IR_AC_Signal_Previous))\n  {\n    IR_AC_Signal_max = IR_AC_Signal_Current;\n  }\n\n  //  Find Minimum value in negative cycle\n  if (negativeEdge && (IR_AC_Signal_Current < IR_AC_Signal_Previous))\n  {\n    IR_AC_Signal_min = IR_AC_Signal_Current;\n  }\n  \n  return(beatDetected);\n}\n\nint16_t MAX30105::getPlaceholder()\n{\n\treturn placeholder;\n}\n\n//  Average DC Estimator\nint16_t MAX30105::averageDCEstimator(int32_t *p, uint16_t x)\n{\n  *p += ((((long) x << 15) - *p) >> 4);\n  return (*p >> 15);\n}\n\n//  Low Pass FIR Filter\nint16_t MAX30105::lowPassFIRFilter(int16_t din)\n{  \n  cbuf[offset] = din;\n\n  int32_t z = mul16(FIRCoeffs[11], cbuf[(offset - 11) & 0x1F]);\n  \n  for (uint8_t i = 0 ; i < 11 ; i++)\n  {\n    z += mul16(FIRCoeffs[i], cbuf[(offset - i) & 0x1F] + cbuf[(offset - 22 + i) & 0x1F]);\n  }\n\n  offset++;\n  offset %= 32; //Wrap condition\n\n  return(z >> 15);\n}\n\n//  Integer multiplier\nint32_t MAX30105::mul16(int16_t x, int16_t y)\n{\n  return((long)x * (long)y);\n}\n\n//\n// Low-level I2C Communication\n//\nuint8_t MAX30105::readRegister8(uint8_t address, uint8_t reg) {\n\tuint8_t data;\n\tuBit.i2c.readRegister(address, reg, &data, 1);\n\treturn data;\n}\n\nvoid MAX30105::writeRegister8(uint8_t address, uint8_t reg, uint8_t value) {\n\n#if MICROBIT_CODAL\n\tuint8_t temp[2];\n#else \n\tchar temp[2];\n#endif\n\ttemp[0] = reg;\n\tmemcpy(&temp[1], &value, 2); \n\n\tuBit.i2c.write(address, temp, 2);\n\n}\n","MAX30105.h":"/*************************************************** \n This is a library written for the Maxim MAX30105 Optical Smoke Detector\n It should also work with the MAX30102. However, the MAX30102 does not have a Green LED.\n\n These sensors use I2C to communicate, as well as a single (optional)\n interrupt line that is not currently supported in this driver.\n \n Written by Peter Jansen and Nathan Seidle (SparkFun)\n BSD license, all text above must be included in any redistribution.\n *****************************************************/\n\n#pragma once\n\n#ifndef __MBED_H_\n#define __MBED_H_\n#include \"mbed.h\"\n#endif\n\n#include \"pxt.h\"\n\n#define I2C_SPEED_STANDARD        100000\n#define I2C_SPEED_FAST            400000\n\n//The catch-all default is 32\n#define I2C_BUFFER_LENGTH 32\n\nclass MAX30105 {\n public: \n\n  MAX30105(void);\n\n  void beginParticle();\n\n  uint32_t getRed(void); //Returns immediate red value\n  uint32_t getIR(void); //Returns immediate IR value\n  uint32_t getGreen(void); //Returns immediate green value\n  bool safeCheck(uint8_t maxTimeToCheck); //Given a max amount of time, check for new data\n\n  // Configuration\n  void softReset();\n  void shutDown(); \n  void wakeUp(); \n\n  void setLEDMode(uint8_t mode);\n\n  void setADCRange(uint8_t adcRange);\n  void setSampleRate(uint8_t sampleRate);\n  void setPulseWidth(uint8_t pulseWidth);\n\n  void setPulseAmplitudeRed(uint8_t value);\n  void setPulseAmplitudeIR(uint8_t value);\n\n  void setProximityThreshold(uint8_t threshMSB);\n\n  //Multi-led configuration mode (page 22)\n  void enableSlot(uint8_t slotNumber, uint8_t device); //Given slot number, assign a device to slot\n  void disableSlots(void);\n  \n  // Data Collection\n\n  //Interrupts (page 13, 14)\n  uint8_t getINT1(void); //Returns the main interrupt group\n  uint8_t getINT2(void); //Returns the temp ready interrupt\n  void enableAFULL(void); //Enable/disable individual interrupts\n  void disableAFULL(void);\n  void enableDATARDY(void);\n  void disableDATARDY(void);\n  void enableALCOVF(void);\n  void disableALCOVF(void);\n  void enablePROXINT(void);\n  void disablePROXINT(void);\n  void enableDIETEMPRDY(void);\n  void disableDIETEMPRDY(void);\n\n  //FIFO Configuration (page 18)\n  void setFIFOAverage(uint8_t samples);\n  void enableFIFORollover();\n  void disableFIFORollover();\n  void setFIFOAlmostFull(uint8_t samples);\n  \n  //FIFO Reading\n  uint16_t check(void); //Checks for new data and fills FIFO\n  uint8_t available(void); //Tells caller how many new samples are available (head - tail)\n  bool nextSample(void); //Advances the tail of the sense array\n  uint32_t getFIFORed(void); //Returns the FIFO sample pointed to by tail\n  uint32_t getFIFOIR(void); //Returns the FIFO sample pointed to by tail\n  uint32_t getFIFOGreen(void); //Returns the FIFO sample pointed to by tail\n\n  uint8_t getWritePointer(void);\n  uint8_t getReadPointer(void);\n  void clearFIFO(void); //Sets the read/write pointers to zero\n\n  //Proximity Mode Interrupt Threshold\n  void setPROXINTTHRESH(uint8_t val);\n\n  // Die Temperature\n  float readTemperature();\n  float readTemperatureF();\n\n  // Detecting ID/Revision\n  uint8_t getRevisionID();\n  uint8_t readPartID();  \n\n  // Setup the IC with user selectable settings\n  void setup(uint8_t powerLevel, uint8_t sampleAverage, uint8_t ledMode, int sampleRate, int pulseWidth, int adcRange);\n\n  bool checkForBeat(uint32_t sample);\n  int16_t averageDCEstimator(int32_t *p, uint16_t x);\n  int16_t lowPassFIRFilter(int16_t din);\n  int32_t mul16(int16_t x, int16_t y);\n\n  \n  // Low-level I2C communication\n  uint8_t readRegister8(uint8_t address, uint8_t reg);\n  void writeRegister8(uint8_t address, uint8_t reg, uint8_t value);\n\n  int16_t getPlaceholder();\n private:\n  //activeDiodes is the number of channels turned on, and can be 1 to 3. 2 is common for Red+IR.\n  \n  uint8_t revisionID; \n\n  void readRevisionID();\n\n  void bitMask(uint8_t reg, uint8_t mask, uint8_t thing);\n\n\n};\n","README.md":"\n> Open this page at [https://chenq86.github.io/test2-extension/](https://chenq86.github.io/test2-extension/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/chenq86/test2-extension** and import\n\n## Edit this project ![Build status badge](https://github.com/chenq86/test2-extension/workflows/MakeCode/badge.svg)\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/chenq86/test2-extension** and click import\n\n## Blocks preview\n\nThis image shows the blocks code from the last commit in master.\nThis image may take a few minutes to refresh.\n\n![A rendered view of the blocks](https://github.com/chenq86/test2-extension/raw/master/.github/makecode/blocks.png)\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://chenq86.github.io/test2-extension/](https://chenq86.github.io/test2-extension/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/chenq86/test2-extension** and import\n\n## Edit this project ![Build status badge](https://github.com/chenq86/test2-extension/workflows/MakeCode/badge.svg)\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/chenq86/test2-extension** and click import\n\n## Blocks preview\n\nThis image shows the blocks code from the last commit in master.\nThis image may take a few minutes to refresh.\n\n![A rendered view of the blocks](https://github.com/chenq86/test2-extension/raw/master/.github/makecode/blocks.png)\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://chenq86.github.io/test2-extension/](https://chenq86.github.io/test2-extension/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/chenq86/test2-extension** and import\n\n## Edit this project ![Build status badge](https://github.com/chenq86/test2-extension/workflows/MakeCode/badge.svg)\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/chenq86/test2-extension** and click import\n\n## Blocks preview\n\nThis image shows the blocks code from the last commit in master.\nThis image may take a few minutes to refresh.\n\n![A rendered view of the blocks](https://github.com/chenq86/test2-extension/raw/master/.github/makecode/blocks.png)\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> 在 [https://qthdf.github.io/max30105_test_903_3/](https://qthdf.github.io/max30105_test_903_3/) 打开此页面\n\n## 用作扩展\n\n此仓库可以作为 **插件** 添加到 MakeCode 中。\n\n* 打开 [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* 点击 **新项目**\n* 点击齿轮图标菜单下的 **扩展**\n* 搜索 **https://github.com/qthdf/max30105_test_903_3** 并导入\n\n## 编辑此项目 ![构建状态标志](https://github.com/qthdf/max30105_test_903_3/workflows/MakeCode/badge.svg)\n\n在 MakeCode 中编辑此仓库。\n\n* 打开 [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* 点击 **导入**，然后点击 **导入 URL**\n* 粘贴 **https://github.com/qthdf/max30105_test_903_3** 并点击导入\n\n## 积木块预览\n\n此图像显示主分支中最后一次提交的块代码。\n此图像可能需要几分钟才能刷新。\n\n![块的渲染视图](https://github.com/qthdf/max30105_test_903_3/raw/master/.github/makecode/blocks.png)\n\n#### 元数据（用于搜索、渲染）\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> 在 [https://qthdf.github.io/microbitxinzenghuizong/](https://qthdf.github.io/microbitxinzenghuizong/) 打开此页面\n\n## 用作扩展\n\n此仓库可以作为 **插件** 添加到 MakeCode 中。\n\n* 打开 [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* 点击 **新项目**\n* 点击齿轮图标菜单下的 **扩展**\n* 搜索 **https://github.com/qthdf/microbitxinzenghuizong** 并导入\n\n## 编辑此项目 ![构建状态标志](https://github.com/qthdf/microbitxinzenghuizong/workflows/MakeCode/badge.svg)\n\n在 MakeCode 中编辑此仓库。\n\n* 打开 [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* 点击 **导入**，然后点击 **导入 URL**\n* 粘贴 **https://github.com/qthdf/microbitxinzenghuizong** 并点击导入\n\n## 积木块预览\n\n此图像显示主分支中最后一次提交的块代码。\n此图像可能需要几分钟才能刷新。\n\n![块的渲染视图](https://github.com/qthdf/microbitxinzenghuizong/raw/master/.github/makecode/blocks.png)\n\n#### 元数据（用于搜索、渲染）\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n","_locales/zh-CN/README.md":"\n> Open this page at [https://chenq86.github.io/test2-extension/](https://chenq86.github.io/test2-extension/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/chenq86/test2-extension** and import\n\n## Edit this project ![Build status badge](https://github.com/chenq86/test2-extension/workflows/MakeCode/badge.svg)\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/chenq86/test2-extension** and click import\n\n## Blocks preview\n\nThis image shows the blocks code from the last commit in master.\nThis image may take a few minutes to refresh.\n\n![A rendered view of the blocks](https://github.com/chenq86/test2-extension/raw/master/.github/makecode/blocks.png)\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://chenq86.github.io/test2-extension/](https://chenq86.github.io/test2-extension/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/chenq86/test2-extension** and import\n\n## Edit this project ![Build status badge](https://github.com/chenq86/test2-extension/workflows/MakeCode/badge.svg)\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/chenq86/test2-extension** and click import\n\n## Blocks preview\n\nThis image shows the blocks code from the last commit in master.\nThis image may take a few minutes to refresh.\n\n![A rendered view of the blocks](https://github.com/chenq86/test2-extension/raw/master/.github/makecode/blocks.png)\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://chenq86.github.io/test2-extension/](https://chenq86.github.io/test2-extension/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/chenq86/test2-extension** and import\n\n## Edit this project ![Build status badge](https://github.com/chenq86/test2-extension/workflows/MakeCode/badge.svg)\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/chenq86/test2-extension** and click import\n\n## Blocks preview\n\nThis image shows the blocks code from the last commit in master.\nThis image may take a few minutes to refresh.\n\n![A rendered view of the blocks](https://github.com/chenq86/test2-extension/raw/master/.github/makecode/blocks.png)\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n","enums.d.ts":"// Auto-generated. Do not edit.\n\n\n    /**\n     * Andy England @ SparkFun Electronics\n     * June 4, 2019\n     * https://github.com/sparkfun/pxt-gator-particle\n     *\n     * Development environment specifics:\n     * Written in Microsoft PXT\n     * Tested with a SparkFun Gator:Particle Sensor\n     *\n     * This code is released under the [MIT License](http://opensource.org/licenses/MIT).\n     * Please review the LICENSE.md file included with this example. If you have any questions\n     * or concerns with licensing, please contact techsupport@sparkfun.com.\n     * Distributed as-is; no warranty is given.\n     */\n\n    declare const enum LEDToRead {\n    //% block=\"红光\" enumval=1\n    Red = 1,\n    //% block=\"红外线\" enumval=2\n    Infrared = 2,\n    }\n\n\n    declare const enum HeartbeatType {\n    //% block=\"瞬时心率\" enumval=0\n    BPM = 0,\n    //% block=\"平均心率\" enumval=1\n    AVG = 1,\n    }\n\n\n    declare const enum LEDMode {\n    //% block=\"Red\" enumval=2\n    RedLED = 2,\n    //% block=\"Red & Infrared\" enumval=3\n    RedAndIR = 3,\n    }\n\n// Auto-generated. Do not edit. Really.\n","heart.cpp":"/**\n* Andy England @ SparkFun Electronics\n* June 4, 2019\n* https://github.com/sparkfun/pxt-gator-particle\n*\n* Development environment specifics:\n* Written in Microsoft PXT\n* Tested with a SparkFun Gator:Particle Sensor\n*\n* This code is released under the [MIT License](http://opensource.org/licenses/MIT).\n* Please review the LICENSE.md file included with this example. If you have any questions\n* or concerns with licensing, please contact techsupport@sparkfun.com.\n* Distributed as-is; no warranty is given.\n*/\n\n\n#include \"pxt.h\"\n#include <cstdint>\n#include <math.h>\n#include \"MAX30105.h\"\n\nenum LEDToRead{\n\t//% block=\"红光\" enumval=1\n\tRed=1,\t\n\t//% block=\"红外线\" enumval=2\n\tInfrared=2,\n};\n \nenum HeartbeatType{\n\t//% block=\"瞬时心率\" enumval=0\n\tBPM=0,\n\t//% block=\"平均心率\" enumval=1\n\tAVG=1,\n};\n\nenum LEDMode{\n\t//% block=\"Red\" enumval=2\n\tRedLED=2,\n\t//% block=\"Red & Infrared\" enumval=3\n\tRedAndIR=3,\n};\n\nusing namespace pxt;\n\nnamespace Microbit {\n\tMAX30105 *particleSensor;\n\tconst uint8_t RATE_SIZE = 4; //Increase this for more averaging. 4 is good.\n\tuint8_t rates[RATE_SIZE]; //Array of heart rates\n\tuint8_t rateSpot = 0;\n\tunsigned long lastBeat = 0; //Time at which the last beat occurred\n\t\n\tfloat beatsPerMinute;\n\tint beatAvg;\n\n\t//%\n\tvoid begin()\n\t{\n\t\tparticleSensor->beginParticle();\n\t\tparticleSensor->setup(0x1F, 4, 2, 400, 411, 4096);\n\t}\n\t\n\t//%\n\tuint32_t color(uint8_t type)\n\t{\n\t\tuint32_t colorValue;\n\t\tswitch(type)\n\t\t{\n\t\t\tcase 1:\n\t\t\t\tcolorValue = particleSensor->getRed();\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tcolorValue = particleSensor->getIR();\n\t\t\t\tbreak;\n\t\t}\n\t\treturn colorValue;\n\t}\n\n\t//%\n\tvoid setReadMode(uint8_t mode)\n\t{\n\t\tparticleSensor->setLEDMode(mode);\n\t}\n\n\t//%\n\tvoid setAmplitude(uint8_t led, uint8_t myBrightness)\n\t{\n\t\tswitch(led)\n\t\t{\n\t\t\tcase 1:\n\t\t\t\tparticleSensor->setPulseAmplitudeRed(myBrightness);\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tparticleSensor->setPulseAmplitudeIR(myBrightness);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t//%\n\tint16_t heartbeat(uint8_t type)\n\t{\n\t\tuint8_t myBeat;\n\t\tparticleSensor->safeCheck(100);\n\t\tdo\n\t\t{\n\t\t\tuint32_t irValue = particleSensor->getFIFOIR();\n\t\t\tif (particleSensor->checkForBeat(irValue) == true)\n\t\t\t{\n\t\t\t\t//We sensed a beat!\n\t\t\t\tunsigned long delta = uBit.systemTime() - lastBeat;\n\t\t\t\tlastBeat = uBit.systemTime();\n\n\t\t\t\tbeatsPerMinute = 60 / (delta / 1000.0);\n\n\t\t\t\tif (beatsPerMinute < 255 && beatsPerMinute > 20)\n\t\t\t\t{\n\t\t\t\t\trates[rateSpot++] = (uint8_t)beatsPerMinute; //Store this reading in the array\n\t\t\t\t\trateSpot %= RATE_SIZE; //Wrap variable\n\n\t\t\t\t\t//Take average of readings\n\t\t\t\t\tbeatAvg = 0;\n\t\t\t\t\tfor (uint8_t x = 0 ; x < RATE_SIZE ; x++){\n\t\t\t\t\t\tbeatAvg += rates[x];\n\t\t\t\t\t}\n\t\t\t\t\tbeatAvg /= RATE_SIZE;\n\t\t\t\t}\n\t\t\t}\n\t\t} while(particleSensor->nextSample());\n\t\tswitch(type)\n\t\t{\n\t\t\tcase 0:\n\t\t\t\tmyBeat = (uint8_t)beatsPerMinute;\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\tcase 1:\n\t\t\t\tmyBeat = (uint8_t)beatAvg;\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t}\n\t\treturn myBeat;\n\t}\n}\n","main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"typescript_statement\" editable=\"false\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"enum Oled {\" line1=\"\" line2=\"    //% block=&quot; &quot;\" line3=\"\" line4=\"    oled1 = 0,\" line5=\"\" line6=\"    //% block=&quot; &quot;\" line7=\"\" line8=\"    oled2 = 1,\" line9=\"\" line10=\"    //% block=&quot; &quot;\" line11=\"\" line12=\"    oled3 = 2,\" line13=\"\" line14=\"    //% block=&quot; &quot;\" line15=\"\" line16=\"    oled4 = 3,\" line17=\"\" line18=\"    //% block=&quot; &quot;\" line19=\"\" line20=\"    oled5 = 4,\" line21=\"\" line22=\"    //% block=&quot; &quot;\" line23=\"\" line24=\"    oled6 = 5,\" line25=\"\" line26=\"    //% block=&quot; &quot;\" line27=\"\" line28=\"    oled7 = 6,\" line29=\"\" line30=\"    //% block=&quot; &quot;\" line31=\"\" line32=\"    oled8 = 7,\" line33=\"\" line34=\"    //% block=&quot; &quot;\" line35=\"\" line36=\"    oled9 = 8,\" line37=\"\" line38=\"    //% block=&quot; &quot;\" line39=\"\" line40=\"    oled10 = 9,\" line41=\"\" line42=\"    //% block=&quot; &quot;\" line43=\"\" line44=\"    oled11 = 10,\" line45=\"\" line46=\"    //% block=&quot; &quot;\" line47=\"\" line48=\"    oled12 = 11,\" line49=\"\" line50=\"    //% block=&quot; &quot;\" line51=\"\" line52=\"    oled13 = 12,\" line53=\"\" line54=\"    //% block=&quot; &quot;\" line55=\"\" line56=\"    oled14 = 13,\" line57=\"\" line58=\"    //% block=&quot; &quot;\" line59=\"\" line60=\"    oled15 = 14,\" line61=\"\" line62=\"    //% block=&quot; &quot;\" line63=\"\" line64=\"    oled16 = 15,\" line65=\"\" line66=\"    //% block=&quot; &quot;\" line67=\"\" line68=\"    oled17 = 16,\" line69=\"\" line70=\"    //% block=&quot; &quot;\" line71=\"\" line72=\"    oled18 = 17,\" line73=\"\" line74=\"    //% block=&quot; &quot;\" line75=\"\" line76=\"    oled19 = 18,\" line77=\"\" line78=\"    //% block=&quot; &quot;\" line79=\"\" line80=\"    oled20 = 19,\" line81=\"\" line82=\"    //% block=&quot; &quot;\" line83=\"\" line84=\"    oled21 = 20,\" line85=\"\" line86=\"    //% block=&quot; &quot;\" line87=\"\" line88=\"    oled22 = 21,\" line89=\"\" line90=\"    //% block=&quot; &quot;\" line91=\"\" line92=\"    oled23 = 22,\" line93=\"\" line94=\"    //% block=&quot; &quot;\" line95=\"\" line96=\"    oled24 = 23,\" line97=\"\" line98=\"    //% block=&quot; &quot;\" line99=\"\" line100=\"    oled25 = 24,\" line101=\"\" line102=\"    //% block=&quot; &quot;\" line103=\"\" line104=\"    oled26 = 25,\" line105=\"\" line106=\"    //% block=&quot; &quot;\" line107=\"\" line108=\"    oled27 = 26,\" line109=\"\" line110=\"    //% block=&quot; &quot;\" line111=\"\" line112=\"    oled28 = 27,\" line113=\"\" line114=\"    //% block=&quot; &quot;\" line115=\"\" line116=\"    oled29 = 28,\" line117=\"\" line118=\"    //% block=&quot; &quot;\" line119=\"\" line120=\"    oled30 = 29,\" line121=\"\" line122=\"    //% block=&quot; &quot;\" line123=\"\" line124=\"    oled31 = 30,\" line125=\"\" line126=\"    //% block=&quot; &quot;\" line127=\"\" line128=\"    oled32 = 31,\" line129=\"\" line130=\"    //% block=&quot; &quot;\" line131=\"\" line132=\"    oled33 = 32,\" line133=\"\" line134=\"    //% block=&quot; &quot;\" line135=\"\" line136=\"    oled34 = 33,\" line137=\"\" line138=\"    //% block=&quot; &quot;\" line139=\"\" line140=\"    oled35 = 34,\" line141=\"\" line142=\"    //% block=&quot; &quot;\" line143=\"\" line144=\"    oled36 = 35,\" line145=\"\" line146=\"    //% block=&quot; &quot;\" line147=\"\" line148=\"    oled37 = 36,\" line149=\"\" line150=\"    //% block=&quot; &quot;\" line151=\"\" line152=\"    oled38 = 37,\" line153=\"\" line154=\"    //% block=&quot; &quot;\" line155=\"\" line156=\"    oled39 = 38,\" line157=\"\" line158=\"    //% block=&quot; &quot;\" line159=\"\" line160=\"    oled40 = 39,\" line161=\"\" line162=\"    //% block=&quot; &quot;\" line163=\"\" line164=\"    oled41 = 40,\" line165=\"\" line166=\"    //% block=&quot; &quot;\" line167=\"\" line168=\"    oled42 = 41,\" line169=\"\" line170=\"    //% block=&quot; &quot;\" line171=\"\" line172=\"    oled43 = 42,\" line173=\"\" line174=\"    //% block=&quot; &quot;\" line175=\"\" line176=\"    oled44 = 43,\" line177=\"\" line178=\"    //% block=&quot; &quot;\" line179=\"\" line180=\"    oled45 = 44,\" line181=\"\" line182=\"    //% block=&quot; &quot;\" line183=\"\" line184=\"    oled46 = 45,\" line185=\"\" line186=\"    //% block=&quot; &quot;\" line187=\"\" line188=\"    oled47 = 46,\" line189=\"\" line190=\"    //% block=&quot; &quot;\" line191=\"\" line192=\"    oled48 = 47,\" line193=\"\" line194=\"    //% block=&quot; &quot;\" line195=\"\" line196=\"    oled49 = 48,\" line197=\"\" line198=\"    //% block=&quot; &quot;\" line199=\"\" line200=\"    oled50 = 49,\" line201=\"\" line202=\"    //% block=&quot; &quot;\" line203=\"\" line204=\"    oled51 = 50,\" line205=\"\" line206=\"    //% block=&quot; &quot;\" line207=\"\" line208=\"    oled52 = 51,\" line209=\"\" line210=\"\" line211=\"\" line212=\"\" line213=\"\" line214=\"}\" numlines=\"215\"></mutation><next><block type=\"typescript_statement\" editable=\"false\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"enum Write_pin {\" line1=\"\" line2=\"    //% block=&quot;P0&quot;\" line3=\"\" line4=\"    w0 = 1,\" line5=\"\" line6=\"    //% block=&quot;P16&quot;\" line7=\"\" line8=\"    w1 = 2,\" line9=\"\" line10=\"    //% block=&quot;P1&quot;\" line11=\"\" line12=\"    w2 = 3,\" line13=\"\" line14=\"    //% block=&quot;P12&quot;\" line15=\"\" line16=\"    w3 = 4,\" line17=\"\" line18=\"    //% block=&quot;P2&quot;\" line19=\"\" line20=\"    w4 = 5,\" line21=\"\" line22=\"    //% block=&quot;P8&quot;\" line23=\"\" line24=\"    w5 = 6\" line25=\"\" line26=\"\" line27=\"\" line28=\"}\" numlines=\"29\"></mutation><next><block type=\"typescript_statement\" editable=\"false\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"enum Read_pin {\" line1=\"\" line2=\"    //% block=&quot;P0&quot;\" line3=\"\" line4=\"    r0 = 1,\" line5=\"\" line6=\"    //% block=&quot;P1&quot;\" line7=\"\" line8=\"    r1 = 2,\" line9=\"\" line10=\"    //% block=&quot;P2&quot;\" line11=\"\" line12=\"    r2 = 3\" line13=\"\" line14=\"\" line15=\"\" line16=\"}\" numlines=\"17\"></mutation><next><block type=\"typescript_statement\" editable=\"false\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"enum Ultrasonic_pin {\" line1=\"\" line2=\"    //% block=&quot;(P0,P13)&quot;\" line3=\"\" line4=\"    u1 = 13,\" line5=\"\" line6=\"    //% block=&quot;(P16,P10)&quot;\" line7=\"\" line8=\"    u2 = 1610,\" line9=\"\" line10=\"    //% block=&quot;(P1,P14)&quot;\" line11=\"\" line12=\"    u3 = 114,\" line13=\"\" line14=\"    //% block=&quot;(P12,P9)&quot;\" line15=\"\" line16=\"    u4 = 129,\" line17=\"\" line18=\"    //% block=&quot;(P2,P15)&quot;\" line19=\"\" line20=\"    u5 = 215,\" line21=\"\" line22=\"    //% block=&quot;(P8,P7)&quot;\" line23=\"\" line24=\"    u6 = 87\" line25=\"\" line26=\"}\" numlines=\"27\"></mutation><next><block type=\"typescript_statement\" editable=\"false\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"enum Recodpin {\" line1=\"\" line2=\"    //% block=&quot;(P0,P13)&quot;\" line3=\"\" line4=\"    rc1 = 13,\" line5=\"    //% block=&quot;(P1,P14)&quot;\" line6=\"\" line7=\"    rc2 = 114,\" line8=\"\" line9=\"    //% block=&quot;(P2,P15)&quot;\" line10=\"\" line11=\"    rc3 = 215\" line12=\"\" line13=\"}\" numlines=\"14\"></mutation><next><block type=\"typescript_statement\" editable=\"false\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"enum Record_list {//\" line1=\"\" line2=\"    //% block=&quot;声音1&quot;\" line3=\"\" line4=\"    rl1 = 1,\" line5=\"\" line6=\"    //% block=&quot;声音2&quot;\" line7=\"\" line8=\"    rl2 = 2,\" line9=\"\" line10=\"    //% block=&quot;声音3&quot;\" line11=\"\" line12=\"    rl3 = 3,\" line13=\"    //% block=&quot;声音4&quot;\" line14=\"\" line15=\"    rl4 = 4,\" line16=\"    //% block=&quot;声音5&quot;\" line17=\"\" line18=\"    rl5 = 5,\" line19=\"    //% block=&quot;录音&quot;\" line20=\"\" line21=\"    rl6 = 6\" line22=\"\" line23=\"}\" numlines=\"24\"></mutation><next><block type=\"typescript_statement\" editable=\"false\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"enum PingUnit {\" line1=\"\" line2=\"    //% block=&quot;厘米&quot;\" line3=\"\" line4=\"    Centimeters,\" line5=\"\" line6=\"    //% block=&quot;微秒&quot;\" line7=\"\" line8=\"    MicroSeconds,\" line9=\"\" line10=\"\" line11=\"\" line12=\"    //% block=&quot;英寸&quot;\" line13=\"\" line14=\"    Inches\" line15=\"\" line16=\"}\" numlines=\"17\"></mutation><next><block type=\"typescript_statement\" editable=\"false\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"enum Grayscale_pin {\" line1=\"\" line2=\"    //% block=&quot;P13&quot;\" line3=\"\" line4=\"    g0 = 1,\" line5=\"\" line6=\"    //% block=&quot;P16&quot;\" line7=\"\" line8=\"    g1 = 2,\" line9=\"\" line10=\"    //% block=&quot;P0&quot;\" line11=\"\" line12=\"    g2 = 3,\" line13=\"\" line14=\"    //% block=&quot;P10&quot;\" line15=\"\" line16=\"    g3 = 4,\" line17=\"\" line18=\"    //% block=&quot;P14&quot;\" line19=\"\" line20=\"    g4 = 5,\" line21=\"\" line22=\"    //% block=&quot;P12&quot;\" line23=\"\" line24=\"    g5 = 6,\" line25=\"\" line26=\"    //% block=&quot;P1&quot;\" line27=\"\" line28=\"    g6 = 7,\" line29=\"\" line30=\"    //% block=&quot;P9&quot;\" line31=\"\" line32=\"    g7 = 8,\" line33=\"\" line34=\"    //% block=&quot;P15&quot;\" line35=\"\" line36=\"    g8 = 9,\" line37=\"\" line38=\"    //% block=&quot;P8&quot;\" line39=\"\" line40=\"    g9 = 10,\" line41=\"\" line42=\"    //% block=&quot;P2&quot;\" line43=\"\" line44=\"    g10 = 11,\" line45=\"\" line46=\"    //% block=&quot;P7&quot;\" line47=\"\" line48=\"    g11 = 12\" line49=\"\" line50=\"}\" numlines=\"51\"></mutation><next><block type=\"typescript_statement\" editable=\"false\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"enum gs {\" line1=\"\" line2=\"    //% block=&quot;上&quot;\" line3=\"\" line4=\"    g0 = 1,\" line5=\"\" line6=\"    //% block=&quot;下&quot;\" line7=\"\" line8=\"    g1 = 2,\" line9=\"\" line10=\"    //% block=&quot;左&quot;\" line11=\"\" line12=\"    g2 = 3,\" line13=\"\" line14=\"    //% block=&quot;右&quot;\" line15=\"\" line16=\"    g3 = 4\" line17=\"\" line18=\"\" line19=\"\" line20=\"}\" numlines=\"21\"></mutation><next><block type=\"typescript_statement\" editable=\"false\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"enum PINs {\" line1=\"\" line2=\"    P0,\" line3=\"\" line4=\"    P1,\" line5=\"\" line6=\"    P2,\" line7=\"\" line8=\"    P3,\" line9=\"\" line10=\"    P4,\" line11=\"\" line12=\"    P5,\" line13=\"\" line14=\"    P6,\" line15=\"\" line16=\"    P7,\" line17=\"\" line18=\"    P8,\" line19=\"\" line20=\"    P9,\" line21=\"\" line22=\"    P10,\" line23=\"\" line24=\"    P11,\" line25=\"\" line26=\"    P12,\" line27=\"\" line28=\"    P13,\" line29=\"\" line30=\"    P14,\" line31=\"\" line32=\"    P15,\" line33=\"\" line34=\"    P16,\" line35=\"\" line36=\"    P19,\" line37=\"\" line38=\"    P20\" line39=\"\" line40=\"}\" numlines=\"41\"></mutation><next><block type=\"typescript_statement\" editable=\"false\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"enum TMP36Type {\" line1=\"\" line2=\"    //% block=&quot;(℃)&quot; enumval=0\" line3=\"\" line4=\"    TMP36_temperature_C,\" line5=\"\" line6=\"\" line7=\"\" line8=\"    //% block=&quot;(℉)&quot; enumval=1\" line9=\"\" line10=\"    TMP36_temperature_F,\" line11=\"\" line12=\"}\" numlines=\"13\"></mutation><next><block type=\"typescript_statement\" editable=\"false\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"enum RGB {\" line1=\"\" line2=\"    //% block=&quot;红&quot;\" line3=\"\" line4=\"    RED,\" line5=\"\" line6=\"    //% block=&quot;绿&quot;\" line7=\"\" line8=\"    GREEN,\" line9=\"\" line10=\"    //% block=&quot;蓝&quot;\" line11=\"\" line12=\"    BLUE,\" line13=\"\" line14=\"    //% block=&quot;全部&quot;\" line15=\"\" line16=\"    CLEAR\" line17=\"\" line18=\"}\" numlines=\"19\"></mutation><next><block type=\"typescript_statement\" editable=\"false\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"enum NeoPixelColors {\" line1=\"\" line2=\"    //% block=红\" line3=\"\" line4=\"    Red = 0xFF0000,\" line5=\"\" line6=\"    //% block=橙\" line7=\"\" line8=\"    Orange = 0xFFA500,\" line9=\"\" line10=\"    //% block=黄\" line11=\"\" line12=\"    Yellow = 0xFFFF00,\" line13=\"\" line14=\"    //% block=绿\" line15=\"\" line16=\"    Green = 0x00FF00,\" line17=\"\" line18=\"    //% block=蓝\" line19=\"\" line20=\"    Blue = 0x0000FF,\" line21=\"\" line22=\"    //% block=靛蓝\" line23=\"\" line24=\"    Indigo = 0x4b0082,\" line25=\"\" line26=\"    //% block=紫罗兰\" line27=\"\" line28=\"    Violet = 0x8a2be2,\" line29=\"\" line30=\"    //% block=紫\" line31=\"\" line32=\"    Purple = 0xFF00FF,\" line33=\"\" line34=\"    //% block=白\" line35=\"\" line36=\"    White = 0xFFFFFF,\" line37=\"\" line38=\"    //% block=黑\" line39=\"\" line40=\"    Black = 0x000000\" line41=\"\" line42=\"}\" numlines=\"43\"></mutation><next><block type=\"typescript_statement\" editable=\"false\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"enum NeoPixelMode {\" line1=\"\" line2=\"    //% block=&quot;RGB (GRB 格式)&quot;\" line3=\"\" line4=\"    RGB = 1,\" line5=\"\" line6=\"    //% block=&quot;RGB+W&quot;\" line7=\"\" line8=\"    RGBW = 2,\" line9=\"\" line10=\"    //% block=&quot;RGB (RGB 格式)&quot;\" line11=\"\" line12=\"    RGB_RGB = 3\" line13=\"\" line14=\"}\" numlines=\"15\"></mutation><next><block type=\"typescript_statement\" editable=\"false\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"namespace Microbit {\" line1=\"\" line2=\"\" line3=\"\" line4=\"    export enum DHT11_state {\" line5=\"\" line6=\"        //% block=&quot;温度(℃)&quot; enumval=0\" line7=\"\" line8=\"        DHT11_temperature_C,\" line9=\"\" line10=\"\" line11=\"\" line12=\"        //% block=&quot;湿度(0~100)&quot; enumval=1\" line13=\"\" line14=\"        DHT11_humidity,\" line15=\"\" line16=\"    }\" line17=\"\" line18=\"\" line19=\"\" line20=\"    export enum Distance_Unit_List {\" line21=\"\" line22=\"        //% block=&quot;厘米&quot; \" line23=\"\" line24=\"        Distance_Unit_cm,\" line25=\"\" line26=\"\" line27=\"\" line28=\"        //% block=&quot;英寸&quot;\" line29=\"\" line30=\"        Distance_Unit_inch,\" line31=\"\" line32=\"    }\" line33=\"\" line34=\"\" line35=\"\" line36=\"    //% blockId=buttonState\" line37=\"\" line38=\"    //% weight=27\" line39=\"\" line40=\"    //% buttonpin.fieldEditor=&quot;gridpicker&quot;\" line41=\"\" line42=\"    //% buttonpin.fieldOptions.width=220\" line43=\"\" line44=\"    //% buttonpin.fieldOptions.columns=2\" line45=\"\" line46=\"    //% block=&quot;按钮传感器 %buttonpin&quot;\" line47=\"\" line48=\"    //% subcategory=传感器\" line49=\"\" line50=\"    export function buttonState(buttonpin: Write_pin): number {\" line51=\"\" line52=\"        let pin16\" line53=\"\" line54=\"        if (buttonpin == 1) {\" line55=\"\" line56=\"\" line57=\"\" line58=\"            pin16 = DigitalPin.P0;\" line59=\"\" line60=\"        }\" line61=\"\" line62=\"        if (buttonpin == 2) {\" line63=\"\" line64=\"            pin16 = DigitalPin.P16;\" line65=\"\" line66=\"        }\" line67=\"\" line68=\"        if (buttonpin == 3) {\" line69=\"\" line70=\"            pin16 = DigitalPin.P1;\" line71=\"\" line72=\"        }\" line73=\"\" line74=\"        if (buttonpin == 4) {\" line75=\"\" line76=\"\" line77=\"\" line78=\"            pin16 = DigitalPin.P12;\" line79=\"\" line80=\"        }\" line81=\"\" line82=\"        if (buttonpin == 5) {\" line83=\"\" line84=\"            pin16 = DigitalPin.P2;\" line85=\"\" line86=\"        }\" line87=\"\" line88=\"        if (buttonpin == 6) {\" line89=\"\" line90=\"            pin16 = DigitalPin.P8;\" line91=\"\" line92=\"        }\" line93=\"\" line94=\"\" line95=\"\" line96=\"\" line97=\"\" line98=\"        return pins.digitalReadPin(pin16);\" line99=\"\" line100=\"    }\" line101=\"\" line102=\"\" line103=\"\" line104=\"    //% blockId=hState\" line105=\"\" line106=\"    //% weight=27\" line107=\"\" line108=\"    //% hallpin.fieldEditor=&quot;gridpicker&quot;\" line109=\"\" line110=\"    //% hallpin.fieldOptions.width=220\" line111=\"\" line112=\"    //% hallpin.fieldOptions.columns=1\" line113=\"\" line114=\"    //% block=&quot;霍尔传感器 %hallpin&quot;\" line115=\"\" line116=\"    //% subcategory=传感器\" line117=\"\" line118=\"    export function hState(hallpin: Read_pin): number {\" line119=\"\" line120=\"        let pin18\" line121=\"\" line122=\"        if (hallpin == 1) {\" line123=\"\" line124=\"\" line125=\"\" line126=\"            pin18 = AnalogPin.P0;\" line127=\"\" line128=\"        }\" line129=\"\" line130=\"        if (hallpin == 2) {\" line131=\"\" line132=\"            pin18 = AnalogPin.P1;\" line133=\"\" line134=\"        }\" line135=\"\" line136=\"        if (hallpin == 3) {\" line137=\"\" line138=\"            pin18 = AnalogPin.P2;\" line139=\"\" line140=\"        }\" line141=\"        if (pins.analogReadPin(pin18) &lt; 512)\" line142=\"            return (0);\" line143=\"        else\" line144=\"            return (1);\" line145=\"\" line146=\"    }\" line147=\"\" line148=\"\" line149=\"\" line150=\"    //% blockId=farState\" line151=\"\" line152=\"    //% weight=38\" line153=\"\" line154=\"    //% farStatepin.fieldEditor=&quot;gridpicker&quot;\" line155=\"\" line156=\"    //% farStatepin.fieldOptions.width=220\" line157=\"\" line158=\"    //% farStatepin.fieldOptions.columns=2\" line159=\"\" line160=\"    //% block=&quot;远距离光电传感器 %farStatepin&quot;\" line161=\"\" line162=\"    //% subcategory=传感器\" line163=\"\" line164=\"    export function farState(farStatepin: Write_pin): number {\" line165=\"\" line166=\"        let pin17\" line167=\"\" line168=\"        if (farStatepin == 1) {\" line169=\"\" line170=\"\" line171=\"\" line172=\"            pin17 = DigitalPin.P0;\" line173=\"\" line174=\"        }\" line175=\"\" line176=\"        if (farStatepin == 2) {\" line177=\"\" line178=\"            pin17 = DigitalPin.P16;\" line179=\"\" line180=\"        }\" line181=\"\" line182=\"        if (farStatepin == 3) {\" line183=\"\" line184=\"            pin17 = DigitalPin.P1;\" line185=\"\" line186=\"        }\" line187=\"\" line188=\"        if (farStatepin == 4) {\" line189=\"\" line190=\"\" line191=\"\" line192=\"            pin17 = DigitalPin.P12;\" line193=\"\" line194=\"        }\" line195=\"\" line196=\"        if (farStatepin == 5) {\" line197=\"\" line198=\"            pin17 = DigitalPin.P2;\" line199=\"\" line200=\"        }\" line201=\"\" line202=\"        if (farStatepin == 6) {\" line203=\"\" line204=\"            pin17 = DigitalPin.P8;\" line205=\"\" line206=\"        }\" line207=\"\" line208=\"        return pins.digitalReadPin(pin17);\" line209=\"\" line210=\"    }\" line211=\"\" line212=\"\" line213=\"\" line214=\"    //% blockId=potentiometerRead\" line215=\"\" line216=\"    //% weight=37\" line217=\"\" line218=\"    //% potentiometerpin.fieldEditor=&quot;gridpicker&quot;\" line219=\"\" line220=\"    //% potentiometerpin.fieldOptions.width=220\" line221=\"\" line222=\"    //% potentiometerpin.fieldOptions.columns=1\" line223=\"\" line224=\"    //% block=&quot;电位器 %potentiometerpin&quot;\" line225=\"\" line226=\"    //% subcategory=传感器\" line227=\"\" line228=\"    export function potentiometerRead(potentiometerpin: Read_pin): number {\" line229=\"\" line230=\"        let pin15\" line231=\"\" line232=\"        if (potentiometerpin == 1) {\" line233=\"\" line234=\"\" line235=\"\" line236=\"            pin15 = AnalogPin.P0;\" line237=\"\" line238=\"        }\" line239=\"\" line240=\"        if (potentiometerpin == 2) {\" line241=\"\" line242=\"            pin15 = AnalogPin.P1;\" line243=\"\" line244=\"        }\" line245=\"\" line246=\"        if (potentiometerpin == 3) {\" line247=\"\" line248=\"            pin15 = AnalogPin.P2;\" line249=\"\" line250=\"        }\" line251=\"\" line252=\"        return pins.analogReadPin(pin15);\" line253=\"\" line254=\"    }\" line255=\"\" line256=\"\" line257=\"\" line258=\"    //% blockId=&quot;ReadGrayLevel&quot; block=&quot;灰度传感器 %graylevelpin&quot;\" line259=\"\" line260=\"    //% weight=36\" line261=\"\" line262=\"    //% graylevelpin.fieldEditor=&quot;gridpicker&quot;\" line263=\"\" line264=\"    //% graylevelpin.fieldOptions.width=220\" line265=\"\" line266=\"    //% graylevelpin.fieldOptions.columns=1\" line267=\"\" line268=\"    //% subcategory=传感器\" line269=\"\" line270=\"    export function ReadGrayLevel(graylevelpin: Read_pin): number {\" line271=\"\" line272=\"        let voltage7 = 0;\" line273=\"\" line274=\"        let grayLevel = 0;\" line275=\"\" line276=\"        let pin13\" line277=\"\" line278=\"        if (graylevelpin == 1) {\" line279=\"\" line280=\"\" line281=\"\" line282=\"            pin13 = AnalogPin.P0;\" line283=\"\" line284=\"        }\" line285=\"\" line286=\"        if (graylevelpin == 2) {\" line287=\"\" line288=\"            pin13 = AnalogPin.P1;\" line289=\"\" line290=\"        }\" line291=\"\" line292=\"        if (graylevelpin == 3) {\" line293=\"\" line294=\"            pin13 = AnalogPin.P2;\" line295=\"\" line296=\"        }\" line297=\"\" line298=\"        voltage7 = pins.map(\" line299=\"\" line300=\"            pins.analogReadPin(pin13),\" line301=\"\" line302=\"            0,\" line303=\"\" line304=\"            1023,\" line305=\"\" line306=\"            80,\" line307=\"\" line308=\"            1023\" line309=\"\" line310=\"        );\" line311=\"\" line312=\"        grayLevel = voltage7;\" line313=\"\" line314=\"        return Math.round(grayLevel);\" line315=\"\" line316=\"    }\" line317=\"\" line318=\"\" line319=\"\" line320=\"    //% blockId=&quot;readlightintensity&quot; block=&quot;光敏传感器 %lightintensitypin&quot;\" line321=\"\" line322=\"    //% weight=35\" line323=\"\" line324=\"    //% lightintensitypin.fieldEditor=&quot;gridpicker&quot;\" line325=\"\" line326=\"    //% lightintensitypin.fieldOptions.width=220\" line327=\"\" line328=\"    //% lightintensitypin.fieldOptions.columns=1\" line329=\"\" line330=\"    //% subcategory=传感器\" line331=\"\" line332=\"    export function ReadLightIntensity(lightintensitypin: Read_pin): number {\" line333=\"\" line334=\"        let voltage2 = 0;\" line335=\"\" line336=\"        let lightintensity = 0;\" line337=\"\" line338=\"        let pin2\" line339=\"\" line340=\"        if (lightintensitypin == 1) {\" line341=\"\" line342=\"            pin2 = AnalogPin.P0;\" line343=\"\" line344=\"\" line345=\"\" line346=\"        }\" line347=\"\" line348=\"        if (lightintensitypin == 2) {\" line349=\"\" line350=\"            pin2 = AnalogPin.P1;\" line351=\"\" line352=\"        }\" line353=\"\" line354=\"        if (lightintensitypin == 3) {\" line355=\"\" line356=\"            pin2 = AnalogPin.P2;\" line357=\"\" line358=\"\" line359=\"\" line360=\"        }\" line361=\"\" line362=\"        voltage2 = pins.map(\" line363=\"\" line364=\"            pins.analogReadPin(pin2),\" line365=\"\" line366=\"            0,\" line367=\"\" line368=\"            1023,\" line369=\"\" line370=\"            0,\" line371=\"\" line372=\"            1023\" line373=\"\" line374=\"        );\" line375=\"\" line376=\"        lightintensity = voltage2;\" line377=\"\" line378=\"        return Math.round(1023 - lightintensity);\" line379=\"\" line380=\"\" line381=\"\" line382=\"    }\" line383=\"\" line384=\"\" line385=\"\" line386=\"    //% blockId=&quot;Readflame&quot; block=&quot;火焰传感器 %flamepin&quot;\" line387=\"\" line388=\"    //% weight=34\" line389=\"\" line390=\"    //% flamepin.fieldEditor=&quot;gridpicker&quot;\" line391=\"\" line392=\"    //% flamepin.fieldOptions.width=220\" line393=\"\" line394=\"    //% flamepin.fieldOptions.columns=1\" line395=\"\" line396=\"    //% subcategory=传感器\" line397=\"\" line398=\"    export function Readflame(flamepin: Read_pin): number {\" line399=\"\" line400=\"        let voltage6 = 0;\" line401=\"\" line402=\"        let flame = 0;\" line403=\"\" line404=\"        let pin12\" line405=\"\" line406=\"        if (flamepin == 1) {\" line407=\"\" line408=\"\" line409=\"\" line410=\"            pin12 = AnalogPin.P0;\" line411=\"\" line412=\"        }\" line413=\"\" line414=\"        if (flamepin == 2) {\" line415=\"\" line416=\"            pin12 = AnalogPin.P1;\" line417=\"\" line418=\"        }\" line419=\"\" line420=\"        if (flamepin == 3) {\" line421=\"\" line422=\"            pin12 = AnalogPin.P2;\" line423=\"\" line424=\"        }\" line425=\"\" line426=\"        voltage6 = pins.map(\" line427=\"\" line428=\"            pins.analogReadPin(pin12),\" line429=\"\" line430=\"            0,\" line431=\"\" line432=\"            1023,\" line433=\"\" line434=\"            0,\" line435=\"\" line436=\"            1023\" line437=\"\" line438=\"        );\" line439=\"\" line440=\"        flame = voltage6;\" line441=\"\" line442=\"        return Math.round(1023 - flame);\" line443=\"\" line444=\"    }\" line445=\"\" line446=\"\" line447=\"\" line448=\"    //% blockId=&quot;octopus_ReadWaterLevel&quot; block=&quot;水位传感器 %waterlevelpin&quot;\" line449=\"\" line450=\"    //% weight=33\" line451=\"\" line452=\"    //% waterlevelpin.fieldEditor=&quot;gridpicker&quot;\" line453=\"\" line454=\"    //% waterlevelpin.fieldOptions.width=220\" line455=\"\" line456=\"    //% waterlevelpin.fieldOptions.columns=1\" line457=\"\" line458=\"    //% subcategory=传感器\" line459=\"\" line460=\"\" line461=\"\" line462=\"    export function ReadWaterLevel(waterlevelpin: Read_pin): number {\" line463=\"\" line464=\"        let voltage4 = 0;\" line465=\"\" line466=\"        let waterLevel = 0;\" line467=\"\" line468=\"        let pin10\" line469=\"\" line470=\"        if (waterlevelpin == 1) {\" line471=\"\" line472=\"\" line473=\"\" line474=\"            pin10 = AnalogPin.P0;\" line475=\"\" line476=\"        }\" line477=\"\" line478=\"        if (waterlevelpin == 2) {\" line479=\"\" line480=\"            pin10 = AnalogPin.P1;\" line481=\"\" line482=\"        }\" line483=\"\" line484=\"        if (waterlevelpin == 3) {\" line485=\"\" line486=\"            pin10 = AnalogPin.P2;\" line487=\"\" line488=\"        }\" line489=\"\" line490=\"        voltage4 = pins.analogReadPin(pin10);\" line491=\"\" line492=\"        if (voltage4 &gt; 620) { waterLevel = 100; }\" line493=\"\" line494=\"        else if (voltage4 &gt; 618) { waterLevel = 98; }\" line495=\"\" line496=\"        else if (voltage4 &gt; 617) { waterLevel = 96; }\" line497=\"\" line498=\"        else if (voltage4 &gt; 616) { waterLevel = 94; }\" line499=\"\" line500=\"        else if (voltage4 &gt; 614) { waterLevel = 92; }\" line501=\"\" line502=\"        else if (voltage4 &gt; 612) { waterLevel = 90; }\" line503=\"\" line504=\"        else if (voltage4 &gt; 610) { waterLevel = 88; }\" line505=\"\" line506=\"        else if (voltage4 &gt; 609) { waterLevel = 86; }\" line507=\"\" line508=\"        else if (voltage4 &gt; 607) { waterLevel = 85; }\" line509=\"\" line510=\"        else if (voltage4 &gt; 606) { waterLevel = 83; }\" line511=\"\" line512=\"        else if (voltage4 &gt; 605) { waterLevel = 81; }\" line513=\"\" line514=\"        else if (voltage4 &gt; 604) { waterLevel = 80; }\" line515=\"\" line516=\"        else if (voltage4 &gt; 603) { waterLevel = 78; }\" line517=\"\" line518=\"        else if (voltage4 &gt; 602) { waterLevel = 77; }\" line519=\"\" line520=\"        else if (voltage4 &gt; 600) { waterLevel = 75; }\" line521=\"\" line522=\"        else if (voltage4 &gt; 598) { waterLevel = 73; }\" line523=\"\" line524=\"        else if (voltage4 &gt; 596) { waterLevel = 72; }\" line525=\"\" line526=\"        else if (voltage4 &gt; 594) { waterLevel = 70; }\" line527=\"\" line528=\"        else if (voltage4 &gt; 592) { waterLevel = 68; }\" line529=\"\" line530=\"        else if (voltage4 &gt; 590) { waterLevel = 65; }\" line531=\"\" line532=\"        else if (voltage4 &gt; 588) { waterLevel = 63; }\" line533=\"\" line534=\"        else if (voltage4 &gt; 586) { waterLevel = 62; }\" line535=\"\" line536=\"        else if (voltage4 &gt; 583) { waterLevel = 60; }\" line537=\"\" line538=\"        else if (voltage4 &gt; 580) { waterLevel = 58; }\" line539=\"\" line540=\"        else if (voltage4 &gt; 575) { waterLevel = 56; }\" line541=\"\" line542=\"        else if (voltage4 &gt; 574) { waterLevel = 55; }\" line543=\"\" line544=\"        else if (voltage4 &gt; 573) { waterLevel = 54; }\" line545=\"\" line546=\"\" line547=\"\" line548=\"        else if (voltage4 &gt; 572) { waterLevel = 53; }\" line549=\"\" line550=\"        else if (voltage4 &gt; 570) { waterLevel = 52; }\" line551=\"\" line552=\"        else if (voltage4 &gt; 568) { waterLevel = 51; }\" line553=\"\" line554=\"        else if (voltage4 &gt; 566) { waterLevel = 50; }\" line555=\"\" line556=\"        else if (voltage4 &gt; 563) { waterLevel = 49; }\" line557=\"\" line558=\"        else if (voltage4 &gt; 560) { waterLevel = 48; }\" line559=\"\" line560=\"        else if (voltage4 &gt; 557) { waterLevel = 47; }\" line561=\"\" line562=\"        else if (voltage4 &gt; 554) { waterLevel = 46; }\" line563=\"\" line564=\"        else if (voltage4 &gt; 551) { waterLevel = 45; }\" line565=\"\" line566=\"        else if (voltage4 &gt; 548) { waterLevel = 44; }\" line567=\"\" line568=\"        else if (voltage4 &gt; 545) { waterLevel = 43; }\" line569=\"\" line570=\"        else if (voltage4 &gt; 542) { waterLevel = 42; }\" line571=\"\" line572=\"        else if (voltage4 &gt; 539) { waterLevel = 41; }\" line573=\"\" line574=\"        else if (voltage4 &gt; 536) { waterLevel = 40; }\" line575=\"\" line576=\"        else if (voltage4 &gt; 533) { waterLevel = 39; }\" line577=\"\" line578=\"        else if (voltage4 &gt; 530) { waterLevel = 38; }\" line579=\"\" line580=\"        else if (voltage4 &gt; 527) { waterLevel = 37; }\" line581=\"\" line582=\"        else if (voltage4 &gt; 523) { waterLevel = 36; }\" line583=\"\" line584=\"        else if (voltage4 &gt; 516) { waterLevel = 35; }\" line585=\"\" line586=\"        else if (voltage4 &gt; 510) { waterLevel = 34; }\" line587=\"\" line588=\"        else if (voltage4 &gt; 506) { waterLevel = 33; }\" line589=\"\" line590=\"        else if (voltage4 &gt; 500) { waterLevel = 32; }\" line591=\"\" line592=\"        else if (voltage4 &gt; 497) { waterLevel = 31; }\" line593=\"\" line594=\"        else if (voltage4 &gt; 494) { waterLevel = 30; }\" line595=\"\" line596=\"        else if (voltage4 &gt; 481) { waterLevel = 29; }\" line597=\"\" line598=\"        else if (voltage4 &gt; 478) { waterLevel = 28; }\" line599=\"\" line600=\"        else if (voltage4 &gt; 475) { waterLevel = 27; }\" line601=\"\" line602=\"        else if (voltage4 &gt; 472) { waterLevel = 26; }\" line603=\"\" line604=\"        else if (voltage4 &gt; 469) { waterLevel = 25; }\" line605=\"\" line606=\"        else if (voltage4 &gt; 466) { waterLevel = 24; }\" line607=\"\" line608=\"        else if (voltage4 &gt; 463) { waterLevel = 23; }\" line609=\"\" line610=\"        else if (voltage4 &gt; 460) { waterLevel = 22; }\" line611=\"\" line612=\"        else if (voltage4 &gt; 457) { waterLevel = 21; }\" line613=\"\" line614=\"        else if (voltage4 &gt; 454) { waterLevel = 19; }\" line615=\"\" line616=\"        else if (voltage4 &gt; 451) { waterLevel = 18; }\" line617=\"\" line618=\"        else if (voltage4 &gt; 448) { waterLevel = 17; }\" line619=\"\" line620=\"        else if (voltage4 &gt; 445) { waterLevel = 16; }\" line621=\"\" line622=\"        else if (voltage4 &gt; 442) { waterLevel = 15; }\" line623=\"\" line624=\"        else if (voltage4 &gt; 439) { waterLevel = 14; }\" line625=\"\" line626=\"        else if (voltage4 &gt; 436) { waterLevel = 13; }\" line627=\"\" line628=\"        else if (voltage4 &gt; 433) { waterLevel = 12; }\" line629=\"\" line630=\"        else if (voltage4 &gt; 430) { waterLevel = 11; }\" line631=\"\" line632=\"        else if (voltage4 &gt; 427) { waterLevel = 10; }\" line633=\"\" line634=\"        else if (voltage4 &gt; 424) { waterLevel = 9; }\" line635=\"\" line636=\"        else if (voltage4 &gt; 421) { waterLevel = 8; }\" line637=\"\" line638=\"        else if (voltage4 &gt; 418) { waterLevel = 7; }\" line639=\"\" line640=\"        else if (voltage4 &gt; 415) { waterLevel = 6; }\" line641=\"\" line642=\"        else if (voltage4 &gt; 412) { waterLevel = 5; }\" line643=\"\" line644=\"        else if (voltage4 &gt; 409) { waterLevel = 4; }\" line645=\"\" line646=\"        else if (voltage4 &gt; 406) { waterLevel = 3; }\" line647=\"\" line648=\"        else if (voltage4 &gt; 403) { waterLevel = 2; }\" line649=\"\" line650=\"        else if (voltage4 &gt; 400) { waterLevel = 1; }\" line651=\"\" line652=\"        else { waterLevel = 0; }\" line653=\"\" line654=\"\" line655=\"\" line656=\"        return Math.round(waterLevel);\" line657=\"\" line658=\"    }\" line659=\"\" line660=\"\" line661=\"\" line662=\"    //% blockId=&quot;ReadGasConcentration&quot; block=&quot;可燃气体传感器 %gasconcentrationpin&quot;\" line663=\"\" line664=\"    //% weight=32\" line665=\"\" line666=\"    //% gasconcentrationpin.fieldEditor=&quot;gridpicker&quot;\" line667=\"\" line668=\"    //% gasconcentrationpin.fieldOptions.width=220\" line669=\"\" line670=\"    //% gasconcentrationpin.fieldOptions.columns=1\" line671=\"\" line672=\"    //% subcategory=传感器\" line673=\"\" line674=\"    export function ReadGasConcentration(gasconcentrationpin: Read_pin): number {\" line675=\"\" line676=\"        let voltage5 = 0;\" line677=\"\" line678=\"        let gasConcentration = 0;\" line679=\"\" line680=\"        let pin11\" line681=\"\" line682=\"        if (gasconcentrationpin == 1) {\" line683=\"\" line684=\"\" line685=\"\" line686=\"            pin11 = AnalogPin.P0;\" line687=\"\" line688=\"        }\" line689=\"\" line690=\"        if (gasconcentrationpin == 2) {\" line691=\"\" line692=\"            pin11 = AnalogPin.P1;\" line693=\"\" line694=\"        }\" line695=\"\" line696=\"        if (gasconcentrationpin == 3) {\" line697=\"\" line698=\"            pin11 = AnalogPin.P2;\" line699=\"\" line700=\"        }\" line701=\"\" line702=\"        voltage5 = pins.map(\" line703=\"\" line704=\"            pins.analogReadPin(pin11),\" line705=\"\" line706=\"            0,\" line707=\"\" line708=\"            1023,\" line709=\"\" line710=\"            0,\" line711=\"\" line712=\"            1023\" line713=\"\" line714=\"        );\" line715=\"\" line716=\"        gasConcentration = voltage5;\" line717=\"\" line718=\"        return Math.round(gasConcentration);\" line719=\"\" line720=\"    }\" line721=\"\" line722=\"\" line723=\"\" line724=\"    //% blockId=&quot;readsoilmoisture&quot; block=&quot;土壤湿度传感器 %soilhumiditypin&quot;\" line725=\"\" line726=\"    //% weight=31\" line727=\"\" line728=\"    //% soilmoisturepin.fieldEditor=&quot;gridpicker&quot;\" line729=\"\" line730=\"    //% soilmoisturepin.fieldOptions.width=220\" line731=\"\" line732=\"    //% soilmoisturepin.fieldOptions.columns=1\" line733=\"\" line734=\"    //% subcategory=传感器\" line735=\"\" line736=\"    export function ReadSoilHumidity(soilmoisturepin: Read_pin): number {\" line737=\"\" line738=\"        let voltage = 0;\" line739=\"\" line740=\"        let soilmoisture = 0;\" line741=\"\" line742=\"        let pin\" line743=\"\" line744=\"        if (soilmoisturepin == 1) {\" line745=\"\" line746=\"            pin = AnalogPin.P0;\" line747=\"\" line748=\"        }\" line749=\"\" line750=\"        if (soilmoisturepin == 2) {\" line751=\"\" line752=\"            pin = AnalogPin.P1;\" line753=\"\" line754=\"        }\" line755=\"\" line756=\"        if (soilmoisturepin == 3) {\" line757=\"\" line758=\"            pin = AnalogPin.P2;\" line759=\"\" line760=\"\" line761=\"\" line762=\"        }\" line763=\"\" line764=\"        voltage = pins.map(\" line765=\"\" line766=\"            pins.analogReadPin(pin),\" line767=\"\" line768=\"            0,\" line769=\"\" line770=\"            1023,\" line771=\"\" line772=\"            0,\" line773=\"\" line774=\"            1023\" line775=\"\" line776=\"        );\" line777=\"\" line778=\"        soilmoisture = voltage;\" line779=\"\" line780=\"        return Math.round(soilmoisture);\" line781=\"\" line782=\"    }\" line783=\"\" line784=\"\" line785=\"\" line786=\"    //% blockId=&quot;readWaterTemp&quot; block=&quot;防水温度传感器 %waterproofpin&quot;\" line787=\"\" line788=\"    //% weight=30\" line789=\"\" line790=\"    //% waterproofpin.fieldEditor=&quot;gridpicker&quot;\" line791=\"\" line792=\"    //% waterproofpin.fieldOptions.width=220\" line793=\"\" line794=\"    //% waterproofpin.fieldOptions.columns=1\" line795=\"\" line796=\"    //% subcategory=传感器\" line797=\"\" line798=\"    export function readWaterTemp(waterproofpin: Read_pin): number {\" line799=\"\" line800=\"        let voltage22 = 0;\" line801=\"\" line802=\"        let waterProofTemp = 0;\" line803=\"\" line804=\"        let pin14\" line805=\"\" line806=\"        if (waterproofpin == 1) {\" line807=\"\" line808=\"\" line809=\"\" line810=\"            pin14 = AnalogPin.P0;\" line811=\"\" line812=\"        }\" line813=\"\" line814=\"        if (waterproofpin == 2) {\" line815=\"\" line816=\"            pin14 = AnalogPin.P1;\" line817=\"\" line818=\"        }\" line819=\"\" line820=\"        if (waterproofpin == 3) {\" line821=\"\" line822=\"            pin14 = AnalogPin.P2;\" line823=\"\" line824=\"        }\" line825=\"\" line826=\"        voltage22 = pins.analogReadPin(pin14);//%获得原始值\" line827=\"\" line828=\"        if (voltage22 &gt; 1001) { waterProofTemp = 100; }\" line829=\"\" line830=\"        else if (voltage22 &gt; 1000) { waterProofTemp = 98; }\" line831=\"\" line832=\"        else if (voltage22 &gt; 999) { waterProofTemp = 97; }\" line833=\"\" line834=\"        else if (voltage22 &gt; 998) { waterProofTemp = 96; }\" line835=\"\" line836=\"        else if (voltage22 &gt; 997) { waterProofTemp = 95; }\" line837=\"\" line838=\"        else if (voltage22 &gt; 996) { waterProofTemp = 93; }\" line839=\"\" line840=\"        else if (voltage22 &gt; 995) { waterProofTemp = 92; }\" line841=\"\" line842=\"        else if (voltage22 &gt; 994) { waterProofTemp = 91; }\" line843=\"\" line844=\"        else if (voltage22 &gt; 993) { waterProofTemp = 90; }\" line845=\"\" line846=\"        else if (voltage22 &gt; 992) { waterProofTemp = 89; }\" line847=\"\" line848=\"        else if (voltage22 &gt; 991) { waterProofTemp = 88; }\" line849=\"\" line850=\"        else if (voltage22 &gt; 990) { waterProofTemp = 87; }\" line851=\"\" line852=\"        else if (voltage22 &gt; 989) { waterProofTemp = 86; }\" line853=\"\" line854=\"        else if (voltage22 &gt; 988) { waterProofTemp = 85; }\" line855=\"\" line856=\"        else if (voltage22 &gt; 987) { waterProofTemp = 84; }\" line857=\"\" line858=\"        else if (voltage22 &gt; 986) { waterProofTemp = 83; }\" line859=\"\" line860=\"        else if (voltage22 &gt; 985) { waterProofTemp = 82; }\" line861=\"\" line862=\"        else if (voltage22 &gt; 984) { waterProofTemp = 81; }\" line863=\"\" line864=\"        else if (voltage22 &gt; 982) { waterProofTemp = 80; }\" line865=\"\" line866=\"        else if (voltage22 &gt; 981) { waterProofTemp = 79; }\" line867=\"\" line868=\"        else if (voltage22 &gt; 980) { waterProofTemp = 78; }\" line869=\"\" line870=\"        else if (voltage22 &gt; 978) { waterProofTemp = 77; }\" line871=\"\" line872=\"        else if (voltage22 &gt; 977) { waterProofTemp = 76; }\" line873=\"\" line874=\"        else if (voltage22 &gt; 975) { waterProofTemp = 75; }\" line875=\"\" line876=\"        else if (voltage22 &gt; 974) { waterProofTemp = 74; }\" line877=\"\" line878=\"        else if (voltage22 &gt; 972) { waterProofTemp = 73; }\" line879=\"\" line880=\"        else if (voltage22 &gt; 971) { waterProofTemp = 72; }\" line881=\"\" line882=\"        else if (voltage22 &gt; 969) { waterProofTemp = 71; }\" line883=\"\" line884=\"        else if (voltage22 &gt; 967) { waterProofTemp = 70; }\" line885=\"\" line886=\"        else if (voltage22 &gt; 965) { waterProofTemp = 69; }\" line887=\"\" line888=\"        else if (voltage22 &gt; 963) { waterProofTemp = 68; }\" line889=\"\" line890=\"        else if (voltage22 &gt; 961) { waterProofTemp = 67; }\" line891=\"\" line892=\"        else if (voltage22 &gt; 959) { waterProofTemp = 66; }\" line893=\"\" line894=\"        else if (voltage22 &gt; 957) { waterProofTemp = 65; }\" line895=\"\" line896=\"        else if (voltage22 &gt; 955) { waterProofTemp = 64; }\" line897=\"\" line898=\"        else if (voltage22 &gt; 953) { waterProofTemp = 63; }\" line899=\"\" line900=\"        else if (voltage22 &gt; 950) { waterProofTemp = 62; }\" line901=\"\" line902=\"        else if (voltage22 &gt; 948) { waterProofTemp = 61; }\" line903=\"\" line904=\"        else if (voltage22 &gt; 943) { waterProofTemp = 59; }\" line905=\"\" line906=\"        else if (voltage22 &gt; 940) { waterProofTemp = 58; }\" line907=\"\" line908=\"        else if (voltage22 &gt; 937) { waterProofTemp = 57; }\" line909=\"\" line910=\"        else if (voltage22 &gt; 934) { waterProofTemp = 56; }\" line911=\"\" line912=\"        else if (voltage22 &gt; 931) { waterProofTemp = 55; }\" line913=\"\" line914=\"        else if (voltage22 &gt; 928) { waterProofTemp = 54; }\" line915=\"\" line916=\"        else if (voltage22 &gt; 924) { waterProofTemp = 53; }\" line917=\"\" line918=\"        else if (voltage22 &gt; 921) { waterProofTemp = 52; }\" line919=\"\" line920=\"        else if (voltage22 &gt; 917) { waterProofTemp = 51; }\" line921=\"\" line922=\"        else if (voltage22 &gt; 914) { waterProofTemp = 51; }\" line923=\"\" line924=\"        else if (voltage22 &gt; 910) { waterProofTemp = 49; }\" line925=\"\" line926=\"        else if (voltage22 &gt; 906) { waterProofTemp = 48; }\" line927=\"\" line928=\"        else if (voltage22 &gt; 902) { waterProofTemp = 47; }\" line929=\"\" line930=\"        else if (voltage22 &gt; 898) { waterProofTemp = 46; }\" line931=\"\" line932=\"        else if (voltage22 &gt; 893) { waterProofTemp = 45; }\" line933=\"\" line934=\"        else if (voltage22 &gt; 889) { waterProofTemp = 44; }\" line935=\"\" line936=\"        else if (voltage22 &gt; 884) { waterProofTemp = 43; }\" line937=\"\" line938=\"        else if (voltage22 &gt; 879) { waterProofTemp = 42; }\" line939=\"\" line940=\"        else if (voltage22 &gt; 874) { waterProofTemp = 41; }\" line941=\"\" line942=\"        else if (voltage22 &gt; 869) { waterProofTemp = 40; }\" line943=\"\" line944=\"        else if (voltage22 &gt; 864) { waterProofTemp = 39; }\" line945=\"\" line946=\"        else if (voltage22 &gt; 858) { waterProofTemp = 38; }\" line947=\"\" line948=\"        else if (voltage22 &gt; 852) { waterProofTemp = 37; }\" line949=\"\" line950=\"        else if (voltage22 &gt; 846) { waterProofTemp = 36; }\" line951=\"\" line952=\"        else if (voltage22 &gt; 840) { waterProofTemp = 35; }\" line953=\"\" line954=\"        else if (voltage22 &gt; 834) { waterProofTemp = 34; }\" line955=\"\" line956=\"        else if (voltage22 &gt; 827) { waterProofTemp = 33; }\" line957=\"\" line958=\"        else if (voltage22 &gt; 821) { waterProofTemp = 32; }\" line959=\"\" line960=\"        else if (voltage22 &gt; 814) { waterProofTemp = 31; }\" line961=\"\" line962=\"        else if (voltage22 &gt; 806) { waterProofTemp = 30; }\" line963=\"\" line964=\"        else if (voltage22 &gt; 799) { waterProofTemp = 29; }\" line965=\"\" line966=\"        else if (voltage22 &gt; 791) { waterProofTemp = 28; }\" line967=\"\" line968=\"        else if (voltage22 &gt; 784) { waterProofTemp = 27; }\" line969=\"\" line970=\"        else if (voltage22 &gt; 776) { waterProofTemp = 26; }\" line971=\"\" line972=\"        else if (voltage22 &gt; 767) { waterProofTemp = 25; }\" line973=\"\" line974=\"        else if (voltage22 &gt; 759) { waterProofTemp = 24; }\" line975=\"\" line976=\"        else if (voltage22 &gt; 750) { waterProofTemp = 23; }\" line977=\"\" line978=\"        else if (voltage22 &gt; 741) { waterProofTemp = 22; }\" line979=\"\" line980=\"        else if (voltage22 &gt; 732) { waterProofTemp = 21; }\" line981=\"\" line982=\"        else if (voltage22 &gt; 713) { waterProofTemp = 19; }\" line983=\"\" line984=\"        else if (voltage22 &gt; 703) { waterProofTemp = 18; }\" line985=\"\" line986=\"        else if (voltage22 &gt; 692) { waterProofTemp = 17; }\" line987=\"\" line988=\"        else if (voltage22 &gt; 682) { waterProofTemp = 16; }\" line989=\"\" line990=\"        else if (voltage22 &gt; 671) { waterProofTemp = 15; }\" line991=\"\" line992=\"        else if (voltage22 &gt; 661) { waterProofTemp = 14; }\" line993=\"\" line994=\"        else if (voltage22 &gt; 650) { waterProofTemp = 13; }\" line995=\"\" line996=\"        else if (voltage22 &gt; 638) { waterProofTemp = 12; }\" line997=\"\" line998=\"        else if (voltage22 &gt; 627) { waterProofTemp = 11; }\" line999=\"\" line1000=\"        else if (voltage22 &gt; 615) { waterProofTemp = 10; }\" line1001=\"\" line1002=\"        else if (voltage22 &gt; 604) { waterProofTemp = 9; }\" line1003=\"\" line1004=\"        else if (voltage22 &gt; 592) { waterProofTemp = 8; }\" line1005=\"\" line1006=\"        else if (voltage22 &gt; 579) { waterProofTemp = 7; }\" line1007=\"\" line1008=\"        else if (voltage22 &gt; 567) { waterProofTemp = 6; }\" line1009=\"\" line1010=\"        else if (voltage22 &gt; 555) { waterProofTemp = 5; }\" line1011=\"\" line1012=\"        else if (voltage22 &gt; 542) { waterProofTemp = 4; }\" line1013=\"\" line1014=\"        else if (voltage22 &gt; 530) { waterProofTemp = 3; }\" line1015=\"\" line1016=\"        else if (voltage22 &gt; 517) { waterProofTemp = 2; }\" line1017=\"\" line1018=\"        else if (voltage22 &gt; 504) { waterProofTemp = 1; }\" line1019=\"\" line1020=\"        else { waterProofTemp = 0; }\" line1021=\"\" line1022=\"        return waterProofTemp;\" line1023=\"\" line1024=\"    }\" line1025=\"\" line1026=\"\" line1027=\"\" line1028=\"    /**\" line1029=\"\" line1030=\"    * get Ultrasonic distance\" line1031=\"\" line1032=\"    */\" line1033=\"\" line1034=\"    //% blockId=sonarbit\" line1035=\"\" line1036=\"    //% weight=29\" line1037=\"\" line1038=\"\" line1039=\"\" line1040=\"    //% subcategory=传感器\" line1041=\"\" line1042=\"    //% blockId=sonar_ping block=&quot;超声波传感器 %ultpins 单位 %unit&quot;\" line1043=\"\" line1044=\"    //% ultpins.fieldEditor=&quot;gridpicker&quot;\" line1045=\"\" line1046=\"    //% ultpins.fieldOptions.width=220\" line1047=\"\" line1048=\"    //% ultpins.fieldOptions.columns=2\" line1049=\"\" line1050=\"    export function ping(ultpins: Ultrasonic_pin, unit: PingUnit, maxCmDistance = 500): number {\" line1051=\"\" line1052=\"        // send pulse\" line1053=\"\" line1054=\"\" line1055=\"\" line1056=\"        let d\" line1057=\"\" line1058=\"        let distance\" line1059=\"\" line1060=\"        let echopin\" line1061=\"\" line1062=\"        let trigpin\" line1063=\"\" line1064=\"        if (ultpins == 13) {\" line1065=\"\" line1066=\"            trigpin = DigitalPin.P0;\" line1067=\"\" line1068=\"            echopin = DigitalPin.P13;\" line1069=\"\" line1070=\"        }\" line1071=\"\" line1072=\"        if (ultpins == 114) {\" line1073=\"\" line1074=\"            trigpin = DigitalPin.P1;\" line1075=\"\" line1076=\"            echopin = DigitalPin.P14;\" line1077=\"\" line1078=\"        }\" line1079=\"\" line1080=\"        if (ultpins == 215) {\" line1081=\"\" line1082=\"            trigpin = DigitalPin.P2;\" line1083=\"\" line1084=\"            echopin = DigitalPin.P15;\" line1085=\"\" line1086=\"        }\" line1087=\"\" line1088=\"        if (ultpins == 87) {\" line1089=\"\" line1090=\"            trigpin = DigitalPin.P8;\" line1091=\"\" line1092=\"            echopin = DigitalPin.P7;\" line1093=\"\" line1094=\"        }\" line1095=\"\" line1096=\"        if (ultpins == 129) {\" line1097=\"\" line1098=\"            trigpin = DigitalPin.P12;\" line1099=\"\" line1100=\"            echopin = DigitalPin.P9;\" line1101=\"\" line1102=\"        }\" line1103=\"\" line1104=\"        if (ultpins == 1610) {\" line1105=\"\" line1106=\"            trigpin = DigitalPin.P16;\" line1107=\"\" line1108=\"            echopin = DigitalPin.P10;\" line1109=\"\" line1110=\"        }\" line1111=\"\" line1112=\"        pins.setPull(trigpin, PinPullMode.PullNone);\" line1113=\"\" line1114=\"        pins.digitalWritePin(trigpin, 0);\" line1115=\"\" line1116=\"        control.waitMicros(2);\" line1117=\"\" line1118=\"        pins.digitalWritePin(trigpin, 1);\" line1119=\"\" line1120=\"        control.waitMicros(10);\" line1121=\"\" line1122=\"        pins.digitalWritePin(trigpin, 0);\" line1123=\"\" line1124=\"\" line1125=\"\" line1126=\"        // read pulse\" line1127=\"\" line1128=\"        d = pins.pulseIn(echopin, PulseValue.High, maxCmDistance * 50);\" line1129=\"\" line1130=\"        distance = d * 34 / 2 / 1000 * 3 / 2;\" line1131=\"\" line1132=\"        switch (unit) {\" line1133=\"\" line1134=\"            case PingUnit.Centimeters: return Math.round(distance);\" line1135=\"\" line1136=\"            case PingUnit.Inches: return Math.round(distance / 30.48);\" line1137=\"\" line1138=\"            default: return Math.round(d);\" line1139=\"\" line1140=\"        }\" line1141=\"\" line1142=\"    }\" line1143=\"\" line1144=\"\" line1145=\"\" line1146=\"\" line1147=\"\" line1148=\"    //% pin.fieldEditor=&quot;gridpicker&quot;\" line1149=\"\" line1150=\"    //% pin.fieldOptions.width=220\" line1151=\"\" line1152=\"    //% pin.fieldOptions.columns=2\" line1153=\"\" line1154=\"    //% subcategory=传感器\" line1155=\"\" line1156=\"    //% blockId=&quot;pinpullup&quot; block=&quot;巡线传感器 %pin &quot;\" line1157=\"\" line1158=\"    //%weight=28\" line1159=\"\" line1160=\"\" line1161=\"\" line1162=\"    export function pinpullup(pin: Grayscale_pin): number {\" line1163=\"\" line1164=\"        let pin33\" line1165=\"\" line1166=\"        if (pin == 1) {\" line1167=\"\" line1168=\"\" line1169=\"\" line1170=\"            pin33 = DigitalPin.P13;\" line1171=\"\" line1172=\"        }\" line1173=\"\" line1174=\"        if (pin == 2) {\" line1175=\"\" line1176=\"            pin33 = DigitalPin.P16;\" line1177=\"\" line1178=\"        }\" line1179=\"\" line1180=\"        if (pin == 3) {\" line1181=\"\" line1182=\"            pin33 = DigitalPin.P0;\" line1183=\"\" line1184=\"        }\" line1185=\"\" line1186=\"        if (pin == 4) {\" line1187=\"\" line1188=\"\" line1189=\"\" line1190=\"            pin33 = DigitalPin.P10;\" line1191=\"\" line1192=\"        }\" line1193=\"\" line1194=\"        if (pin == 5) {\" line1195=\"\" line1196=\"            pin33 = DigitalPin.P14;\" line1197=\"\" line1198=\"        }\" line1199=\"\" line1200=\"        if (pin == 6) {\" line1201=\"\" line1202=\"            pin33 = DigitalPin.P12;\" line1203=\"\" line1204=\"        }\" line1205=\"\" line1206=\"        if (pin == 7) {\" line1207=\"\" line1208=\"\" line1209=\"\" line1210=\"            pin33 = DigitalPin.P1;\" line1211=\"\" line1212=\"        }\" line1213=\"\" line1214=\"        if (pin == 8) {\" line1215=\"\" line1216=\"            pin33 = DigitalPin.P9;\" line1217=\"\" line1218=\"        }\" line1219=\"\" line1220=\"        if (pin == 9) {\" line1221=\"\" line1222=\"            pin33 = DigitalPin.P15;\" line1223=\"\" line1224=\"        }\" line1225=\"\" line1226=\"        if (pin == 10) {\" line1227=\"\" line1228=\"\" line1229=\"\" line1230=\"            pin33 = DigitalPin.P8;\" line1231=\"\" line1232=\"        }\" line1233=\"\" line1234=\"        if (pin == 11) {\" line1235=\"\" line1236=\"            pin33 = DigitalPin.P2;\" line1237=\"\" line1238=\"        }\" line1239=\"\" line1240=\"        if (pin == 12) {\" line1241=\"\" line1242=\"            pin33 = DigitalPin.P7;\" line1243=\"\" line1244=\"        }\" line1245=\"\" line1246=\"        return pins.digitalReadPin(pin33);\" line1247=\"\" line1248=\"\" line1249=\"\" line1250=\"\" line1251=\"\" line1252=\"\" line1253=\"\" line1254=\"    }\" line1255=\"\" line1256=\"\" line1257=\"\" line1258=\"\" line1259=\"\" line1260=\"\" line1261=\"\" line1262=\"    ///////////手势识别传感器//////\" line1263=\"\" line1264=\"    let DIR_NONE = 'none'\" line1265=\"\" line1266=\"    let DIR_LEFT = 'left'\" line1267=\"\" line1268=\"    let DIR_RIGHT = 'right'\" line1269=\"\" line1270=\"    let DIR_UP = 'up'\" line1271=\"\" line1272=\"    let DIR_DOWN = 'down'\" line1273=\"\" line1274=\"    let DIR_NEAR = 'near'\" line1275=\"\" line1276=\"    let DIR_FAR = 'far'\" line1277=\"\" line1278=\"    let DIR_ALL = 'all'\" line1279=\"\" line1280=\"\" line1281=\"\" line1282=\"    let motion_global: string = &quot;&quot;\" line1283=\"\" line1284=\"\" line1285=\"\" line1286=\"    enum states {\" line1287=\"\" line1288=\"        NA_STATE1,\" line1289=\"\" line1290=\"        NEAR_STATE1,\" line1291=\"\" line1292=\"        FAR_STATE1,\" line1293=\"\" line1294=\"        ALL_STATE1\" line1295=\"\" line1296=\"    };\" line1297=\"\" line1298=\"\" line1299=\"\" line1300=\"    export enum sl06_mode {\" line1301=\"\" line1302=\"\" line1303=\"\" line1304=\"        //% block=&quot;手势模式&quot;\" line1305=\"\" line1306=\"        GESTURE_MODE\" line1307=\"\" line1308=\"    };\" line1309=\"\" line1310=\"\" line1311=\"\" line1312=\"    export enum gestures {\" line1313=\"\" line1314=\"        //% block=&quot;左&quot;\" line1315=\"\" line1316=\"        LEFT,\" line1317=\"\" line1318=\"\" line1319=\"\" line1320=\"        //% block=&quot;右&quot;\" line1321=\"\" line1322=\"        RIGHT,\" line1323=\"\" line1324=\"\" line1325=\"\" line1326=\"        //% block=&quot;上&quot;\" line1327=\"\" line1328=\"        UP,\" line1329=\"\" line1330=\"\" line1331=\"\" line1332=\"        //% block=&quot;下&quot;\" line1333=\"\" line1334=\"        DOWN\" line1335=\"\" line1336=\"\" line1337=\"\" line1338=\"    };\" line1339=\"\" line1340=\"\" line1341=\"\" line1342=\"    let APDS9960_I2C_ADDR = 0x39;\" line1343=\"\" line1344=\"    let APDS9960_ID_1 = 0xAB\" line1345=\"\" line1346=\"    let APDS9960_ID_2 = 0X9c\" line1347=\"\" line1348=\"\" line1349=\"\" line1350=\"    let gesture_data_u_data = pins.createBuffer(32);\" line1351=\"\" line1352=\"    let gesture_data_d_data = pins.createBuffer(32);\" line1353=\"\" line1354=\"    let gesture_data_l_data = pins.createBuffer(32);\" line1355=\"\" line1356=\"    let gesture_data_r_data = pins.createBuffer(32);\" line1357=\"\" line1358=\"    let gesture_data_index: NumberFormat.UInt8BE\" line1359=\"\" line1360=\"    let gesture_data_total_gestures: NumberFormat.UInt8BE;\" line1361=\"\" line1362=\"    let gesture_data_in_threshold: NumberFormat.UInt8BE;\" line1363=\"\" line1364=\"    let gesture_data_out_threshold: NumberFormat.UInt8BE;\" line1365=\"\" line1366=\"\" line1367=\"\" line1368=\"    let gesture_ud_delta_ = 0;\" line1369=\"\" line1370=\"    let gesture_lr_delta_ = 0;\" line1371=\"\" line1372=\"\" line1373=\"\" line1374=\"    let gesture_ud_count_ = 0;\" line1375=\"\" line1376=\"    let gesture_lr_count_ = 0;\" line1377=\"\" line1378=\"\" line1379=\"\" line1380=\"    let gesture_near_count_ = 0;\" line1381=\"\" line1382=\"    let gesture_far_count_ = 0;\" line1383=\"\" line1384=\"\" line1385=\"\" line1386=\"    let gesture_state_ = 0;\" line1387=\"\" line1388=\"    let gesture_motion_ = DIR_NONE;\" line1389=\"\" line1390=\"\" line1391=\"\" line1392=\"\" line1393=\"\" line1394=\"    //%blockId=GestureSensor_begin\" line1395=\"\" line1396=\"    //%block=&quot;手势传感器初始化&quot;\" line1397=\"\" line1398=\"    //%advanced=true\" line1399=\"\" line1400=\"    //%group=可选项\" line1401=\"\" line1402=\"    function gesturesensor_begin(): void {\" line1403=\"\" line1404=\"        let id: number\" line1405=\"\" line1406=\"        id = wireReadDataByte(APDS9960_I2C_ADDR)\" line1407=\"\" line1408=\"\" line1409=\"\" line1410=\"        // Set ENABLE register to 0 (disable all features) \" line1411=\"\" line1412=\"        // ALL, OFF\" line1413=\"\" line1414=\"        setMode(7, 0)\" line1415=\"\" line1416=\"\" line1417=\"\" line1418=\"        // Set default values for ambient light and proximity registers \" line1419=\"\" line1420=\"        // APDS9960_ATIME, DEFAULT_ATIME\" line1421=\"\" line1422=\"        wireWriteDataByte(0x81, 219)\" line1423=\"\" line1424=\"\" line1425=\"\" line1426=\"        // APDS9960_WTIME, DEFAULT_WTIME\" line1427=\"\" line1428=\"        wireWriteDataByte(0x83, 246)\" line1429=\"\" line1430=\"\" line1431=\"\" line1432=\"        //APDS9960_PPULSE, DEFAULT_PROX_PPULSE\" line1433=\"\" line1434=\"        wireWriteDataByte(0x8E, 0x87)\" line1435=\"\" line1436=\"\" line1437=\"\" line1438=\"        // APDS9960_POFFSET_UR, DEFAULT_POFFSET_UR\" line1439=\"\" line1440=\"        wireWriteDataByte(0x9D, 0)\" line1441=\"\" line1442=\"\" line1443=\"\" line1444=\"        // APDS9960_POFFSET_DL, DEFAULT_POFFSET_DL\" line1445=\"\" line1446=\"        wireWriteDataByte(0x9E, 0)\" line1447=\"\" line1448=\"\" line1449=\"\" line1450=\"        // APDS9960_CONFIG1, DEFAULT_CONFIG1\" line1451=\"\" line1452=\"        wireWriteDataByte(0x8D, 0x60)\" line1453=\"\" line1454=\"\" line1455=\"\" line1456=\"        // APDS9960_PERS, DEFAULT_PERS\" line1457=\"\" line1458=\"        wireWriteDataByte(0x8C, 0x11)\" line1459=\"\" line1460=\"\" line1461=\"\" line1462=\"        // APDS9960_CONFIG2, DEFAULT_CONFIG2\" line1463=\"\" line1464=\"        wireWriteDataByte(0x90, 0x01)\" line1465=\"\" line1466=\"\" line1467=\"\" line1468=\"        // APDS9960_CONFIG3, DEFAULT_CONFIG3\" line1469=\"\" line1470=\"        wireWriteDataByte(0x9F, 0)\" line1471=\"\" line1472=\"\" line1473=\"\" line1474=\"        // DEFAULT_GPENTH\" line1475=\"\" line1476=\"        setGestureEnterThresh(40)\" line1477=\"\" line1478=\"\" line1479=\"\" line1480=\"        // DEFAULT_GEXTH\" line1481=\"\" line1482=\"        setGestureExitThresh(30)\" line1483=\"\" line1484=\"\" line1485=\"\" line1486=\"        // APDS9960_GCONF1, DEFAULT_GCONF1\" line1487=\"\" line1488=\"        wireWriteDataByte(0xA2, 0x40)\" line1489=\"\" line1490=\"\" line1491=\"\" line1492=\"        // DEFAULT_GGAIN\" line1493=\"\" line1494=\"        setGestureGain(2)\" line1495=\"\" line1496=\"\" line1497=\"\" line1498=\"        // DEFAULT_GLDRIVE\" line1499=\"\" line1500=\"        setGestureLEDDrive(0)\" line1501=\"\" line1502=\"\" line1503=\"\" line1504=\"        // DEFAULT_GWTIME\" line1505=\"\" line1506=\"        setGestureWaitTime(1)\" line1507=\"\" line1508=\"\" line1509=\"\" line1510=\"        // APDS9960_GOFFSET_U, DEFAULT_GOFFSET\" line1511=\"\" line1512=\"        wireWriteDataByte(0xA4, 0)\" line1513=\"\" line1514=\"\" line1515=\"\" line1516=\"        // APDS9960_GOFFSET_D, DEFAULT_GOFFSET\" line1517=\"\" line1518=\"        wireWriteDataByte(0xA5, 0)\" line1519=\"\" line1520=\"\" line1521=\"\" line1522=\"        // APDS9960_GOFFSET_L, DEFAULT_GOFFSET\" line1523=\"\" line1524=\"        wireWriteDataByte(0xA7, 0)\" line1525=\"\" line1526=\"\" line1527=\"\" line1528=\"        // APDS9960_GOFFSET_R, DEFAULT_GOFFSET\" line1529=\"\" line1530=\"        wireWriteDataByte(0xA9, 0)\" line1531=\"\" line1532=\"\" line1533=\"\" line1534=\"        // APDS9960_GPULSE, DEFAULT_GPULSE\" line1535=\"\" line1536=\"        wireWriteDataByte(0xA6, 0xC9)\" line1537=\"\" line1538=\"\" line1539=\"\" line1540=\"        // APDS9960_GCONF3, DEFAULT_GCONF3\" line1541=\"\" line1542=\"        wireWriteDataByte(0xAA, 0)\" line1543=\"\" line1544=\"\" line1545=\"\" line1546=\"        // DEFAULT_GIEN\" line1547=\"\" line1548=\"        setGestureIntEnable(0)\" line1549=\"\" line1550=\"\" line1551=\"\" line1552=\"    }\" line1553=\"\" line1554=\"\" line1555=\"\" line1556=\"    //%blockId=GestureSensor_getMode\" line1557=\"\" line1558=\"    //%block=&quot;获取模式&quot;\" line1559=\"\" line1560=\"    //%advanced=true\" line1561=\"\" line1562=\"    //%weight=28\" line1563=\"\" line1564=\"    //%group=可选项\" line1565=\"\" line1566=\"    //% subcategory=传感器\" line1567=\"\" line1568=\"    function getMode(): number {\" line1569=\"\" line1570=\"        let enable_value: number;\" line1571=\"\" line1572=\"\" line1573=\"\" line1574=\"        //Read current ENABLE register \" line1575=\"\" line1576=\"        // APDS9960_ENABLE\" line1577=\"\" line1578=\"        enable_value = wireReadDataByte(0x80)\" line1579=\"\" line1580=\"\" line1581=\"\" line1582=\"        return enable_value;\" line1583=\"\" line1584=\"    }\" line1585=\"\" line1586=\"\" line1587=\"\" line1588=\"    //%blockId=GestureSensor_setMode\" line1589=\"\" line1590=\"    //%block=&quot;SL06 set mode %mode %enable&quot;\" line1591=\"\" line1592=\"    //%advanced=true\" line1593=\"\" line1594=\"    //%group=可选项\" line1595=\"\" line1596=\"    function setMode(mode: NumberFormat.UInt8BE, enable: NumberFormat.UInt8BE): boolean {\" line1597=\"\" line1598=\"        let reg_val: NumberFormat.UInt8BE;\" line1599=\"\" line1600=\"\" line1601=\"\" line1602=\"        // Read current ENABLE register \" line1603=\"\" line1604=\"        reg_val = getMode();\" line1605=\"\" line1606=\"        // ERROR value\" line1607=\"\" line1608=\"        if (reg_val == 0xFF) {\" line1609=\"\" line1610=\"            return false;\" line1611=\"\" line1612=\"        }\" line1613=\"\" line1614=\"\" line1615=\"\" line1616=\"        // Change bit(s) in ENABLE register \" line1617=\"\" line1618=\"        enable = enable &amp; 0x01;\" line1619=\"\" line1620=\"        if (mode &gt;= 0 &amp;&amp; mode &lt;= 6) {\" line1621=\"\" line1622=\"            if (enable) {\" line1623=\"\" line1624=\"                reg_val |= (1 &lt;&lt; mode);\" line1625=\"\" line1626=\"            }\" line1627=\"\" line1628=\"            else {\" line1629=\"\" line1630=\"                reg_val &amp;= ~(1 &lt;&lt; mode);\" line1631=\"\" line1632=\"            }\" line1633=\"\" line1634=\"        }\" line1635=\"\" line1636=\"        // ALL mode\" line1637=\"\" line1638=\"        else if (mode == 7) {\" line1639=\"\" line1640=\"            if (enable) {\" line1641=\"\" line1642=\"                reg_val = 0x7F;\" line1643=\"\" line1644=\"            }\" line1645=\"\" line1646=\"            else {\" line1647=\"\" line1648=\"                reg_val = 0x00;\" line1649=\"\" line1650=\"            }\" line1651=\"\" line1652=\"        }\" line1653=\"\" line1654=\"\" line1655=\"\" line1656=\"        // Write value back to ENABLE register \" line1657=\"\" line1658=\"        // APDS9960_ENABLE\" line1659=\"\" line1660=\"        wireWriteDataByte(0x80, reg_val)\" line1661=\"\" line1662=\"\" line1663=\"\" line1664=\"        return true;\" line1665=\"\" line1666=\"    }\" line1667=\"\" line1668=\"\" line1669=\"\" line1670=\"\" line1671=\"\" line1672=\"    //%blockId=GestureSensor_enablePower\" line1673=\"\" line1674=\"    //%block=&quot; 启用上电&quot;\" line1675=\"\" line1676=\"    //%group=可选项\" line1677=\"\" line1678=\"    function enablePower() {\" line1679=\"\" line1680=\"        setMode(0, 1)\" line1681=\"\" line1682=\"    }\" line1683=\"\" line1684=\"\" line1685=\"\" line1686=\"    //%blockId=GestureSensor_disablePower\" line1687=\"\" line1688=\"    //%block=&quot;不允许上电&quot;\" line1689=\"\" line1690=\"    //%group=可选项\" line1691=\"\" line1692=\"    function disbalePower() {\" line1693=\"\" line1694=\"        setMode(0, 0)\" line1695=\"\" line1696=\"    }\" line1697=\"\" line1698=\"\" line1699=\"\" line1700=\"    function enableGestureSensor(): void {\" line1701=\"\" line1702=\"\" line1703=\"\" line1704=\"        // Enable gesture mode\" line1705=\"\" line1706=\"        // Set ENABLE to 0 (power off)\" line1707=\"\" line1708=\"        //Set WTIME to 0xFF\" line1709=\"\" line1710=\"        //Set AUX to LED_BOOST_300\" line1711=\"\" line1712=\"        //Enable PON, WEN, PEN, GEN in ENABLE \" line1713=\"\" line1714=\"\" line1715=\"\" line1716=\"        resetGestureParameters();\" line1717=\"\" line1718=\"\" line1719=\"\" line1720=\"        wireWriteDataByte(0x83, 0xFF)\" line1721=\"\" line1722=\"\" line1723=\"\" line1724=\"        //APDS9960_PPULSE, DEFAULT_GESTURE_PPULSE\" line1725=\"\" line1726=\"        wireWriteDataByte(0x8E, 0x89)\" line1727=\"\" line1728=\"\" line1729=\"\" line1730=\"        // LED_BOOST_300\" line1731=\"\" line1732=\"        setLEDBoost(3)\" line1733=\"\" line1734=\"\" line1735=\"\" line1736=\"        setGestureIntEnable(0)\" line1737=\"\" line1738=\"\" line1739=\"\" line1740=\"        setGestureMode(1)\" line1741=\"\" line1742=\"\" line1743=\"\" line1744=\"        enablePower()\" line1745=\"\" line1746=\"\" line1747=\"\" line1748=\"        // WAIT\" line1749=\"\" line1750=\"        setMode(3, 1)\" line1751=\"\" line1752=\"\" line1753=\"\" line1754=\"        // PROXIMITY\" line1755=\"\" line1756=\"        setMode(2, 1)\" line1757=\"\" line1758=\"\" line1759=\"\" line1760=\"        // GESTURE\" line1761=\"\" line1762=\"        setMode(6, 1)\" line1763=\"\" line1764=\"    }\" line1765=\"\" line1766=\"\" line1767=\"\" line1768=\"    function disableGestureSensor() {\" line1769=\"\" line1770=\"        resetGestureParameters();\" line1771=\"\" line1772=\"        setGestureIntEnable(0)\" line1773=\"\" line1774=\"\" line1775=\"\" line1776=\"        setGestureMode(0)\" line1777=\"\" line1778=\"\" line1779=\"\" line1780=\"        setMode(6, 0)\" line1781=\"\" line1782=\"\" line1783=\"\" line1784=\"    }\" line1785=\"\" line1786=\"\" line1787=\"\" line1788=\"\" line1789=\"\" line1790=\"\" line1791=\"\" line1792=\"    //%blockId=GestureSensor_getGestureLEDDrive\" line1793=\"\" line1794=\"    //%block=&quot;设置手势LED指示灯驱动&quot;\" line1795=\"\" line1796=\"    //%advanced=true\" line1797=\"\" line1798=\"    //%group=手势传感器\" line1799=\"\" line1800=\"    function getGestureLEDDrive() {\" line1801=\"\" line1802=\"        let val3: number;\" line1803=\"\" line1804=\"\" line1805=\"\" line1806=\"        // Read value from GCONF2 register \" line1807=\"\" line1808=\"        // APDS9960_GCONF2\" line1809=\"\" line1810=\"        val3 = wireReadDataByte(0xA3)\" line1811=\"\" line1812=\"\" line1813=\"\" line1814=\"        //Shift and mask out GLDRIVE bits \" line1815=\"\" line1816=\"        val3 = (val3 &gt;&gt; 3) &amp; 0b00000011;\" line1817=\"\" line1818=\"\" line1819=\"\" line1820=\"        return val3;\" line1821=\"\" line1822=\"    }\" line1823=\"\" line1824=\"\" line1825=\"\" line1826=\"    //%blockId=GestureSensor_setGestureLEDDrive\" line1827=\"\" line1828=\"    //%block=&quot;SL06 set gesture LED drive %drive&quot;\" line1829=\"\" line1830=\"    //%group=手势传感器\" line1831=\"\" line1832=\"    //%advanced=true\" line1833=\"\" line1834=\"    function setGestureLEDDrive(drive: number) {\" line1835=\"\" line1836=\"        let val4: number;\" line1837=\"\" line1838=\"\" line1839=\"\" line1840=\"        // Read value from GCONF2 register \" line1841=\"\" line1842=\"        // APDS9960_GCONF2\" line1843=\"\" line1844=\"        val4 = wireReadDataByte(0xA3)\" line1845=\"\" line1846=\"        // Set bits in register to given value \" line1847=\"\" line1848=\"        drive &amp;= 0b00000011;\" line1849=\"\" line1850=\"        drive = drive &lt;&lt; 3;\" line1851=\"\" line1852=\"        val4 &amp;= 0b11100111;\" line1853=\"\" line1854=\"        val4 |= drive;\" line1855=\"\" line1856=\"\" line1857=\"\" line1858=\"        // Write register value back into GCONF2 register \" line1859=\"\" line1860=\"        // APDS9960_GCONF2\" line1861=\"\" line1862=\"        wireWriteDataByte(0xA3, val4)\" line1863=\"\" line1864=\"            ;\" line1865=\"\" line1866=\"    }\" line1867=\"\" line1868=\"\" line1869=\"\" line1870=\"    //%blockId=GestureSensor_getGestureGain\" line1871=\"\" line1872=\"    //%block=&quot;SL06 get gesture gain&quot;\" line1873=\"\" line1874=\"    //%advanced=true\" line1875=\"\" line1876=\"    //%group=手势传感器\" line1877=\"\" line1878=\"    function getGestureGain() {\" line1879=\"\" line1880=\"        let val5: number;\" line1881=\"\" line1882=\"\" line1883=\"\" line1884=\"        //Read value from GCONF2 register \" line1885=\"\" line1886=\"        // APDS9960_GCONF2\" line1887=\"\" line1888=\"        val5 = wireReadDataByte(0xA3)\" line1889=\"\" line1890=\"\" line1891=\"\" line1892=\"        // Shift and mask out GGAIN bits \" line1893=\"\" line1894=\"        val5 = (val5 &gt;&gt; 5) &amp; 0b00000011;\" line1895=\"\" line1896=\"\" line1897=\"\" line1898=\"        return val5;\" line1899=\"\" line1900=\"    }\" line1901=\"\" line1902=\"\" line1903=\"\" line1904=\"    //%blockId=GestureSensor_setGestureGain\" line1905=\"\" line1906=\"    //%block=&quot;SL06 set gesture gain %gain&quot;\" line1907=\"\" line1908=\"    //%advanced=true\" line1909=\"\" line1910=\"    //%group=手势传感器\" line1911=\"\" line1912=\"    function setGestureGain(gain: number) {\" line1913=\"\" line1914=\"        let val6: number;\" line1915=\"\" line1916=\"\" line1917=\"\" line1918=\"        // Read value from GCONF2 register \" line1919=\"\" line1920=\"        // APDS9960_GCONF2\" line1921=\"\" line1922=\"        val6 = wireReadDataByte(0xA3)\" line1923=\"\" line1924=\"\" line1925=\"\" line1926=\"        // Set bits in register to given value \" line1927=\"\" line1928=\"        gain &amp;= 0b00000011;\" line1929=\"\" line1930=\"        gain = gain &lt;&lt; 5;\" line1931=\"\" line1932=\"        val6 &amp;= 0b10011111;\" line1933=\"\" line1934=\"        val6 |= gain;\" line1935=\"\" line1936=\"\" line1937=\"\" line1938=\"        // Write register value back into GCONF2 register \" line1939=\"\" line1940=\"        // APDS9960_GCONF2\" line1941=\"\" line1942=\"        wireWriteDataByte(0xA3, val6)\" line1943=\"\" line1944=\"\" line1945=\"\" line1946=\"    }\" line1947=\"\" line1948=\"\" line1949=\"\" line1950=\"    //%blockId=GestureSensor_getGestureIntEnable\" line1951=\"\" line1952=\"    //%block=&quot;SL06 get gesture int enable&quot;\" line1953=\"\" line1954=\"    //%advanced=true\" line1955=\"\" line1956=\"    //%group=手势传感器\" line1957=\"\" line1958=\"    function getGestureIntEnable() {\" line1959=\"\" line1960=\"        let val7 = 0;\" line1961=\"\" line1962=\"\" line1963=\"\" line1964=\"        // Read value from GCONF4 register \" line1965=\"\" line1966=\"        // APDS9960_GCONF4\" line1967=\"\" line1968=\"        val7 = wireReadDataByte(0xAB)\" line1969=\"\" line1970=\"\" line1971=\"\" line1972=\"        // Shift and mask out GIEN bit \" line1973=\"\" line1974=\"        val7 = (val7 &gt;&gt; 1) &amp; 0b00000001;\" line1975=\"\" line1976=\"\" line1977=\"\" line1978=\"        return val7;\" line1979=\"\" line1980=\"    }\" line1981=\"\" line1982=\"\" line1983=\"\" line1984=\"    //%blockId=GestureSensor_setGestureIntEnable\" line1985=\"\" line1986=\"    //%block=&quot;SL06 set gesture int enable %enable&quot;\" line1987=\"\" line1988=\"    //%group=手势传感器\" line1989=\"\" line1990=\"    //%advanced=true\" line1991=\"\" line1992=\"    function setGestureIntEnable(enable: number): void {\" line1993=\"\" line1994=\"        let val8 = 0;\" line1995=\"\" line1996=\"\" line1997=\"\" line1998=\"        // Read value from GCONF4 register \" line1999=\"\" line2000=\"        // APDS9960_GCONF4\" line2001=\"\" line2002=\"        val8 = wireReadDataByte(0xAB)\" line2003=\"\" line2004=\"        // Set bits in register to given value \" line2005=\"\" line2006=\"        enable &amp;= 0b00000001;\" line2007=\"\" line2008=\"        enable = enable &lt;&lt; 1;\" line2009=\"\" line2010=\"        val8 &amp;= 0b11111101;\" line2011=\"\" line2012=\"        val8 |= enable;\" line2013=\"\" line2014=\"\" line2015=\"\" line2016=\"        // Write register value back into GCONF4 register \" line2017=\"\" line2018=\"        // APDS9960_GCONF4\" line2019=\"\" line2020=\"        wireWriteDataByte(0xAB, val8)\" line2021=\"\" line2022=\"\" line2023=\"\" line2024=\"    }\" line2025=\"\" line2026=\"\" line2027=\"\" line2028=\"    //%blockId=GestureSensor_isGestureAvailable\" line2029=\"\" line2030=\"    //%block=&quot;SL06 is gesture available&quot;\" line2031=\"\" line2032=\"    //%group=手势传感器\" line2033=\"\" line2034=\"    function isGestureAvailable() {\" line2035=\"\" line2036=\"        let val9 = 0;\" line2037=\"\" line2038=\"\" line2039=\"\" line2040=\"        // Read value from GSTATUS register \" line2041=\"\" line2042=\"        // APDS9960_GSTATUS\" line2043=\"\" line2044=\"        val9 = wireReadDataByte(0xAF)\" line2045=\"\" line2046=\"\" line2047=\"\" line2048=\"        // Shift and mask out GVALID bit \" line2049=\"\" line2050=\"        // APDS9960_GVALID\" line2051=\"\" line2052=\"        val9 &amp;= 0b00000001;\" line2053=\"\" line2054=\"\" line2055=\"\" line2056=\"        // Return true/false based on GVALID bit \" line2057=\"\" line2058=\"        if (val9 == 1) {\" line2059=\"\" line2060=\"            return true;\" line2061=\"\" line2062=\"        } else {\" line2063=\"\" line2064=\"            return false;\" line2065=\"\" line2066=\"        }\" line2067=\"\" line2068=\"    }\" line2069=\"\" line2070=\"\" line2071=\"\" line2072=\"    //%blockId=GestureSensor_readGesture\" line2073=\"\" line2074=\"    //%block=&quot;读取手势方向&quot;\" line2075=\"\" line2076=\"    //%group=手势传感器\" line2077=\"\" line2078=\"    //%weight=28\" line2079=\"\" line2080=\"    //% subcategory=传感器\" line2081=\"\" line2082=\"    export function gesture() {\" line2083=\"\" line2084=\"        let fifo_level = 0;\" line2085=\"\" line2086=\"        let bytes_read = 0;\" line2087=\"\" line2088=\"        let gstatus: number;\" line2089=\"\" line2090=\"        let fifo_data: number[] = []\" line2091=\"\" line2092=\"        let motion: string;\" line2093=\"\" line2094=\"        let i: number;\" line2095=\"\" line2096=\"        let mode: number = getMode() &amp; 0b01000001\" line2097=\"\" line2098=\"\" line2099=\"\" line2100=\"\" line2101=\"\" line2102=\"        // Make sure that power and gesture is on and data is valid \" line2103=\"\" line2104=\"        if (!isGestureAvailable() || !(mode)) {\" line2105=\"\" line2106=\"            return;\" line2107=\"\" line2108=\"        }\" line2109=\"\" line2110=\"\" line2111=\"\" line2112=\"        // Keep looping as long as gesture data is valid \" line2113=\"\" line2114=\"        while (1) {\" line2115=\"\" line2116=\"\" line2117=\"\" line2118=\"            // Wait some time to collect next batch of FIFO data \" line2119=\"\" line2120=\"            // FIFO_PAUSE_TIME\" line2121=\"\" line2122=\"            basic.pause(30);\" line2123=\"\" line2124=\"\" line2125=\"\" line2126=\"            // Get the contents of the STATUS register. Is data still valid? \" line2127=\"\" line2128=\"            // APDS9960_GSTATUS\" line2129=\"\" line2130=\"            gstatus = wireReadDataByte(0xAF);\" line2131=\"\" line2132=\"\" line2133=\"\" line2134=\"            // If we have valid data, read in FIFO \" line2135=\"\" line2136=\"            if ((gstatus &amp; 0b00000001) == 0b00000001) {\" line2137=\"\" line2138=\"\" line2139=\"\" line2140=\"                // Read the current FIFO level \" line2141=\"\" line2142=\"                // APDS9960_GFLVL\" line2143=\"\" line2144=\"                fifo_level = wireReadDataByte(0xAE)\" line2145=\"\" line2146=\"\" line2147=\"\" line2148=\"                // If there's stuff in the FIFO, read it into our data block \" line2149=\"\" line2150=\"                if (fifo_level &gt; 0) {\" line2151=\"\" line2152=\"                    //APDS9960_GFIFO_U\" line2153=\"\" line2154=\"                    fifo_data = wireReadDataBlock(0xFC, (fifo_level * 4));\" line2155=\"\" line2156=\"\" line2157=\"\" line2158=\"                    bytes_read = fifo_data.length\" line2159=\"\" line2160=\"\" line2161=\"\" line2162=\"                    // If at least 1 set of data, sort the data into U/D/L/R \" line2163=\"\" line2164=\"                    if (fifo_data.length &gt;= 4) {\" line2165=\"\" line2166=\"                        for (i = 0; i &lt; bytes_read; i += 4) {\" line2167=\"\" line2168=\"                            gesture_data_u_data[gesture_data_index] = fifo_data[i + 0];\" line2169=\"\" line2170=\"                            gesture_data_d_data[gesture_data_index] = fifo_data[i + 1];\" line2171=\"\" line2172=\"                            gesture_data_l_data[gesture_data_index] = fifo_data[i + 2];\" line2173=\"\" line2174=\"                            gesture_data_r_data[gesture_data_index] = fifo_data[i + 3];\" line2175=\"\" line2176=\"                            gesture_data_index++;\" line2177=\"\" line2178=\"                            gesture_data_total_gestures++;\" line2179=\"\" line2180=\"                        }\" line2181=\"\" line2182=\"\" line2183=\"\" line2184=\"                        //Filter and process gesture data. Decode near/far state \" line2185=\"\" line2186=\"                        if (processGestureData()) {\" line2187=\"\" line2188=\"                            if (decodeGesture()) {\" line2189=\"\" line2190=\"                            }\" line2191=\"\" line2192=\"                        }\" line2193=\"\" line2194=\"\" line2195=\"\" line2196=\"                        // Reset data \" line2197=\"\" line2198=\"                        gesture_data_index = 0;\" line2199=\"\" line2200=\"                        gesture_data_total_gestures = 0;\" line2201=\"\" line2202=\"                    }\" line2203=\"\" line2204=\"                }\" line2205=\"\" line2206=\"            } else {\" line2207=\"\" line2208=\"\" line2209=\"\" line2210=\"                // Determine best guessed gesture and clean up \" line2211=\"\" line2212=\"                basic.pause(30);\" line2213=\"\" line2214=\"                decodeGesture();\" line2215=\"\" line2216=\"                motion = gesture_motion_;\" line2217=\"\" line2218=\"                motion_global = gesture_motion_\" line2219=\"\" line2220=\"                resetGestureParameters();\" line2221=\"\" line2222=\"\" line2223=\"\" line2224=\"                if (motion == DIR_UP) {\" line2225=\"\" line2226=\"                    control.raiseEvent(5, 5)\" line2227=\"\" line2228=\"                } else if (motion == DIR_DOWN) {\" line2229=\"\" line2230=\"                    control.raiseEvent(5, 6)\" line2231=\"\" line2232=\"                } else if (motion == DIR_RIGHT) {\" line2233=\"\" line2234=\"                    control.raiseEvent(5, 7)\" line2235=\"\" line2236=\"                } else if (motion == DIR_LEFT) {\" line2237=\"\" line2238=\"                    control.raiseEvent(5, 8)\" line2239=\"\" line2240=\"                } else if (motion == DIR_NEAR) {\" line2241=\"\" line2242=\"                    control.raiseEvent(5, 9)\" line2243=\"\" line2244=\"                } else if (motion == DIR_FAR) {\" line2245=\"\" line2246=\"                    control.raiseEvent(5, 10)\" line2247=\"\" line2248=\"                }\" line2249=\"\" line2250=\"\" line2251=\"\" line2252=\"                return;\" line2253=\"\" line2254=\"\" line2255=\"\" line2256=\"            }\" line2257=\"\" line2258=\"        }\" line2259=\"\" line2260=\"\" line2261=\"\" line2262=\"    }\" line2263=\"\" line2264=\"\" line2265=\"\" line2266=\"    //%block=&quot;手势检测方向 %u&quot;\" line2267=\"\" line2268=\"    //%u.defl=1\" line2269=\"\" line2270=\"    //%weight=28\" line2271=\"\" line2272=\"    //% subcategory=传感器\" line2273=\"\" line2274=\"    //%group=手势传感器\" line2275=\"\" line2276=\"    export function onGesture(u: gestures, handler: () =&gt; void) {\" line2277=\"\" line2278=\"        if (u == gestures.LEFT) {\" line2279=\"\" line2280=\"            control.onEvent(5, 6, function () {\" line2281=\"\" line2282=\"                handler()\" line2283=\"\" line2284=\"            })\" line2285=\"\" line2286=\"        }\" line2287=\"\" line2288=\"        if (u == gestures.RIGHT) {\" line2289=\"\" line2290=\"            control.onEvent(5, 5, function () {\" line2291=\"\" line2292=\"                handler()\" line2293=\"\" line2294=\"            })\" line2295=\"\" line2296=\"        }\" line2297=\"\" line2298=\"        if (u == gestures.UP) {\" line2299=\"\" line2300=\"            control.onEvent(5, 8, function () {\" line2301=\"\" line2302=\"                handler()\" line2303=\"\" line2304=\"            })\" line2305=\"\" line2306=\"        }\" line2307=\"\" line2308=\"        if (u == gestures.DOWN) {\" line2309=\"\" line2310=\"            control.onEvent(5, 7, function () {\" line2311=\"\" line2312=\"                handler()\" line2313=\"\" line2314=\"            })\" line2315=\"\" line2316=\"        }\" line2317=\"\" line2318=\"\" line2319=\"\" line2320=\"    }\" line2321=\"\" line2322=\"\" line2323=\"\" line2324=\"    function decodeGesture(): boolean {\" line2325=\"\" line2326=\"        // Return if near or far event is detected \" line2327=\"\" line2328=\"        if (gesture_state_ == states.NEAR_STATE1) {\" line2329=\"\" line2330=\"            gesture_motion_ = DIR_NEAR;\" line2331=\"\" line2332=\"            return true;\" line2333=\"\" line2334=\"        }\" line2335=\"\" line2336=\"        else if (gesture_state_ == states.FAR_STATE1) {\" line2337=\"\" line2338=\"            gesture_motion_ = DIR_FAR;\" line2339=\"\" line2340=\"            return true;\" line2341=\"\" line2342=\"        }\" line2343=\"\" line2344=\"\" line2345=\"\" line2346=\"        // Determine swipe direction \" line2347=\"\" line2348=\"        if ((gesture_ud_count_ == -1) &amp;&amp; (gesture_lr_count_ == 0)) {\" line2349=\"\" line2350=\"            gesture_motion_ = DIR_UP;\" line2351=\"\" line2352=\"        }\" line2353=\"\" line2354=\"        else if ((gesture_ud_count_ == 1) &amp;&amp; (gesture_lr_count_ == 0)) {\" line2355=\"\" line2356=\"            gesture_motion_ = DIR_DOWN;\" line2357=\"\" line2358=\"        }\" line2359=\"\" line2360=\"        else if ((gesture_ud_count_ == 0) &amp;&amp; (gesture_lr_count_ == 1)) {\" line2361=\"\" line2362=\"            gesture_motion_ = DIR_RIGHT;\" line2363=\"\" line2364=\"        }\" line2365=\"\" line2366=\"        else if ((gesture_ud_count_ == 0) &amp;&amp; (gesture_lr_count_ == -1)) {\" line2367=\"\" line2368=\"            gesture_motion_ = DIR_LEFT;\" line2369=\"\" line2370=\"        }\" line2371=\"\" line2372=\"        else if ((gesture_ud_count_ == -1) &amp;&amp; (gesture_lr_count_ == 1)) {\" line2373=\"\" line2374=\"            if (Math.abs(gesture_ud_delta_) &gt; Math.abs(gesture_lr_delta_)) {\" line2375=\"\" line2376=\"                gesture_motion_ = DIR_UP;\" line2377=\"\" line2378=\"            }\" line2379=\"\" line2380=\"            else {\" line2381=\"\" line2382=\"                gesture_motion_ = DIR_RIGHT;\" line2383=\"\" line2384=\"            }\" line2385=\"\" line2386=\"        }\" line2387=\"\" line2388=\"        else if ((gesture_ud_count_ == 1) &amp;&amp; (gesture_lr_count_ == -1)) {\" line2389=\"\" line2390=\"            if (Math.abs(gesture_ud_delta_) &gt; Math.abs(gesture_lr_delta_)) {\" line2391=\"\" line2392=\"                gesture_motion_ = DIR_DOWN;\" line2393=\"\" line2394=\"            }\" line2395=\"\" line2396=\"            else {\" line2397=\"\" line2398=\"                gesture_motion_ = DIR_LEFT;\" line2399=\"\" line2400=\"            }\" line2401=\"\" line2402=\"        }\" line2403=\"\" line2404=\"        else if ((gesture_ud_count_ == -1) &amp;&amp; (gesture_lr_count_ == -1)) {\" line2405=\"\" line2406=\"            if (Math.abs(gesture_ud_delta_) &gt; Math.abs(gesture_lr_delta_)) {\" line2407=\"\" line2408=\"                gesture_motion_ = DIR_UP;\" line2409=\"\" line2410=\"            }\" line2411=\"\" line2412=\"            else {\" line2413=\"\" line2414=\"                gesture_motion_ = DIR_LEFT;\" line2415=\"\" line2416=\"            }\" line2417=\"\" line2418=\"        }\" line2419=\"\" line2420=\"        else if ((gesture_ud_count_ == 1) &amp;&amp; (gesture_lr_count_ == 1)) {\" line2421=\"\" line2422=\"            if (Math.abs(gesture_ud_delta_) &gt; Math.abs(gesture_lr_delta_)) {\" line2423=\"\" line2424=\"                gesture_motion_ = DIR_DOWN;\" line2425=\"\" line2426=\"            }\" line2427=\"\" line2428=\"            else {\" line2429=\"\" line2430=\"                gesture_motion_ = DIR_RIGHT;\" line2431=\"\" line2432=\"            }\" line2433=\"\" line2434=\"        }\" line2435=\"\" line2436=\"        else {\" line2437=\"\" line2438=\"            return false;\" line2439=\"\" line2440=\"        }\" line2441=\"\" line2442=\"\" line2443=\"\" line2444=\"        return true;\" line2445=\"\" line2446=\"    }\" line2447=\"\" line2448=\"\" line2449=\"\" line2450=\"\" line2451=\"\" line2452=\"    function processGestureData(): boolean {\" line2453=\"\" line2454=\"        let u_first = 0;\" line2455=\"\" line2456=\"        let d_first = 0;\" line2457=\"\" line2458=\"        let l_first = 0;\" line2459=\"\" line2460=\"        let r_first = 0;\" line2461=\"\" line2462=\"        let u_last = 0;\" line2463=\"\" line2464=\"        let d_last = 0;\" line2465=\"\" line2466=\"        let l_last = 0;\" line2467=\"\" line2468=\"        let r_last = 0;\" line2469=\"\" line2470=\"        let ud_ratio_first = 0;\" line2471=\"\" line2472=\"        let lr_ratio_first = 0;\" line2473=\"\" line2474=\"        let ud_ratio_last = 0;\" line2475=\"\" line2476=\"        let lr_ratio_last = 0;\" line2477=\"\" line2478=\"        let ud_delta = 0;\" line2479=\"\" line2480=\"        let lr_delta = 0;\" line2481=\"\" line2482=\"        let j = 0;\" line2483=\"\" line2484=\"\" line2485=\"\" line2486=\"        // If we have less than 4 total gestures, that's not enough \" line2487=\"\" line2488=\"        if (gesture_data_total_gestures &lt;= 4) {\" line2489=\"\" line2490=\"            return false;\" line2491=\"\" line2492=\"        }\" line2493=\"\" line2494=\"\" line2495=\"\" line2496=\"        // Check to make sure our data isn't out of bounds \" line2497=\"\" line2498=\"        if ((gesture_data_total_gestures &lt;= 32) &amp;&amp;\" line2499=\"\" line2500=\"            (gesture_data_total_gestures &gt; 0)) {\" line2501=\"\" line2502=\"\" line2503=\"\" line2504=\"            // Find the first value in U/D/L/R above the threshold \" line2505=\"\" line2506=\"            for (j = 0; j &lt; gesture_data_total_gestures; j++) {\" line2507=\"\" line2508=\"                // GESTURE_THRESHOLD_OUT\" line2509=\"\" line2510=\"                if ((gesture_data_u_data[j] &gt; 10) &amp;&amp;\" line2511=\"\" line2512=\"                    (gesture_data_d_data[j] &gt; 10) &amp;&amp;\" line2513=\"\" line2514=\"                    (gesture_data_l_data[j] &gt; 10) &amp;&amp;\" line2515=\"\" line2516=\"                    (gesture_data_r_data[j] &gt; 10)) {\" line2517=\"\" line2518=\"\" line2519=\"\" line2520=\"                    u_first = gesture_data_u_data[j];\" line2521=\"\" line2522=\"                    d_first = gesture_data_d_data[j];\" line2523=\"\" line2524=\"                    l_first = gesture_data_l_data[j];\" line2525=\"\" line2526=\"                    r_first = gesture_data_r_data[j];\" line2527=\"\" line2528=\"                    break;\" line2529=\"\" line2530=\"                }\" line2531=\"\" line2532=\"            }\" line2533=\"\" line2534=\"\" line2535=\"\" line2536=\"            // If one of the _first values is 0, then there is no good data \" line2537=\"\" line2538=\"            if ((u_first == 0) || (d_first == 0) ||\" line2539=\"\" line2540=\"                (l_first == 0) || (r_first == 0)) {\" line2541=\"\" line2542=\"\" line2543=\"\" line2544=\"                return false;\" line2545=\"\" line2546=\"            }\" line2547=\"\" line2548=\"            // Find the last value in U/D/L/R above the threshold \" line2549=\"\" line2550=\"            for (j = gesture_data_total_gestures - 1; j &gt;= 0; j--) {\" line2551=\"\" line2552=\"\" line2553=\"\" line2554=\"                if ((gesture_data_u_data[j] &gt; 10) &amp;&amp;\" line2555=\"\" line2556=\"                    (gesture_data_d_data[j] &gt; 10) &amp;&amp;\" line2557=\"\" line2558=\"                    (gesture_data_l_data[j] &gt; 10) &amp;&amp;\" line2559=\"\" line2560=\"                    (gesture_data_r_data[j] &gt; 10)) {\" line2561=\"\" line2562=\"\" line2563=\"\" line2564=\"                    u_last = gesture_data_u_data[j];\" line2565=\"\" line2566=\"                    d_last = gesture_data_d_data[j];\" line2567=\"\" line2568=\"                    l_last = gesture_data_l_data[j];\" line2569=\"\" line2570=\"                    r_last = gesture_data_r_data[j];\" line2571=\"\" line2572=\"                    break;\" line2573=\"\" line2574=\"                }\" line2575=\"\" line2576=\"            }\" line2577=\"\" line2578=\"        }\" line2579=\"\" line2580=\"\" line2581=\"\" line2582=\"        // Calculate the first vs. last ratio of up/down and left/right \" line2583=\"\" line2584=\"        ud_ratio_first = ((u_first - d_first) * 100) / (u_first + d_first);\" line2585=\"\" line2586=\"        lr_ratio_first = ((l_first - r_first) * 100) / (l_first + r_first);\" line2587=\"\" line2588=\"        ud_ratio_last = ((u_last - d_last) * 100) / (u_last + d_last);\" line2589=\"\" line2590=\"        lr_ratio_last = ((l_last - r_last) * 100) / (l_last + r_last);\" line2591=\"\" line2592=\"\" line2593=\"\" line2594=\"        // Determine the difference between the first and last ratios \" line2595=\"\" line2596=\"        ud_delta = ud_ratio_last - ud_ratio_first;\" line2597=\"\" line2598=\"        lr_delta = lr_ratio_last - lr_ratio_first;\" line2599=\"\" line2600=\"\" line2601=\"\" line2602=\"        // Accumulate the UD and LR delta values\" line2603=\"\" line2604=\"        gesture_ud_delta_ += ud_delta;\" line2605=\"\" line2606=\"        gesture_lr_delta_ += lr_delta;\" line2607=\"\" line2608=\"\" line2609=\"\" line2610=\"        // Determine U/D gesture \" line2611=\"\" line2612=\"        // GESTURE_SENSITIVITY_1\" line2613=\"\" line2614=\"        if (gesture_ud_delta_ &gt;= 50) {\" line2615=\"\" line2616=\"            gesture_ud_count_ = 1;\" line2617=\"\" line2618=\"        }\" line2619=\"\" line2620=\"        else if (gesture_ud_delta_ &lt;= -50) {\" line2621=\"\" line2622=\"            gesture_ud_count_ = -1;\" line2623=\"\" line2624=\"        }\" line2625=\"\" line2626=\"        else {\" line2627=\"\" line2628=\"            gesture_ud_count_ = 0;\" line2629=\"\" line2630=\"        }\" line2631=\"\" line2632=\"\" line2633=\"\" line2634=\"        // Determine L/R gesture \" line2635=\"\" line2636=\"        if (gesture_lr_delta_ &gt;= 50) {\" line2637=\"\" line2638=\"            gesture_lr_count_ = 1;\" line2639=\"\" line2640=\"        }\" line2641=\"\" line2642=\"        else if (gesture_lr_delta_ &lt;= -50) {\" line2643=\"\" line2644=\"            gesture_lr_count_ = -1;\" line2645=\"\" line2646=\"        }\" line2647=\"\" line2648=\"        else {\" line2649=\"\" line2650=\"            gesture_lr_count_ = 0;\" line2651=\"\" line2652=\"        }\" line2653=\"\" line2654=\"\" line2655=\"\" line2656=\"        // Determine Near/Far gesture \" line2657=\"\" line2658=\"        if ((gesture_ud_count_ == 0) &amp;&amp; (gesture_lr_count_ == 0)) {\" line2659=\"\" line2660=\"            // GESTURE_SENSITIVITY_2\" line2661=\"\" line2662=\"            if ((Math.abs(ud_delta) &lt; 20) &amp;&amp;\" line2663=\"\" line2664=\"                (Math.abs(lr_delta) &lt; 20)) {\" line2665=\"\" line2666=\"\" line2667=\"\" line2668=\"                if ((ud_delta == 0) &amp;&amp; (lr_delta == 0)) {\" line2669=\"\" line2670=\"                    gesture_near_count_++;\" line2671=\"\" line2672=\"                }\" line2673=\"\" line2674=\"                else if ((ud_delta != 0) || (lr_delta != 0)) {\" line2675=\"\" line2676=\"                    gesture_far_count_++;\" line2677=\"\" line2678=\"                }\" line2679=\"\" line2680=\"\" line2681=\"\" line2682=\"                if ((gesture_near_count_ &gt;= 10) &amp;&amp; (gesture_far_count_ &gt;= 2)) {\" line2683=\"\" line2684=\"                    if ((ud_delta == 0) &amp;&amp; (lr_delta == 0)) {\" line2685=\"\" line2686=\"                        gesture_state_ = states.NEAR_STATE1;\" line2687=\"\" line2688=\"                    }\" line2689=\"\" line2690=\"                    else if ((ud_delta != 0) &amp;&amp; (lr_delta != 0)) {\" line2691=\"\" line2692=\"                        gesture_state_ = states.FAR_STATE1;\" line2693=\"\" line2694=\"                    }\" line2695=\"\" line2696=\"                    return true;\" line2697=\"\" line2698=\"                }\" line2699=\"\" line2700=\"            }\" line2701=\"\" line2702=\"        }\" line2703=\"\" line2704=\"        else {\" line2705=\"\" line2706=\"            // GESTURE_SENSITIVITY_2\" line2707=\"\" line2708=\"            if ((Math.abs(ud_delta) &lt; 20) &amp;&amp;\" line2709=\"\" line2710=\"                (Math.abs(lr_delta) &lt; 20)) {\" line2711=\"\" line2712=\"\" line2713=\"\" line2714=\"                if ((ud_delta == 0) &amp;&amp; (lr_delta == 0)) {\" line2715=\"\" line2716=\"                    gesture_near_count_++;\" line2717=\"\" line2718=\"                }\" line2719=\"\" line2720=\"\" line2721=\"\" line2722=\"                if (gesture_near_count_ &gt;= 10) {\" line2723=\"\" line2724=\"                    gesture_ud_count_ = 0;\" line2725=\"\" line2726=\"                    gesture_lr_count_ = 0;\" line2727=\"\" line2728=\"                    gesture_ud_delta_ = 0;\" line2729=\"\" line2730=\"                    gesture_lr_delta_ = 0;\" line2731=\"\" line2732=\"                }\" line2733=\"\" line2734=\"            }\" line2735=\"\" line2736=\"        }\" line2737=\"\" line2738=\"        return false;\" line2739=\"\" line2740=\"    }\" line2741=\"\" line2742=\"\" line2743=\"\" line2744=\"    //%blockId=GestureSensor_enabler\" line2745=\"\" line2746=\"    //%block=&quot;设置读取模式 %u&quot;\" line2747=\"\" line2748=\"    //%u.defl=1\" line2749=\"\" line2750=\"    //%interrupts.defl=false\" line2751=\"\" line2752=\"    //%group=手势传感器\" line2753=\"\" line2754=\"    //%weight=28\" line2755=\"\" line2756=\"    //% subcategory=传感器\" line2757=\"\" line2758=\"    export function enable_mode(u: sl06_mode): void {\" line2759=\"\" line2760=\"        if (u == sl06_mode.GESTURE_MODE) {\" line2761=\"\" line2762=\"\" line2763=\"\" line2764=\"\" line2765=\"\" line2766=\"            enableGestureSensor()\" line2767=\"\" line2768=\"        }\" line2769=\"\" line2770=\"    }\" line2771=\"\" line2772=\"\" line2773=\"\" line2774=\"\" line2775=\"\" line2776=\"    function setGestureEnterThresh(threshold: number): void {\" line2777=\"\" line2778=\"        // APDS9960_GPENTH\" line2779=\"\" line2780=\"        wireWriteDataByte(0xA0, threshold)\" line2781=\"\" line2782=\"\" line2783=\"\" line2784=\"    }\" line2785=\"\" line2786=\"\" line2787=\"\" line2788=\"    function setGestureExitThresh(threshold: number): void {\" line2789=\"\" line2790=\"        // APDS9960_GEXTH\" line2791=\"\" line2792=\"        wireWriteDataByte(0xA1, threshold)\" line2793=\"\" line2794=\"\" line2795=\"\" line2796=\"    }\" line2797=\"\" line2798=\"\" line2799=\"\" line2800=\"    function setGestureWaitTime(time: number) {\" line2801=\"\" line2802=\"        let val20: number;\" line2803=\"\" line2804=\"\" line2805=\"\" line2806=\"        // Read value from GCONF2 register\" line2807=\"\" line2808=\"        // APDS9960_GCONF2\" line2809=\"\" line2810=\"        val20 = wireReadDataByte(0xA3)\" line2811=\"\" line2812=\"\" line2813=\"\" line2814=\"        // Set bits in register to given value \" line2815=\"\" line2816=\"        time &amp;= 0b00000111;\" line2817=\"\" line2818=\"        val20 &amp;= 0b11111000;\" line2819=\"\" line2820=\"        val20 |= time;\" line2821=\"\" line2822=\"\" line2823=\"\" line2824=\"        // Write register value back into GCONF2 register \" line2825=\"\" line2826=\"        // APDS9960_GCONF2\" line2827=\"\" line2828=\"        wireWriteDataByte(0xA3, val20)\" line2829=\"\" line2830=\"    }\" line2831=\"\" line2832=\"\" line2833=\"\" line2834=\"    function setLEDBoost(boost: number) {\" line2835=\"\" line2836=\"        let val21: number;\" line2837=\"\" line2838=\"\" line2839=\"\" line2840=\"        // Read value from CONFIG2 register \" line2841=\"\" line2842=\"        // APDS9960_CONFIG2\" line2843=\"\" line2844=\"        val21 = wireReadDataByte(0x90)\" line2845=\"\" line2846=\"\" line2847=\"\" line2848=\"        // Set bits in register to given value \" line2849=\"\" line2850=\"        boost &amp;= 0b00000011;\" line2851=\"\" line2852=\"        boost = boost &lt;&lt; 4;\" line2853=\"\" line2854=\"        val21 &amp;= 0b11001111;\" line2855=\"\" line2856=\"        val21 |= boost;\" line2857=\"\" line2858=\"\" line2859=\"\" line2860=\"        // Write register value back into CONFIG2 register \" line2861=\"\" line2862=\"        // APDS9960_CONFIG2\" line2863=\"\" line2864=\"        wireWriteDataByte(0x90, val21)\" line2865=\"\" line2866=\"    }\" line2867=\"\" line2868=\"\" line2869=\"\" line2870=\"    function setGestureMode(mode: number) {\" line2871=\"\" line2872=\"        let val22: number;\" line2873=\"\" line2874=\"\" line2875=\"\" line2876=\"        // Read value from GCONF4 register \" line2877=\"\" line2878=\"        // APDS9960_GCONF4\" line2879=\"\" line2880=\"        val22 = wireReadDataByte(0xAB)\" line2881=\"\" line2882=\"\" line2883=\"\" line2884=\"        // Set bits in register to given value \" line2885=\"\" line2886=\"        mode &amp;= 0b00000001;\" line2887=\"\" line2888=\"        val22 &amp;= 0b11111110;\" line2889=\"\" line2890=\"        val22 |= mode;\" line2891=\"\" line2892=\"\" line2893=\"\" line2894=\"        // Write register value back into GCONF4 register \" line2895=\"\" line2896=\"        // APDS9960_GCONF4\" line2897=\"\" line2898=\"        wireWriteDataByte(0xAB, val22);\" line2899=\"\" line2900=\"    }\" line2901=\"\" line2902=\"\" line2903=\"\" line2904=\"    function resetGestureParameters() {\" line2905=\"\" line2906=\"        gesture_data_index = 0;\" line2907=\"\" line2908=\"        gesture_data_total_gestures = 0;\" line2909=\"\" line2910=\"\" line2911=\"\" line2912=\"        gesture_ud_delta_ = 0;\" line2913=\"\" line2914=\"        gesture_lr_delta_ = 0;\" line2915=\"\" line2916=\"\" line2917=\"\" line2918=\"        gesture_ud_count_ = 0;\" line2919=\"\" line2920=\"        gesture_lr_count_ = 0;\" line2921=\"\" line2922=\"\" line2923=\"\" line2924=\"        gesture_near_count_ = 0;\" line2925=\"\" line2926=\"        gesture_far_count_ = 0;\" line2927=\"\" line2928=\"\" line2929=\"\" line2930=\"        gesture_state_ = 0;\" line2931=\"\" line2932=\"        gesture_motion_ = DIR_NONE;\" line2933=\"\" line2934=\"    }\" line2935=\"\" line2936=\"\" line2937=\"\" line2938=\"    function setAmbientLightIntEnable(enable: number): void {\" line2939=\"\" line2940=\"        let val23: number;\" line2941=\"\" line2942=\"\" line2943=\"\" line2944=\"        // Read value from ENABLE register \" line2945=\"\" line2946=\"        // APDS9960_ENABLE\" line2947=\"\" line2948=\"        val23 = wireReadDataByte(0x80)\" line2949=\"\" line2950=\"\" line2951=\"\" line2952=\"        // Set bits in register to given value \" line2953=\"\" line2954=\"        enable &amp;= 0b00000001;\" line2955=\"\" line2956=\"        enable = enable &lt;&lt; 4;\" line2957=\"\" line2958=\"        val23 &amp;= 0b11101111;\" line2959=\"\" line2960=\"        val23 |= enable;\" line2961=\"\" line2962=\"\" line2963=\"\" line2964=\"        // Write register value back into ENABLE register \" line2965=\"\" line2966=\"        // APDS9960_ENABLE\" line2967=\"\" line2968=\"        wireWriteDataByte(0x80, val23)\" line2969=\"\" line2970=\"    }\" line2971=\"\" line2972=\"\" line2973=\"\" line2974=\"\" line2975=\"\" line2976=\"    function wireWriteByte(val: NumberFormat.UInt8BE): boolean {\" line2977=\"\" line2978=\"        pins.i2cWriteNumber(APDS9960_I2C_ADDR, val, NumberFormat.UInt8BE)\" line2979=\"\" line2980=\"        return true;\" line2981=\"\" line2982=\"    }\" line2983=\"\" line2984=\"\" line2985=\"\" line2986=\"    function wireWriteDataByte(reg: number, val: number): boolean {\" line2987=\"\" line2988=\"        let buf = pins.createBuffer(2)\" line2989=\"\" line2990=\"        buf[0] = reg;\" line2991=\"\" line2992=\"        buf[1] = val;\" line2993=\"\" line2994=\"        pins.i2cWriteBuffer(APDS9960_I2C_ADDR, buf)\" line2995=\"\" line2996=\"        return true;\" line2997=\"\" line2998=\"    }\" line2999=\"\" line3000=\"\" line3001=\"\" line3002=\"\" line3003=\"\" line3004=\"    function wireReadDataByte(reg: number): number {\" line3005=\"\" line3006=\"        pins.i2cWriteNumber(APDS9960_I2C_ADDR, reg, NumberFormat.UInt8BE);\" line3007=\"\" line3008=\"        let val24: number = pins.i2cReadNumber(APDS9960_I2C_ADDR, NumberFormat.UInt8BE)\" line3009=\"\" line3010=\"        return val24\" line3011=\"\" line3012=\"    }\" line3013=\"\" line3014=\"\" line3015=\"\" line3016=\"    function wireReadDataBlock(reg: NumberFormat.UInt8BE, len: number): number[] {\" line3017=\"\" line3018=\"        let buff: number[] = []\" line3019=\"\" line3020=\"\" line3021=\"\" line3022=\"        pins.i2cWriteNumber(APDS9960_I2C_ADDR, reg, NumberFormat.UInt8BE);\" line3023=\"\" line3024=\"        for (let k = 0; k &lt; len; k++) {\" line3025=\"\" line3026=\"            buff[k] = pins.i2cReadNumber(APDS9960_I2C_ADDR, NumberFormat.UInt8BE)\" line3027=\"\" line3028=\"        }\" line3029=\"\" line3030=\"\" line3031=\"\" line3032=\"\" line3033=\"\" line3034=\"        return buff\" line3035=\"\" line3036=\"    }\" line3037=\"\" line3038=\"\" line3039=\"\" line3040=\"\" line3041=\"\" line3042=\"    gesturesensor_begin();\" line3043=\"\" line3044=\"\" line3045=\"\" line3046=\"    //////人体红外/////\" line3047=\"\" line3048=\"    //% weight=27\" line3049=\"\" line3050=\"    //% buttonpin.fieldEditor=&quot;gridpicker&quot;\" line3051=\"\" line3052=\"    //% buttonpin.fieldOptions.width=220\" line3053=\"\" line3054=\"    //% buttonpin.fieldOptions.columns=2\" line3055=\"\" line3056=\"    //% blockId=&quot;PIR&quot; block=&quot;人体红外传感器 %pirpin 检测到运动&quot;\" line3057=\"\" line3058=\"\" line3059=\"\" line3060=\"    //% subcategory=传感器 \" line3061=\"\" line3062=\"    export function pir(pirpin: Write_pin): number {\" line3063=\"\" line3064=\"        let pin48\" line3065=\"        let rt\" line3066=\"\" line3067=\"        if (pirpin == 1) {\" line3068=\"\" line3069=\"\" line3070=\"\" line3071=\"            pin48 = DigitalPin.P0;\" line3072=\"\" line3073=\"        }\" line3074=\"\" line3075=\"        if (pirpin == 2) {\" line3076=\"\" line3077=\"            pin48 = DigitalPin.P16;\" line3078=\"\" line3079=\"        }\" line3080=\"\" line3081=\"        if (pirpin == 3) {\" line3082=\"\" line3083=\"            pin48 = DigitalPin.P1;\" line3084=\"\" line3085=\"        }\" line3086=\"\" line3087=\"        if (pirpin == 4) {\" line3088=\"\" line3089=\"\" line3090=\"\" line3091=\"            pin48 = DigitalPin.P12;\" line3092=\"\" line3093=\"        }\" line3094=\"\" line3095=\"        if (pirpin == 5) {\" line3096=\"\" line3097=\"            pin48 = DigitalPin.P2;\" line3098=\"\" line3099=\"        }\" line3100=\"\" line3101=\"        if (pirpin == 6) {\" line3102=\"\" line3103=\"            pin48 = DigitalPin.P8;\" line3104=\"\" line3105=\"        }\" line3106=\"\" line3107=\"\" line3108=\"\" line3109=\"        if (pins.digitalReadPin(pin48) == 1) {\" line3110=\"\" line3111=\"            rt = 0\" line3112=\"\" line3113=\"        }\" line3114=\"\" line3115=\"        else {\" line3116=\"\" line3117=\"            rt = 1\" line3118=\"\" line3119=\"        }\" line3120=\"        return rt\" line3121=\"\" line3122=\"    }\" line3123=\"\" line3124=\"\" line3125=\"    /////////摇杆////////////////////\" line3126=\"\" line3127=\"    export enum rocket {\" line3128=\"        //% block=&quot;X&quot;\" line3129=\"\" line3130=\"        x = 2,\" line3131=\"\" line3132=\"        //% block=&quot;Y&quot;\" line3133=\"\" line3134=\"        y = 1\" line3135=\"    }\" line3136=\"    export enum rock {\" line3137=\"        //% block=&quot;向上&quot;\" line3138=\"\" line3139=\"        orient1 = 2,\" line3140=\"\" line3141=\"        //% block=&quot;向下&quot;\" line3142=\"\" line3143=\"        orient2 = 1,\" line3144=\"\" line3145=\"        //% block=&quot;向左&quot;\" line3146=\"\" line3147=\"        orient3 = 4,\" line3148=\"\" line3149=\"        //% block=&quot;向右&quot;\" line3150=\"\" line3151=\"        orient4 = 3\" line3152=\"    }\" line3153=\"\" line3154=\"    //% weight=27\" line3155=\"\" line3156=\"    //% direction.fieldEditor=&quot;gridpicker&quot;\" line3157=\"\" line3158=\"    //% direction.fieldOptions.width=220\" line3159=\"\" line3160=\"    //% direction.fieldOptions.columns=2\" line3161=\"\" line3162=\"    //% blockId=&quot;ROCKET&quot; block=&quot;摇杆 %direction 方向&quot;\" line3163=\"\" line3164=\"    //% subcategory=传感器 \" line3165=\"\" line3166=\"    export function rocker(direction: rocket): number {\" line3167=\"\" line3168=\"        let GetBuff = pins.createBuffer(3)\" line3169=\"\" line3170=\"        GetBuff = pins.i2cReadBuffer(97, 3)\" line3171=\"\" line3172=\"        let re = GetBuff.getNumber(NumberFormat.Int8BE, direction)\" line3173=\"        re = -re\" line3174=\"        return re\" line3175=\"\" line3176=\"    }\" line3177=\"    //% weight=27\" line3178=\"\" line3179=\"    //% direction.fieldEditor=&quot;gridpicker&quot;\" line3180=\"\" line3181=\"    //% direction.fieldOptions.width=220\" line3182=\"\" line3183=\"    //% direction.fieldOptions.columns=2\" line3184=\"\" line3185=\"    //% blockId=&quot;ROCKETORI&quot; block=&quot;检测到摇杆 %orientation &quot;\" line3186=\"\" line3187=\"    //% subcategory=传感器 \" line3188=\"\" line3189=\"    export function rockerori(orientation: rock): boolean {\" line3190=\"\" line3191=\"        let GetBuff2 = pins.createBuffer(3)\" line3192=\"\" line3193=\"        GetBuff2 = pins.i2cReadBuffer(97, 3)\" line3194=\"        let ud = GetBuff2.getNumber(NumberFormat.Int8BE, 1)\" line3195=\"        let lr = GetBuff2.getNumber(NumberFormat.Int8BE, 2)\" line3196=\"        let flag\" line3197=\"        if (orientation == 1) {\" line3198=\"            if (ud &gt; 50)\" line3199=\"                flag = true\" line3200=\"            else\" line3201=\"                flag = false\" line3202=\"        }\" line3203=\"        if (orientation == 2) {\" line3204=\"            if (ud &lt; -50)\" line3205=\"                flag = true\" line3206=\"            else\" line3207=\"                flag = false\" line3208=\"        }\" line3209=\"        if (orientation == 3) {\" line3210=\"            if (lr &lt; -50)\" line3211=\"                flag = true\" line3212=\"            else\" line3213=\"                flag = false\" line3214=\"        }\" line3215=\"        if (orientation == 4) {\" line3216=\"            if (lr &gt; 50)\" line3217=\"                flag = true\" line3218=\"            else\" line3219=\"                flag = false\" line3220=\"        }\" line3221=\"        return flag\" line3222=\"\" line3223=\"    }\" line3224=\"\" line3225=\"    /////////////////射频模块//////////////////////////////////\" line3226=\"\" line3227=\"    const RFID_ADDR = 0x6B\" line3228=\"\" line3229=\"    const RFID_VERSION = 0x00\" line3230=\"\" line3231=\"    const RFID_READCMD = 0x01\" line3232=\"\" line3233=\"    const RFID_READOUT = 0x02\" line3234=\"\" line3235=\"    const RFID_WRITE = 0x03\" line3236=\"\" line3237=\"    const RFID_STOP = 0x04\" line3238=\"\" line3239=\"    const RFID_STATUS = 0x05\" line3240=\"\" line3241=\"    const RFID_UUID = 0x06\" line3242=\"\" line3243=\"    enum RfidStat {\" line3244=\"\" line3245=\"        IDLE = 0,\" line3246=\"\" line3247=\"        SELECTED = 1,\" line3248=\"\" line3249=\"        READ_PENDING = 2,\" line3250=\"\" line3251=\"        READ_SUCC = 3,\" line3252=\"\" line3253=\"        WRITE_SUCC = 4\" line3254=\"\" line3255=\"    }\" line3256=\"\" line3257=\"    export enum RfidSector {\" line3258=\"\" line3259=\"        S1 = 1,\" line3260=\"\" line3261=\"        S2 = 2,\" line3262=\"\" line3263=\"        S3 = 3,\" line3264=\"\" line3265=\"        S4 = 4,\" line3266=\"\" line3267=\"        S5 = 5,\" line3268=\"\" line3269=\"        S6 = 6,\" line3270=\"\" line3271=\"        S7 = 7,\" line3272=\"\" line3273=\"        S8 = 8,\" line3274=\"\" line3275=\"        S9 = 9,\" line3276=\"\" line3277=\"        S10 = 10,\" line3278=\"\" line3279=\"        S11 = 11,\" line3280=\"\" line3281=\"        S12 = 12,\" line3282=\"\" line3283=\"        S13 = 13,\" line3284=\"\" line3285=\"        S14 = 14,\" line3286=\"\" line3287=\"        S15 = 15\" line3288=\"\" line3289=\"    }\" line3290=\"\" line3291=\"\" line3292=\"\" line3293=\"    export enum RfidBlock {\" line3294=\"\" line3295=\"        B0 = 0,\" line3296=\"\" line3297=\"        B1 = 1,\" line3298=\"\" line3299=\"        B2 = 2\" line3300=\"\" line3301=\"    }\" line3302=\"\" line3303=\"    type EvtAct = () =&gt; void;\" line3304=\"\" line3305=\"    let onRfidPresent: EvtAct = null;\" line3306=\"\" line3307=\"\" line3308=\"\" line3309=\"\" line3310=\"\" line3311=\"    function i2ccmd(addr: number, value: number) {\" line3312=\"\" line3313=\"        let buf2 = pins.createBuffer(1)\" line3314=\"\" line3315=\"        buf2[0] = value\" line3316=\"\" line3317=\"        pins.i2cWriteBuffer(addr, buf2)\" line3318=\"\" line3319=\"    }\" line3320=\"\" line3321=\"\" line3322=\"\" line3323=\"    //% blockId=powerbrick_rfidprobe block=&quot;RFID 开始检测&quot;\" line3324=\"\" line3325=\"    //% weight=26\" line3326=\"\" line3327=\"    //% group=&quot;RFID&quot; \" line3328=\"\" line3329=\"    //% subcategory=传感器\" line3330=\"\" line3331=\"    export function RfidProbe(): void {\" line3332=\"\" line3333=\"        let stat = i2cread(RFID_ADDR, RFID_STATUS);\" line3334=\"\" line3335=\"        if (stat == 1) {\" line3336=\"\" line3337=\"            if (onRfidPresent) {\" line3338=\"\" line3339=\"                onRfidPresent();\" line3340=\"\" line3341=\"                RfidStop();\" line3342=\"\" line3343=\"            }\" line3344=\"\" line3345=\"        }\" line3346=\"\" line3347=\"    }\" line3348=\"\" line3349=\"\" line3350=\"\" line3351=\"    //% blockId=powerbrick_onrfidpresent block=&quot;RFID 检测到卡片并等待&quot;\" line3352=\"\" line3353=\"    //% weight=26\" line3354=\"\" line3355=\"    //% group=&quot;RFID&quot; \" line3356=\"\" line3357=\"    //% subcategory=传感器\" line3358=\"\" line3359=\"    export function RfidPresent(handler: () =&gt; void): void {\" line3360=\"\" line3361=\"        onRfidPresent = handler;\" line3362=\"\" line3363=\"    }\" line3364=\"\" line3365=\"\" line3366=\"\" line3367=\"    //% blockId=powerbrick_rfiduuid block=&quot;RFID 读取卡号&quot;\" line3368=\"\" line3369=\"    //% weight=26\" line3370=\"\" line3371=\"    //% group=&quot;RFID&quot;\" line3372=\"\" line3373=\"    //% subcategory=传感器\" line3374=\"\" line3375=\"    export function RfidUUID(): string {\" line3376=\"\" line3377=\"        pins.i2cWriteNumber(RFID_ADDR, RFID_UUID, NumberFormat.UInt8BE);\" line3378=\"\" line3379=\"        let uuid = pins.i2cReadBuffer(RFID_ADDR, 4)\" line3380=\"\" line3381=\"        let uuidReverse = pins.createBuffer(4)\" line3382=\"\" line3383=\"        // reverse byte order to micropython type~\" line3384=\"\" line3385=\"        uuidReverse[0] = uuid[3]\" line3386=\"\" line3387=\"        uuidReverse[1] = uuid[2]\" line3388=\"\" line3389=\"        uuidReverse[2] = uuid[1]\" line3390=\"\" line3391=\"        uuidReverse[3] = uuid[0]\" line3392=\"\" line3393=\"        return uuidReverse.toHex();\" line3394=\"\" line3395=\"    }\" line3396=\"\" line3397=\"\" line3398=\"\" line3399=\"    //% blockId=powerbrick_rfidwrite block=&quot;RFID 向区|%sector 块|%block 写入文本|%txt&quot;\" line3400=\"\" line3401=\"    //% weight=26\" line3402=\"\" line3403=\"    //% group=&quot;RFID&quot; \" line3404=\"\" line3405=\"    //% subcategory=传感器\" line3406=\"\" line3407=\"    export function RfidWrite(sector: RfidSector, block: RfidBlock, txt: string): void {\" line3408=\"\" line3409=\"        let buf3 = pins.createBuffer(19)\" line3410=\"\" line3411=\"        buf3[0] = RFID_WRITE\" line3412=\"\" line3413=\"        buf3[1] = sector\" line3414=\"\" line3415=\"        buf3[2] = block\" line3416=\"\" line3417=\"        let len = txt.length\" line3418=\"\" line3419=\"        if (len &gt; 16) len = 16\" line3420=\"\" line3421=\"        for (let l = 0; l &lt; len; l++) {\" line3422=\"\" line3423=\"            buf3[3 + l] = txt.charCodeAt(l)\" line3424=\"\" line3425=\"        }\" line3426=\"\" line3427=\"        pins.i2cWriteBuffer(RFID_ADDR, buf3)\" line3428=\"\" line3429=\"        basic.pause(100)\" line3430=\"\" line3431=\"    }\" line3432=\"\" line3433=\"\" line3434=\"\" line3435=\"    //% blockId=powerbrick_rfidread block=&quot;RFID 读区|%sector 块|%block的内容&quot;\" line3436=\"\" line3437=\"    //% weight=26\" line3438=\"\" line3439=\"    //% group=&quot;RFID&quot; \" line3440=\"\" line3441=\"    //% subcategory=传感器\" line3442=\"\" line3443=\"    export function RfidRead(sector: RfidSector, block: RfidBlock): string {\" line3444=\"\" line3445=\"        let retry: number = 5;\" line3446=\"\" line3447=\"        let buf4 = pins.createBuffer(3)\" line3448=\"\" line3449=\"        buf4[0] = RFID_READCMD\" line3450=\"\" line3451=\"        buf4[1] = sector\" line3452=\"\" line3453=\"        buf4[2] = block\" line3454=\"\" line3455=\"        pins.i2cWriteBuffer(RFID_ADDR, buf4)\" line3456=\"\" line3457=\"        while (retry) {\" line3458=\"\" line3459=\"            basic.pause(100);\" line3460=\"\" line3461=\"            let stat2 = i2cread(RFID_ADDR, RFID_STATUS);\" line3462=\"\" line3463=\"            if (stat2 == RfidStat.READ_SUCC) {\" line3464=\"\" line3465=\"                let ret = '';\" line3466=\"\" line3467=\"                pins.i2cWriteNumber(RFID_ADDR, RFID_READOUT, NumberFormat.UInt8BE);\" line3468=\"\" line3469=\"                let rxbuf = pins.i2cReadBuffer(RFID_ADDR, 16)\" line3470=\"\" line3471=\"                for (let m = 0; m &lt; 16; m++) {\" line3472=\"\" line3473=\"                    if (rxbuf[m] &gt;= 0x20 &amp;&amp; rxbuf[m] &lt; 0x7f) {\" line3474=\"\" line3475=\"                        ret += String.fromCharCode(rxbuf[m]) // valid ascii\" line3476=\"\" line3477=\"                    }\" line3478=\"\" line3479=\"                }\" line3480=\"\" line3481=\"                return ret;\" line3482=\"\" line3483=\"            }\" line3484=\"\" line3485=\"            retry--;\" line3486=\"\" line3487=\"        }\" line3488=\"\" line3489=\"        return '';\" line3490=\"\" line3491=\"    }\" line3492=\"\" line3493=\"\" line3494=\"\" line3495=\"\" line3496=\"\" line3497=\"    function RfidStop(): void {\" line3498=\"\" line3499=\"        let buf5 = pins.createBuffer(1)\" line3500=\"\" line3501=\"        buf5[0] = RFID_STOP\" line3502=\"\" line3503=\"        pins.i2cWriteBuffer(RFID_ADDR, buf5)\" line3504=\"\" line3505=\"    }\" line3506=\"\" line3507=\"\" line3508=\"\" line3509=\"\" line3510=\"\" line3511=\"\" line3512=\"\" line3513=\"\" line3514=\"\" line3515=\"    ////////////////执行器/////////////////////////////////////\" line3516=\"\" line3517=\"\" line3518=\"\" line3519=\"\" line3520=\"\" line3521=\"\" line3522=\"\" line3523=\"\" line3524=\"\" line3525=\"\" line3526=\"\" line3527=\"\" line3528=\"\" line3529=\"    export enum enPos {\" line3530=\"\" line3531=\"        //% blockId=&quot;forward&quot; block=&quot;前进&quot;\" line3532=\"\" line3533=\"        forward = 1,\" line3534=\"\" line3535=\"        //% blockId=&quot;stop&quot; block=&quot;后退&quot;\" line3536=\"\" line3537=\"        stop = 2\" line3538=\"\" line3539=\"    }\" line3540=\"\" line3541=\"    export enum enMotorcolor {\" line3542=\"        //% block=&quot;红&quot;\" line3543=\"\" line3544=\"        red = 81,\" line3545=\"\" line3546=\"        //% block=&quot;绿&quot;\" line3547=\"\" line3548=\"        blue = 82,\" line3549=\"\" line3550=\"        //% block=&quot;蓝&quot;\" line3551=\"\" line3552=\"        green = 83,\" line3553=\"\" line3554=\"        //% block=&quot;黄&quot;\" line3555=\"\" line3556=\"        yellow = 84\" line3557=\"\" line3558=\"    }\" line3559=\"\" line3560=\"    export enum enServo {\" line3561=\"        S1 = 0,\" line3562=\"        S2,\" line3563=\"        S3,\" line3564=\"        S4\" line3565=\"    }\" line3566=\"\" line3567=\"\" line3568=\"\" line3569=\"    export enum enMotors {\" line3570=\"\" line3571=\"\" line3572=\"\" line3573=\"        M2 = 10,\" line3574=\"\" line3575=\"        M3 = 12,\" line3576=\"\" line3577=\"        M1 = 8,\" line3578=\"\" line3579=\"        M4 = 14\" line3580=\"\" line3581=\"    }\" line3582=\"\" line3583=\"\" line3584=\"    const PCA9685_ADD = 0x40\" line3585=\"\" line3586=\"    const MODE1 = 0x00\" line3587=\"\" line3588=\"    const SUBADR1 = 0x02\" line3589=\"\" line3590=\"    const SUBADR2 = 0x03\" line3591=\"\" line3592=\"    const SUBADR3 = 0x04\" line3593=\"\" line3594=\"    const PRESCALE = 0xFE\" line3595=\"\" line3596=\"    const LED0_ON_L = 0x06\" line3597=\"\" line3598=\"    const LED0_ON_H = 0x07\" line3599=\"\" line3600=\"    const LED0_OFF_L = 0x08\" line3601=\"\" line3602=\"    const LED0_OFF_H = 0x09\" line3603=\"\" line3604=\"    const ALL_LED_ON_L = 0xFA\" line3605=\"\" line3606=\"    const ALL_LED_ON_H = 0xFB\" line3607=\"\" line3608=\"    const ALL_LED_OFF_L = 0xFC\" line3609=\"\" line3610=\"    const ALL_LED_OFF_H = 0xFD\" line3611=\"\" line3612=\"\" line3613=\"\" line3614=\"    const STP_CHA_L = 2047\" line3615=\"\" line3616=\"    const STP_CHA_H = 4095\" line3617=\"\" line3618=\"\" line3619=\"\" line3620=\"    const STP_CHB_L = 1\" line3621=\"\" line3622=\"    const STP_CHB_H = 2047\" line3623=\"\" line3624=\"\" line3625=\"\" line3626=\"    const STP_CHC_L = 1023\" line3627=\"\" line3628=\"    const STP_CHC_H = 3071\" line3629=\"\" line3630=\"\" line3631=\"\" line3632=\"    const STP_CHD_L = 3071\" line3633=\"\" line3634=\"    const STP_CHD_H = 1023\" line3635=\"\" line3636=\"\" line3637=\"\" line3638=\"    let initialized = false\" line3639=\"\" line3640=\"    let caraddress1 = 81\" line3641=\"    let caraddress2 = 82\" line3642=\"\" line3643=\"\" line3644=\"\" line3645=\"    function i2cwrite(addr: number, reg: number, value: number) {\" line3646=\"\" line3647=\"        let buf6 = pins.createBuffer(2)\" line3648=\"\" line3649=\"        buf6[0] = reg\" line3650=\"\" line3651=\"        buf6[1] = value\" line3652=\"\" line3653=\"        pins.i2cWriteBuffer(addr, buf6)\" line3654=\"\" line3655=\"    }\" line3656=\"\" line3657=\"\" line3658=\"\" line3659=\"    function i2cread(addr: number, reg: number) {\" line3660=\"\" line3661=\"        pins.i2cWriteNumber(addr, reg, NumberFormat.UInt8BE);\" line3662=\"\" line3663=\"        let val = pins.i2cReadNumber(addr, NumberFormat.UInt8BE);\" line3664=\"\" line3665=\"        return val;\" line3666=\"\" line3667=\"    }\" line3668=\"\" line3669=\"\" line3670=\"\" line3671=\"    function initPCA9685(): void {\" line3672=\"        i2cwrite(PCA9685_ADD, MODE1, 0x00)\" line3673=\"        setFreq(50);\" line3674=\"        initialized = true\" line3675=\"    }\" line3676=\"\" line3677=\"    function setFreq(freq: number): void {\" line3678=\"        // Constrain the frequency\" line3679=\"        let prescaleval = 25000000;\" line3680=\"        prescaleval /= 4096;\" line3681=\"        prescaleval /= freq;\" line3682=\"        prescaleval -= 1;\" line3683=\"        let prescale = prescaleval; //Math.Floor(prescaleval + 0.5);\" line3684=\"        let oldmode = i2cread(PCA9685_ADD, MODE1);\" line3685=\"        let newmode = (oldmode &amp; 0x7F) | 0x10; // sleep\" line3686=\"        i2cwrite(PCA9685_ADD, MODE1, newmode); // go to sleep\" line3687=\"        i2cwrite(PCA9685_ADD, PRESCALE, prescale); // set the prescaler\" line3688=\"        i2cwrite(PCA9685_ADD, MODE1, oldmode);\" line3689=\"        control.waitMicros(5000);\" line3690=\"        i2cwrite(PCA9685_ADD, MODE1, oldmode | 0xa1);\" line3691=\"    }\" line3692=\"\" line3693=\"\" line3694=\"    function setPwm(channel: number, on: number, off: number): void {\" line3695=\"        if (channel &lt; 0 || channel &gt; 15)\" line3696=\"            return;\" line3697=\"        if (!initialized) {\" line3698=\"            initPCA9685();\" line3699=\"        }\" line3700=\"        let buf22 = pins.createBuffer(5);\" line3701=\"        buf22[0] = LED0_ON_L + 4 * channel;\" line3702=\"        buf22[1] = on &amp; 0xff;\" line3703=\"        buf22[2] = (on &gt;&gt; 8) &amp; 0xff;\" line3704=\"        buf22[3] = off &amp; 0xff;\" line3705=\"        buf22[4] = (off &gt;&gt; 8) &amp; 0xff;\" line3706=\"        pins.i2cWriteBuffer(PCA9685_ADD, buf22);\" line3707=\"    }\" line3708=\"\" line3709=\"\" line3710=\"\" line3711=\"\" line3712=\"    //% blockId=SuperBit_MotorRun \" line3713=\"\" line3714=\"    //% weight=27\" line3715=\"\" line3716=\"    //% index.fieldEditor=&quot;gridpicker&quot;\" line3717=\"\" line3718=\"    //% index.fieldOptions.width=220\" line3719=\"\" line3720=\"    //% index.fieldOptions.columns=2\" line3721=\"\" line3722=\"    //% block=&quot;电机|%index|速度(-255~255) %speed&quot;\" line3723=\"\" line3724=\"    //% speed.min=-255 speed.max=255\" line3725=\"\" line3726=\"    //% subcategory=执行器\" line3727=\"\" line3728=\"    export function MotorRun(index: enMotors, speed: number): void {\" line3729=\"\" line3730=\"        if (!initialized) {\" line3731=\"\" line3732=\"            initPCA9685()\" line3733=\"\" line3734=\"        }\" line3735=\"\" line3736=\"        speed = speed * 16; // map 255 to 4096\" line3737=\"\" line3738=\"        if (speed &gt;= 4096) {\" line3739=\"\" line3740=\"            speed = 4095\" line3741=\"\" line3742=\"        }\" line3743=\"\" line3744=\"        if (speed &lt;= -4096) {\" line3745=\"\" line3746=\"            speed = -4095\" line3747=\"\" line3748=\"        }\" line3749=\"\" line3750=\"\" line3751=\"\" line3752=\"        let a = index\" line3753=\"\" line3754=\"        let b = index + 1\" line3755=\"\" line3756=\"\" line3757=\"\" line3758=\"        if (a &gt; 10) {\" line3759=\"\" line3760=\"            if (speed &gt;= 0) {\" line3761=\"\" line3762=\"                setPwm(a, 0, speed)\" line3763=\"\" line3764=\"                setPwm(b, 0, 0)\" line3765=\"\" line3766=\"            } else {\" line3767=\"\" line3768=\"                setPwm(a, 0, 0)\" line3769=\"\" line3770=\"                setPwm(b, 0, -speed)\" line3771=\"\" line3772=\"            }\" line3773=\"\" line3774=\"        }\" line3775=\"\" line3776=\"        else {\" line3777=\"\" line3778=\"            if (speed &gt;= 0) {\" line3779=\"\" line3780=\"                setPwm(b, 0, speed)\" line3781=\"\" line3782=\"                setPwm(a, 0, 0)\" line3783=\"\" line3784=\"            } else {\" line3785=\"\" line3786=\"                setPwm(b, 0, 0)\" line3787=\"\" line3788=\"                setPwm(a, 0, -speed)\" line3789=\"\" line3790=\"            }\" line3791=\"\" line3792=\"        }\" line3793=\"\" line3794=\"    }\" line3795=\"    //% blockId=SuperBit_runMotor block=&quot;|%motoraddress|电机以|%speed|速度转动&quot;\" line3796=\"\" line3797=\"    //% speed.min=-100 speed.max=100\" line3798=\"\" line3799=\"    //% parts=&quot;SuperBit_runMotor&quot; subcategory=执行器 group=&quot;伺服电机&quot;\" line3800=\"\" line3801=\"    export function runMotor(motoraddress: enMotorcolor, speed: number): void {\" line3802=\"        speed = speed / 2\" line3803=\"\" line3804=\"        let speed_Buff\" line3805=\"\" line3806=\"        if (speed &lt; 0) {\" line3807=\"\" line3808=\"            speed = -speed\" line3809=\"\" line3810=\"            speed_Buff = (~speed) + 1\" line3811=\"\" line3812=\"            speed_Buff = speed_Buff | 0x80\" line3813=\"\" line3814=\"        }\" line3815=\"\" line3816=\"        else {\" line3817=\"\" line3818=\"            speed_Buff = speed\" line3819=\"\" line3820=\"        }\" line3821=\"\" line3822=\"        let SetBuff = pins.createBuffer(4)\" line3823=\"\" line3824=\"        SetBuff.setNumber(NumberFormat.UInt8BE, 0, 0x11)\" line3825=\"\" line3826=\"        SetBuff.setNumber(NumberFormat.UInt8BE, 1, speed_Buff)\" line3827=\"\" line3828=\"        SetBuff.setNumber(NumberFormat.UInt8BE, 2, 0)\" line3829=\"\" line3830=\"        SetBuff.setNumber(NumberFormat.UInt8BE, 3, 0)\" line3831=\"\" line3832=\"        pins.i2cWriteBuffer(motoraddress, SetBuff)\" line3833=\"\" line3834=\"\" line3835=\"    }\" line3836=\"    //% blockId=&quot;writemotorlocation&quot; block=&quot;|%motoraddress|电机以|%speed|速度转到|%location|的位置&quot;\" line3837=\"\" line3838=\"    //% speed.min=0 speed.max=100\" line3839=\"\" line3840=\"    //% location.min=-360 location.max=360\" line3841=\"\" line3842=\"    //% parts=&quot;writemotorlocation&quot; subcategory=执行器 group=&quot;伺服电机&quot;\" line3843=\"\" line3844=\"    export function Writemotorlocation(motoraddress: enMotorcolor, speed: number, location: number): void {\" line3845=\"\" line3846=\"        speed = speed / 2\" line3847=\"\" line3848=\"        let speed_Buff2\" line3849=\"\" line3850=\"        if (speed &lt; 0) {\" line3851=\"\" line3852=\"            speed = -speed\" line3853=\"\" line3854=\"            speed_Buff2 = (~speed) + 1\" line3855=\"\" line3856=\"            speed_Buff2 = speed_Buff2 | 0x80\" line3857=\"\" line3858=\"        }\" line3859=\"        else {\" line3860=\"\" line3861=\"            speed_Buff2 = speed\" line3862=\"\" line3863=\"        }\" line3864=\"\" line3865=\"        let location_Buff2\" line3866=\"\" line3867=\"        if (location &lt; 0) {\" line3868=\"\" line3869=\"            location = -location\" line3870=\"\" line3871=\"            location_Buff2 = (~location) + 1\" line3872=\"\" line3873=\"            location_Buff2 = location_Buff2 | 0x8000\" line3874=\"\" line3875=\"        }\" line3876=\"\" line3877=\"        else {\" line3878=\"\" line3879=\"            location_Buff2 = location\" line3880=\"\" line3881=\"        }\" line3882=\"        let SetBuff2 = pins.createBuffer(4)\" line3883=\"\" line3884=\"        SetBuff2.setNumber(NumberFormat.UInt8BE, 0, 0x3)\" line3885=\"\" line3886=\"        SetBuff2.setNumber(NumberFormat.UInt8BE, 1, speed_Buff2)\" line3887=\"\" line3888=\"        SetBuff2.setNumber(NumberFormat.UInt8BE, 2, location_Buff2 &gt;&gt; 8)\" line3889=\"\" line3890=\"        SetBuff2.setNumber(NumberFormat.UInt8BE, 3, location_Buff2)\" line3891=\"        pins.i2cWriteBuffer(motoraddress, SetBuff2)\" line3892=\"\" line3893=\"\" line3894=\"        let GetBuff3 = pins.createBuffer(6)\" line3895=\"\" line3896=\"\" line3897=\"        GetBuff3 = pins.i2cReadBuffer(motoraddress, 6)\" line3898=\"\" line3899=\"        let flag2 = GetBuff3.getNumber(NumberFormat.Int8BE, 5);\" line3900=\"\" line3901=\"        while (flag2 != 3) {\" line3902=\"            GetBuff3 = pins.i2cReadBuffer(motoraddress, 6)\" line3903=\"            flag2 = GetBuff3.getNumber(NumberFormat.Int8BE, 5)\" line3904=\"\" line3905=\"\" line3906=\"        }\" line3907=\"\" line3908=\"        while (flag2 != 11) {\" line3909=\"            GetBuff3 = pins.i2cReadBuffer(motoraddress, 6)\" line3910=\"            flag2 = GetBuff3.getNumber(NumberFormat.Int8BE, 5);\" line3911=\"\" line3912=\"        }\" line3913=\"\" line3914=\"\" line3915=\"    }\" line3916=\"\" line3917=\"    //% blockId=&quot;writemotorrelativelocation&quot; block=&quot;|%motoraddress|电机以|%speed|速度转|%location|度&quot;\" line3918=\"\" line3919=\"    //% speed.min=-100 speed.max=100\" line3920=\"    //% location.min=0 \" line3921=\"    //% parts=&quot;writemotorrelativelocation&quot; subcategory=执行器 group=&quot;伺服电机&quot;\" line3922=\"\" line3923=\"    export function Writemotorrelativelocation(motoraddress: enMotorcolor, speed: number, location: number): void {\" line3924=\"\" line3925=\"        speed = speed / 2\" line3926=\"\" line3927=\"        let location_Buff22\" line3928=\"\" line3929=\"        if (speed &lt; 0) {\" line3930=\"\" line3931=\"            speed = -speed\" line3932=\"\" line3933=\"            location_Buff22 = (~location) + 1\" line3934=\"\" line3935=\"            location_Buff22 = location_Buff22 | 0x8000\" line3936=\"\" line3937=\"        }\" line3938=\"\" line3939=\"        else {\" line3940=\"            speed = speed\" line3941=\"\" line3942=\"            location_Buff22 = location\" line3943=\"\" line3944=\"        }\" line3945=\"\" line3946=\"        let SetBuff22 = pins.createBuffer(4)\" line3947=\"\" line3948=\"        SetBuff22.setNumber(NumberFormat.UInt8BE, 0, 0x4)\" line3949=\"\" line3950=\"        SetBuff22.setNumber(NumberFormat.UInt8BE, 1, speed)\" line3951=\"\" line3952=\"        SetBuff22.setNumber(NumberFormat.UInt8BE, 2, location_Buff22 &gt;&gt; 8)\" line3953=\"\" line3954=\"        SetBuff22.setNumber(NumberFormat.UInt8BE, 3, location_Buff22)\" line3955=\"        let GetBuff4 = pins.createBuffer(6)\" line3956=\"        let flag3 = 0\" line3957=\"\" line3958=\"        pins.i2cWriteBuffer(motoraddress, SetBuff22)\" line3959=\"        while (flag3 != 4) {\" line3960=\"            GetBuff4 = pins.i2cReadBuffer(motoraddress, 6)\" line3961=\"            flag3 = GetBuff4.getNumber(NumberFormat.Int8BE, 5)\" line3962=\"        }\" line3963=\"\" line3964=\"        while (flag3 != 11) {\" line3965=\"            GetBuff4 = pins.i2cReadBuffer(motoraddress, 6)\" line3966=\"            flag3 = GetBuff4.getNumber(NumberFormat.Int8BE, 5)\" line3967=\"        }\" line3968=\"    }\" line3969=\"    //% blockId=&quot;writemotorrelativetime&quot; block=&quot;|%motoraddress|电机以|%speed|速度转|%second|秒&quot;\" line3970=\"\" line3971=\"    //% speed.min=-100 speed.max=100\" line3972=\"\" line3973=\"    //% parts=&quot;writemotorrelativetime&quot; subcategory=执行器 group=&quot;伺服电机&quot;\" line3974=\"\" line3975=\"    export function Writemotorrelativetime(motoraddress: enMotorcolor, speed: number, time: number): void {\" line3976=\"\" line3977=\"        speed = speed / 2\" line3978=\"\" line3979=\"        time = time * 10\" line3980=\"\" line3981=\"        let speed_Buff3\" line3982=\"\" line3983=\"        if (speed &lt; 0) {\" line3984=\"\" line3985=\"            speed = -speed\" line3986=\"\" line3987=\"            speed_Buff3 = (~speed) + 1\" line3988=\"\" line3989=\"            speed_Buff3 = speed_Buff3 | 0x80\" line3990=\"\" line3991=\"        }\" line3992=\"\" line3993=\"        else {\" line3994=\"\" line3995=\"            speed_Buff3 = speed\" line3996=\"\" line3997=\"        }\" line3998=\"        let SetBuff222 = pins.createBuffer(4)\" line3999=\"\" line4000=\"        SetBuff222.setNumber(NumberFormat.UInt8BE, 0, 0x12)\" line4001=\"\" line4002=\"        SetBuff222.setNumber(NumberFormat.UInt8BE, 1, speed_Buff3)\" line4003=\"\" line4004=\"        SetBuff222.setNumber(NumberFormat.UInt8BE, 2, time &gt;&gt; 8)\" line4005=\"\" line4006=\"        SetBuff222.setNumber(NumberFormat.UInt8BE, 3, time)\" line4007=\"        let flag4 = 0\" line4008=\"        pins.i2cWriteBuffer(motoraddress, SetBuff222)\" line4009=\"        while (flag4 != 7) {\" line4010=\"            let GetBuff5 = pins.i2cReadBuffer(motoraddress, 6)\" line4011=\"            flag4 = GetBuff5.getNumber(NumberFormat.Int8BE, 5);\" line4012=\"\" line4013=\"        }\" line4014=\"        while (flag4 != 11) {\" line4015=\"            let GetBuff6 = pins.i2cReadBuffer(motoraddress, 6)\" line4016=\"            flag4 = GetBuff6.getNumber(NumberFormat.Int8BE, 5);\" line4017=\"\" line4018=\"\" line4019=\"        }\" line4020=\"\" line4021=\"\" line4022=\"    }\" line4023=\"\" line4024=\"    //% blockId=SuperBit_runDMotor block=&quot;双电机以|%speed1| |%speed2|速度转动&quot;\" line4025=\"\" line4026=\"    //% speed1.min=-100 speed1.max=100\" line4027=\"\" line4028=\"    //% speed2.min=-100 speed2.max=100\" line4029=\"\" line4030=\"    //% parts=&quot;SuperBit_runDMotor&quot; subcategory=执行器 group=&quot;伺服电机&quot;\" line4031=\"\" line4032=\"    export function runDMotor(speed1: number, speed2: number): void {\" line4033=\"\" line4034=\"        speed1 = -speed1 / 2\" line4035=\"\" line4036=\"        speed2 = speed2 / 2\" line4037=\"\" line4038=\"        let speed_Buff1\" line4039=\"\" line4040=\"        if (speed1 &lt; 0) {\" line4041=\"\" line4042=\"            speed1 = -speed1\" line4043=\"\" line4044=\"            speed_Buff1 = (~speed1) + 1\" line4045=\"\" line4046=\"            speed_Buff1 = speed_Buff1 | 0x80\" line4047=\"\" line4048=\"        }\" line4049=\"\" line4050=\"        else {\" line4051=\"\" line4052=\"            speed_Buff1 = speed1\" line4053=\"\" line4054=\"        }\" line4055=\"\" line4056=\"        let speed_Buff23\" line4057=\"\" line4058=\"        if (speed2 &lt; 0) {\" line4059=\"\" line4060=\"            speed2 = -speed2\" line4061=\"\" line4062=\"            speed_Buff23 = (~speed2) + 1\" line4063=\"\" line4064=\"            speed_Buff23 = speed_Buff23 | 0x80\" line4065=\"\" line4066=\"        }\" line4067=\"\" line4068=\"        else {\" line4069=\"\" line4070=\"            speed_Buff23 = speed2\" line4071=\"\" line4072=\"        }\" line4073=\"\" line4074=\"        let SetBuff3 = pins.createBuffer(4)\" line4075=\"        let SetBuffc = pins.createBuffer(4)\" line4076=\"\" line4077=\"\" line4078=\"        SetBuff3.setNumber(NumberFormat.UInt8BE, 0, 0x11)\" line4079=\"\" line4080=\"        SetBuff3.setNumber(NumberFormat.UInt8BE, 1, speed_Buff1)\" line4081=\"\" line4082=\"        SetBuff3.setNumber(NumberFormat.UInt8BE, 2, 0)\" line4083=\"\" line4084=\"        SetBuff3.setNumber(NumberFormat.UInt8BE, 3, 0)\" line4085=\"\" line4086=\"        pins.i2cWriteBuffer(caraddress1, SetBuff3)\" line4087=\"\" line4088=\"\" line4089=\"        SetBuffc.setNumber(NumberFormat.UInt8BE, 0, 0x11)\" line4090=\"\" line4091=\"        SetBuffc.setNumber(NumberFormat.UInt8BE, 1, speed_Buff23)\" line4092=\"\" line4093=\"        SetBuffc.setNumber(NumberFormat.UInt8BE, 2, 0)\" line4094=\"\" line4095=\"        SetBuffc.setNumber(NumberFormat.UInt8BE, 3, 0)\" line4096=\"\" line4097=\"        pins.i2cWriteBuffer(caraddress2, SetBuffc)\" line4098=\"\" line4099=\"    }\" line4100=\"    //% blockId=&quot;writeDmotorlocation&quot; block=&quot;双电机以|%speed1| |%speed2|速度转|%location|度&quot;\" line4101=\"\" line4102=\"    //% speed1.min=-100 speed1.max=100\" line4103=\"\" line4104=\"    //% speed2.min=-100 speed2.max=100\" line4105=\"    //% location.min=0 \" line4106=\"    //% parts=&quot;writeDmotorlocation&quot; subcategory=执行器 group=&quot;伺服电机&quot;\" line4107=\"\" line4108=\"    export function WriteDmotorlocation(speed1: number, speed2: number, location: number): void {\" line4109=\"\" line4110=\"        speed1 = -speed1 / 2\" line4111=\"\" line4112=\"        speed2 = speed2 / 2\" line4113=\"\" line4114=\"        let location1\" line4115=\"        let location_Buff1\" line4116=\"\" line4117=\"        let location2\" line4118=\"        let location_Buff23\" line4119=\"\" line4120=\"        location2 = ~location\" line4121=\"        location1 = ~location\" line4122=\"\" line4123=\"        if (speed2 &lt; 0) {\" line4124=\"\" line4125=\"            speed2 = -speed2\" line4126=\"\" line4127=\"            location_Buff23 = location2 + 1\" line4128=\"\" line4129=\"            location_Buff23 = location_Buff23 | 0x8000\" line4130=\"\" line4131=\"        }\" line4132=\"\" line4133=\"        else {\" line4134=\"\" line4135=\"            location_Buff23 = location\" line4136=\"\" line4137=\"        }\" line4138=\"\" line4139=\"\" line4140=\"\" line4141=\"        if (speed1 &lt; 0) {\" line4142=\"\" line4143=\"            speed1 = -speed1\" line4144=\"\" line4145=\"            location_Buff1 = location1 + 1\" line4146=\"\" line4147=\"            location_Buff1 = location_Buff1 | 0x8000\" line4148=\"\" line4149=\"        }\" line4150=\"\" line4151=\"        else {\" line4152=\"\" line4153=\"            location_Buff1 = location\" line4154=\"\" line4155=\"        }\" line4156=\"        if (speed1 == 0) {\" line4157=\"            location_Buff1 = 0\" line4158=\"        }\" line4159=\"\" line4160=\"        if (speed2 == 0) {\" line4161=\"            location_Buff23 = 0\" line4162=\"        }\" line4163=\"\" line4164=\"        let SetBuff23 = pins.createBuffer(4)\" line4165=\"        let SetBuff2c = pins.createBuffer(4)\" line4166=\"\" line4167=\"\" line4168=\"        SetBuff2c.setNumber(NumberFormat.UInt8BE, 0, 0x4)\" line4169=\"\" line4170=\"        SetBuff2c.setNumber(NumberFormat.UInt8BE, 1, speed2)\" line4171=\"\" line4172=\"        SetBuff2c.setNumber(NumberFormat.UInt8BE, 2, location_Buff23 &gt;&gt; 8)\" line4173=\"\" line4174=\"        SetBuff2c.setNumber(NumberFormat.UInt8BE, 3, location_Buff23)\" line4175=\"\" line4176=\"        SetBuff23.setNumber(NumberFormat.UInt8BE, 0, 0x4)\" line4177=\"\" line4178=\"        SetBuff23.setNumber(NumberFormat.UInt8BE, 1, speed1)\" line4179=\"\" line4180=\"        SetBuff23.setNumber(NumberFormat.UInt8BE, 2, location_Buff1 &gt;&gt; 8)\" line4181=\"\" line4182=\"        SetBuff23.setNumber(NumberFormat.UInt8BE, 3, location_Buff1)\" line4183=\"        //发送控制参数\" line4184=\"        pins.i2cWriteBuffer(caraddress1, SetBuff23)\" line4185=\"        pins.i2cWriteBuffer(caraddress2, SetBuff2c)\" line4186=\"        //接着读一次电机1\" line4187=\"        let GetBuff7 = pins.createBuffer(6)\" line4188=\"        GetBuff7 = pins.i2cReadBuffer(caraddress2, 6)\" line4189=\"        let flag5 = GetBuff7.getNumber(NumberFormat.Int8BE, 5)//获取了第6位\" line4190=\"        //接着读一次电机2\" line4191=\"        let GetBuff1 = pins.createBuffer(6)\" line4192=\"        GetBuff1 = pins.i2cReadBuffer(caraddress1, 6)\" line4193=\"        let flag1 = GetBuff1.getNumber(NumberFormat.Int8BE, 5)//获取了第6位\" line4194=\"        //4为正在运行\" line4195=\"        while (true) {//如果没有在运行，则一直读取\" line4196=\"\" line4197=\"            GetBuff7 = pins.i2cReadBuffer(caraddress2, 6)\" line4198=\"            flag5 = GetBuff7.getNumber(NumberFormat.Int8BE, 5)\" line4199=\"            GetBuff1 = pins.i2cReadBuffer(caraddress1, 6)\" line4200=\"            flag1 = GetBuff1.getNumber(NumberFormat.Int8BE, 5)\" line4201=\"            if ((flag1 == 4) || (flag5 == 4)) break;//当有一个电机转动起来的时候，就退出死循环\" line4202=\"\" line4203=\"\" line4204=\"        }\" line4205=\"        //11为运行结束\" line4206=\"        while (true) {\" line4207=\"\" line4208=\"            GetBuff7 = pins.i2cReadBuffer(caraddress2, 6)\" line4209=\"            flag5 = GetBuff7.getNumber(NumberFormat.Int8BE, 5)\" line4210=\"            GetBuff1 = pins.i2cReadBuffer(caraddress1, 6)\" line4211=\"            flag1 = GetBuff1.getNumber(NumberFormat.Int8BE, 5)\" line4212=\"            if ((flag1 == 11) &amp;&amp; (flag5 == 11)) break;//当有两个电机都执行完毕的时候，就退出死循环\" line4213=\"\" line4214=\"        }\" line4215=\"\" line4216=\"    }\" line4217=\"\" line4218=\"\" line4219=\"\" line4220=\"    //% blockId=SuperBit_DMotor block=&quot;左电机设置为|%motoraddress1|右电机设置为|%motoraddress2|&quot;\" line4221=\"\" line4222=\"    //% parts=&quot;SuperBit_DMotor&quot; subcategory=执行器 group=&quot;伺服电机&quot;\" line4223=\"\" line4224=\"    export function DMotor(motoraddress1: enMotorcolor, motoraddress2: enMotorcolor): void {\" line4225=\"        caraddress1 = motoraddress1\" line4226=\"\" line4227=\"        caraddress2 = motoraddress2\" line4228=\"\" line4229=\"    }\" line4230=\"\" line4231=\"\" line4232=\"    //% blockId=SuperBit_Servo4 block=&quot;舵机| %num|角度 %value&quot;\" line4233=\"    //% num.min=1 num.max=4 value.min=0 value.max=300\" line4234=\"    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=20\" line4235=\"    //%  subcategory=执行器 \" line4236=\"    export function Servo4(num: enServo, value: number): void {\" line4237=\"\" line4238=\"        // 50hz: 20,000 us\" line4239=\"        let us = (value * 1800 * 0.6 / 180 + 600); // 0.6 ~ 2.4\" line4240=\"        let pwm = us * 4096 / 20000;\" line4241=\"        setPwm(num, 0, pwm);\" line4242=\"\" line4243=\"    }\" line4244=\"\" line4245=\"    //% blockId=&quot;readmotorspeed&quot; block=&quot;读取|%motoraddress|电机的速度 &quot;\" line4246=\"\" line4247=\"    //% parts=&quot;readmotorspeed&quot; subcategory=执行器 group=&quot;伺服电机&quot;\" line4248=\"\" line4249=\"    export function Readmotorspeed(motoraddress: enMotorcolor): number {\" line4250=\"\" line4251=\"        let GetBuff8 = pins.createBuffer(6)\" line4252=\"\" line4253=\"        GetBuff8 = pins.i2cReadBuffer(motoraddress, 6)\" line4254=\"\" line4255=\"\" line4256=\"\" line4257=\"        return GetBuff8.getNumber(NumberFormat.Int8BE, 0);\" line4258=\"\" line4259=\"    }\" line4260=\"\" line4261=\"    //% blockId=&quot;readmotorlocation&quot; block=&quot;读取|%motoraddress|电机的位置&quot;\" line4262=\"\" line4263=\"    //% parts=&quot;readmotorlocation&quot; subcategory=执行器 group=&quot;伺服电机&quot;\" line4264=\"\" line4265=\"    export function Readmotorlocation(motoraddress: enMotorcolor): number {\" line4266=\"\" line4267=\"        let GetBuff22 = pins.createBuffer(6)\" line4268=\"\" line4269=\"        GetBuff22 = pins.i2cReadBuffer(motoraddress, 5)\" line4270=\"\" line4271=\"        let location_Buff\" line4272=\"\" line4273=\"        let This_location\" line4274=\"\" line4275=\"        location_Buff = (GetBuff22.getNumber(NumberFormat.Int8BE, 1) &lt;&lt; 8) + GetBuff22.getNumber(NumberFormat.Int8BE, 2)\" line4276=\"\" line4277=\"        if (location_Buff &amp; 0x0080) {\" line4278=\"\" line4279=\"            This_location = location_Buff + 0x0100\" line4280=\"\" line4281=\"        }\" line4282=\"\" line4283=\"        else {\" line4284=\"\" line4285=\"            This_location = location_Buff\" line4286=\"\" line4287=\"        }\" line4288=\"\" line4289=\"\" line4290=\"\" line4291=\"\" line4292=\"        return This_location;\" line4293=\"\" line4294=\"    }\" line4295=\"    //% blockId=&quot;laser_controller&quot; block=&quot;激光 %laserpin 切换至 %laserState || 激光 %intensity&quot;\" line4296=\"\" line4297=\"    //% laserState.shadow=&quot;toggleOnOff&quot;\" line4298=\"\" line4299=\"    //% weight=25\" line4300=\"\" line4301=\"    //% laserpin.fieldEditor=&quot;gridpicker&quot;\" line4302=\"\" line4303=\"    //% laserpin.fieldOptions.width=220\" line4304=\"\" line4305=\"    //% laserpin.fieldOptions.columns=2\" line4306=\"\" line4307=\"    //% intensity.min=0 intensity.max=1023\" line4308=\"\" line4309=\"    //% expandableArgumentMode=&quot;toggle&quot;\" line4310=\"\" line4311=\"    //% subcategory=执行器\" line4312=\"\" line4313=\"    export function laserController(laserpin: Write_pin, laserState: boolean, intensity: number = 1023): void {\" line4314=\"\" line4315=\"        let pin79\" line4316=\"\" line4317=\"        if (laserpin == 1) {\" line4318=\"\" line4319=\"\" line4320=\"\" line4321=\"            pin79 = AnalogPin.P0;\" line4322=\"\" line4323=\"        }\" line4324=\"\" line4325=\"        if (laserpin == 2) {\" line4326=\"\" line4327=\"            pin79 = AnalogPin.P16;\" line4328=\"\" line4329=\"        }\" line4330=\"\" line4331=\"        if (laserpin == 3) {\" line4332=\"\" line4333=\"            pin79 = AnalogPin.P1;\" line4334=\"\" line4335=\"        }\" line4336=\"\" line4337=\"        if (laserpin == 4) {\" line4338=\"\" line4339=\"\" line4340=\"\" line4341=\"            pin79 = AnalogPin.P12;\" line4342=\"\" line4343=\"        }\" line4344=\"\" line4345=\"        if (laserpin == 5) {\" line4346=\"\" line4347=\"            pin79 = AnalogPin.P2;\" line4348=\"\" line4349=\"        }\" line4350=\"\" line4351=\"        if (laserpin == 6) {\" line4352=\"\" line4353=\"            pin79 = AnalogPin.P8;\" line4354=\"\" line4355=\"        }\" line4356=\"\" line4357=\"        if (laserState) {\" line4358=\"\" line4359=\"            pins.analogSetPeriod(pin79, 1023);\" line4360=\"\" line4361=\"            pins.analogWritePin(pin79, Math.map(intensity, 0, 1023, 0, 1023));\" line4362=\"\" line4363=\"        }\" line4364=\"\" line4365=\"        else {\" line4366=\"\" line4367=\"            pins.analogWritePin(pin79, 0);\" line4368=\"\" line4369=\"            intensity = 0;\" line4370=\"\" line4371=\"        }\" line4372=\"\" line4373=\"    }\" line4374=\"\" line4375=\"\" line4376=\"\" line4377=\"    /**\" line4378=\"\" line4379=\"    * toggle fans\" line4380=\"\" line4381=\"    */\" line4382=\"\" line4383=\"    //% blockId=fans block=&quot;风扇 %fanpin 切换至 $fanstate || 速度 %speed&quot;\" line4384=\"\" line4385=\"    //% fanstate.shadow=&quot;toggleOnOff&quot;\" line4386=\"\" line4387=\"    //% weight=24\" line4388=\"\" line4389=\"    //% fanpin.fieldEditor=&quot;gridpicker&quot;\" line4390=\"\" line4391=\"    //% fanpin.fieldOptions.width=220\" line4392=\"\" line4393=\"    //% fanpin.fieldOptions.columns=1\" line4394=\"\" line4395=\"    //% speed.min=0 speed.max=1023\" line4396=\"\" line4397=\"    //% expandableArgumentMode=&quot;toggle&quot;\" line4398=\"\" line4399=\"    //% subcategory=执行器\" line4400=\"\" line4401=\"    export function motorFan(fanpin: Read_pin, fanstate: boolean, speed: number = 1023): void {\" line4402=\"\" line4403=\"        let pin3\" line4404=\"\" line4405=\"\" line4406=\"\" line4407=\"\" line4408=\"\" line4409=\"        if (fanpin == 1) {\" line4410=\"\" line4411=\"\" line4412=\"\" line4413=\"            pin3 = AnalogPin.P0;\" line4414=\"\" line4415=\"        }\" line4416=\"\" line4417=\"        if (fanpin == 2) {\" line4418=\"\" line4419=\"            pin3 = AnalogPin.P1;\" line4420=\"\" line4421=\"        }\" line4422=\"\" line4423=\"        if (fanpin == 3) {\" line4424=\"\" line4425=\"            pin3 = AnalogPin.P2;\" line4426=\"\" line4427=\"        }\" line4428=\"\" line4429=\"\" line4430=\"\" line4431=\"        if (fanstate) {\" line4432=\"\" line4433=\"            pins.analogSetPeriod(pin3, 1023);\" line4434=\"\" line4435=\"            pins.analogWritePin(pin3, Math.map(speed, 0, 1023, 0, 1023));\" line4436=\"\" line4437=\"        }\" line4438=\"\" line4439=\"        else {\" line4440=\"\" line4441=\"            pins.analogWritePin(pin3, 0);\" line4442=\"\" line4443=\"            speed = 0;\" line4444=\"\" line4445=\"        }\" line4446=\"\" line4447=\"\" line4448=\"\" line4449=\"    }\" line4450=\"\" line4451=\"\" line4452=\"\" line4453=\"    //% blockId=&quot;elecmagnet&quot; block=&quot;电磁铁 %elecpin 切换至 %magState || 磁力 %force&quot;\" line4454=\"\" line4455=\"    //% magState.shadow=&quot;toggleOnOff&quot;\" line4456=\"\" line4457=\"    //% weight=23\" line4458=\"\" line4459=\"    //% elecpin.fieldEditor=&quot;gridpicker&quot;\" line4460=\"\" line4461=\"    //% elecpin.fieldOptions.width=220\" line4462=\"\" line4463=\"    //% elecpin.fieldOptions.columns=2\" line4464=\"\" line4465=\"    //% force.min=0 force.max=1023\" line4466=\"\" line4467=\"    //% expandableArgumentMode=&quot;toggle&quot;\" line4468=\"\" line4469=\"    //% subcategory=执行器\" line4470=\"\" line4471=\"    export function elecmagnet(elecpin: Write_pin, magState: boolean, force: number = 1023): void {\" line4472=\"\" line4473=\"        let pin8\" line4474=\"\" line4475=\"        if (elecpin == 1) {\" line4476=\"\" line4477=\"\" line4478=\"\" line4479=\"            pin8 = AnalogPin.P0;\" line4480=\"\" line4481=\"        }\" line4482=\"\" line4483=\"        if (elecpin == 2) {\" line4484=\"\" line4485=\"            pin8 = AnalogPin.P16;\" line4486=\"\" line4487=\"        }\" line4488=\"\" line4489=\"        if (elecpin == 3) {\" line4490=\"\" line4491=\"            pin8 = AnalogPin.P1;\" line4492=\"\" line4493=\"        }\" line4494=\"\" line4495=\"        if (elecpin == 4) {\" line4496=\"\" line4497=\"\" line4498=\"\" line4499=\"            pin8 = AnalogPin.P12;\" line4500=\"\" line4501=\"        }\" line4502=\"\" line4503=\"        if (elecpin == 5) {\" line4504=\"\" line4505=\"            pin8 = AnalogPin.P2;\" line4506=\"\" line4507=\"        }\" line4508=\"\" line4509=\"        if (elecpin == 6) {\" line4510=\"\" line4511=\"            pin8 = AnalogPin.P8;\" line4512=\"\" line4513=\"        }\" line4514=\"\" line4515=\"\" line4516=\"\" line4517=\"        if (magState == true) {\" line4518=\"\" line4519=\"            pins.analogSetPeriod(pin8, 1023)\" line4520=\"\" line4521=\"            pins.analogWritePin(pin8, Math.map(force, 0, 1023, 0, 1023))\" line4522=\"\" line4523=\"        }\" line4524=\"\" line4525=\"        else {\" line4526=\"\" line4527=\"            pins.analogWritePin(pin8, 0)\" line4528=\"\" line4529=\"            force = 0\" line4530=\"\" line4531=\"        }\" line4532=\"\" line4533=\"    }\" line4534=\"\" line4535=\"\" line4536=\"\" line4537=\"    ////////////////////////////////////////////\" line4538=\"\" line4539=\"\" line4540=\"\" line4541=\"    /**\" line4542=\"   * toggle led\" line4543=\"   */\" line4544=\"    //% blockId=LEDR block=&quot;红色 LED %pin 切换到 $ledstate &quot;\" line4545=\"    //% ledstate.shadow=&quot;toggleOnOff&quot;\" line4546=\"    //% expandableArgumentMode=&quot;toggle&quot;\" line4547=\"    //% subcategory=执行器\" line4548=\"    export function ledRBrightness(pin: DigitalPin, ledstate: boolean): void {\" line4549=\"        if (ledstate) {\" line4550=\"            pins.digitalWritePin(pin, 0)\" line4551=\"        }\" line4552=\"        else {\" line4553=\"            pins.digitalWritePin(pin, 1)\" line4554=\"        }\" line4555=\"    }\" line4556=\"\" line4557=\"    /**\" line4558=\"    * toggle led\" line4559=\"    */\" line4560=\"    //% blockId=LEDG block=&quot;绿色 LED %pin 切换到 $ledstate &quot;\" line4561=\"    //% ledstate.shadow=&quot;toggleOnOff&quot;\" line4562=\"    //% expandableArgumentMode=&quot;toggle&quot;\" line4563=\"    //% subcategory=执行器\" line4564=\"    export function ledGBrightness(pin: DigitalPin, ledstate: boolean): void {\" line4565=\"        if (ledstate) {\" line4566=\"            pins.digitalWritePin(pin, 0)\" line4567=\"        }\" line4568=\"        else {\" line4569=\"            pins.digitalWritePin(pin, 1)\" line4570=\"        }\" line4571=\"    }\" line4572=\"\" line4573=\"    /**\" line4574=\"    * toggle led\" line4575=\"    */\" line4576=\"    //% blockId=LEDB block=&quot;蓝色 LED %pin 切换到 $ledstate &quot;\" line4577=\"    //% ledstate.shadow=&quot;toggleOnOff&quot;\" line4578=\"    //% expandableArgumentMode=&quot;toggle&quot;\" line4579=\"    //% subcategory=执行器\" line4580=\"    export function ledBBrightness(pin: DigitalPin, ledstate: boolean): void {\" line4581=\"        if (ledstate) {\" line4582=\"            pins.digitalWritePin(pin, 0)\" line4583=\"        }\" line4584=\"        else {\" line4585=\"            pins.digitalWritePin(pin, 1)\" line4586=\"        }\" line4587=\"    }\" line4588=\"\" line4589=\"    /**\" line4590=\"    * toggle led\" line4591=\"    */\" line4592=\"    //% blockId=LEDY block=&quot;黄色 LED %pin 切换到 $ledstate &quot;\" line4593=\"    //% ledstate.shadow=&quot;toggleOnOff&quot;\" line4594=\"    //% expandableArgumentMode=&quot;toggle&quot;\" line4595=\"    //% subcategory=执行器\" line4596=\"    export function ledYBrightness(pin: DigitalPin, ledstate: boolean): void {\" line4597=\"        if (ledstate) {\" line4598=\"            pins.digitalWritePin(pin, 0)\" line4599=\"        }\" line4600=\"        else {\" line4601=\"            pins.digitalWritePin(pin, 1)\" line4602=\"        }\" line4603=\"    }\" line4604=\"\" line4605=\"\" line4606=\"\" line4607=\"\" line4608=\"\" line4609=\"\" line4610=\"\" line4611=\"    enum LCS_Constants {\" line4612=\"\" line4613=\"        // Constants\" line4614=\"\" line4615=\"        ADDRESS = 0x29,\" line4616=\"\" line4617=\"        ID = 0x12, // Register should be equal to 0x44 for the TCS34721 or TCS34725, or 0x4D for the TCS34723 or TCS34727.\" line4618=\"\" line4619=\"\" line4620=\"\" line4621=\"        COMMAND_BIT = 0x80,\" line4622=\"\" line4623=\"\" line4624=\"\" line4625=\"        ENABLE = 0x00,\" line4626=\"\" line4627=\"        ENABLE_AIEN = 0x10, // RGBC Interrupt Enable\" line4628=\"\" line4629=\"        ENABLE_WEN = 0x08, // Wait enable - Writing 1 activates the wait timer\" line4630=\"\" line4631=\"        ENABLE_AEN = 0x02, // RGBC Enable - Writing 1 actives the ADC, 0 disables it\" line4632=\"\" line4633=\"        ENABLE_PON = 0x01, // Power on - Writing 1 activates the internal oscillator, 0 disables it\" line4634=\"\" line4635=\"        ATIME = 0x01, // Integration time\" line4636=\"\" line4637=\"        WTIME = 0x03, // Wait time (if ENABLE_WEN is asserted)\" line4638=\"\" line4639=\"        AILTL = 0x04, // Clear channel lower interrupt threshold\" line4640=\"\" line4641=\"        AILTH = 0x05,\" line4642=\"\" line4643=\"        AIHTL = 0x06, // Clear channel upper interrupt threshold\" line4644=\"\" line4645=\"        AIHTH = 0x07,\" line4646=\"\" line4647=\"        PERS = 0x0C, // Persistence register - basic SW filtering mechanism for interrupts\" line4648=\"\" line4649=\"        PERS_NONE = 0x00, // Every RGBC cycle generates an interrupt\" line4650=\"\" line4651=\"        PERS_1_CYCLE = 0x01, // 1 clean channel value outside threshold range generates an interrupt\" line4652=\"\" line4653=\"        PERS_2_CYCLE = 0x02, // 2 clean channel values outside threshold range generates an interrupt\" line4654=\"\" line4655=\"        PERS_3_CYCLE = 0x03, // 3 clean channel values outside threshold range generates an interrupt\" line4656=\"\" line4657=\"        PERS_5_CYCLE = 0x04, // 5 clean channel values outside threshold range generates an interrupt\" line4658=\"\" line4659=\"        PERS_10_CYCLE = 0x05, // 10 clean channel values outside threshold range generates an interrupt\" line4660=\"\" line4661=\"        PERS_15_CYCLE = 0x06, // 15 clean channel values outside threshold range generates an interrupt\" line4662=\"\" line4663=\"        PERS_20_CYCLE = 0x07, // 20 clean channel values outside threshold range generates an interrupt\" line4664=\"\" line4665=\"        PERS_25_CYCLE = 0x08, // 25 clean channel values outside threshold range generates an interrupt\" line4666=\"\" line4667=\"        PERS_30_CYCLE = 0x09, // 30 clean channel values outside threshold range generates an interrupt\" line4668=\"\" line4669=\"        PERS_35_CYCLE = 0x0A, // 35 clean channel values outside threshold range generates an interrupt\" line4670=\"\" line4671=\"        PERS_40_CYCLE = 0x0B, // 40 clean channel values outside threshold range generates an interrupt\" line4672=\"\" line4673=\"        PERS_45_CYCLE = 0x0C, // 45 clean channel values outside threshold range generates an interrupt\" line4674=\"\" line4675=\"        PERS_50_CYCLE = 0x0D, // 50 clean channel values outside threshold range generates an interrupt\" line4676=\"\" line4677=\"        PERS_55_CYCLE = 0x0E, // 55 clean channel values outside threshold range generates an interrupt\" line4678=\"\" line4679=\"        PERS_60_CYCLE = 0x0F, // 60 clean channel values outside threshold range generates an interrupt\" line4680=\"\" line4681=\"        CONFIG = 0x0D,\" line4682=\"\" line4683=\"        CONFIG_WLONG = 0x02, // Choose between short and long (12x) wait times via WTIME\" line4684=\"\" line4685=\"        CONTROL = 0x0F, // Set the gain level for the sensor\" line4686=\"\" line4687=\"        STATUS = 0x13,\" line4688=\"\" line4689=\"        STATUS_AINT = 0x10, // RGBC Clean channel interrupt\" line4690=\"\" line4691=\"        STATUS_AVALID = 0x01, // Indicates that the RGBC channels have completed an integration cycle\" line4692=\"\" line4693=\"\" line4694=\"\" line4695=\"        CDATAL = 0x14, // Clear channel data\" line4696=\"\" line4697=\"        CDATAH = 0x15,\" line4698=\"\" line4699=\"        RDATAL = 0x16, // Red channel data\" line4700=\"\" line4701=\"        RDATAH = 0x17,\" line4702=\"\" line4703=\"        GDATAL = 0x18, // Green channel data\" line4704=\"\" line4705=\"        GDATAH = 0x19,\" line4706=\"\" line4707=\"        BDATAL = 0x1A, // Blue channel data\" line4708=\"\" line4709=\"        BDATAH = 0x1B,\" line4710=\"\" line4711=\"\" line4712=\"\" line4713=\"        GAIN_1X = 0x00, //  1x gain\" line4714=\"\" line4715=\"        GAIN_4X = 0x01, //  4x gain\" line4716=\"\" line4717=\"        GAIN_16X = 0x02, // 16x gain\" line4718=\"\" line4719=\"        GAIN_60X = 0x03  // 60x gain\" line4720=\"\" line4721=\"    }\" line4722=\"\" line4723=\"\" line4724=\"\" line4725=\"    let LCS_integration_time_val = 0\" line4726=\"\" line4727=\"\" line4728=\"\" line4729=\"    // I2C functions\" line4730=\"\" line4731=\"\" line4732=\"\" line4733=\"    function I2C_WriteReg8(addr: number, reg: number, val: number) {\" line4734=\"\" line4735=\"        let buf32 = pins.createBuffer(2)\" line4736=\"\" line4737=\"        buf32.setNumber(NumberFormat.UInt8BE, 0, reg)\" line4738=\"\" line4739=\"        buf32.setNumber(NumberFormat.UInt8BE, 1, val)\" line4740=\"\" line4741=\"        pins.i2cWriteBuffer(addr, buf32)\" line4742=\"\" line4743=\"    }\" line4744=\"\" line4745=\"\" line4746=\"\" line4747=\"    function I2C_ReadReg8(addr: number, reg: number): number {\" line4748=\"\" line4749=\"        let buf42 = pins.createBuffer(1)\" line4750=\"\" line4751=\"        buf42.setNumber(NumberFormat.UInt8BE, 0, reg)\" line4752=\"\" line4753=\"        pins.i2cWriteBuffer(addr, buf42)\" line4754=\"\" line4755=\"        buf42 = pins.i2cReadBuffer(addr, 1)\" line4756=\"\" line4757=\"        return buf42.getNumber(NumberFormat.UInt8BE, 0);\" line4758=\"\" line4759=\"    }\" line4760=\"\" line4761=\"\" line4762=\"\" line4763=\"    function I2C_ReadReg16(addr: number, reg: number): number {\" line4764=\"\" line4765=\"        let buf52 = pins.createBuffer(1)\" line4766=\"\" line4767=\"        buf52.setNumber(NumberFormat.UInt8BE, 0, reg)\" line4768=\"\" line4769=\"        pins.i2cWriteBuffer(addr, buf52)\" line4770=\"\" line4771=\"        buf52 = pins.i2cReadBuffer(addr, 2)\" line4772=\"\" line4773=\"        // Little endian\" line4774=\"\" line4775=\"        return ((buf52.getNumber(NumberFormat.UInt8BE, 1) &lt;&lt; 8) | buf52.getNumber(NumberFormat.UInt8BE, 0));\" line4776=\"\" line4777=\"    }\" line4778=\"\" line4779=\"    function LCS_get_raw_data(delay: boolean = false): number[] {\" line4780=\"\" line4781=\"        if (delay) {\" line4782=\"\" line4783=\"            // Delay for the integration time to allow reading immediately after the previous read.\" line4784=\"\" line4785=\"            basic.pause((256 - LCS_integration_time_val) * 2.4)\" line4786=\"\" line4787=\"        }\" line4788=\"\" line4789=\"\" line4790=\"\" line4791=\"        let div = (256 - LCS_integration_time_val) * 1024\" line4792=\"\" line4793=\"        let rgbc = [0, 0, 0, 0]\" line4794=\"\" line4795=\"        rgbc[0] = I2C_ReadReg16(LCS_Constants.ADDRESS, (LCS_Constants.COMMAND_BIT | LCS_Constants.RDATAL)) / div\" line4796=\"\" line4797=\"        rgbc[1] = I2C_ReadReg16(LCS_Constants.ADDRESS, (LCS_Constants.COMMAND_BIT | LCS_Constants.GDATAL)) / div\" line4798=\"\" line4799=\"        rgbc[2] = I2C_ReadReg16(LCS_Constants.ADDRESS, (LCS_Constants.COMMAND_BIT | LCS_Constants.BDATAL)) / div\" line4800=\"\" line4801=\"        rgbc[3] = I2C_ReadReg16(LCS_Constants.ADDRESS, (LCS_Constants.COMMAND_BIT | LCS_Constants.CDATAL)) / div\" line4802=\"\" line4803=\"        if (rgbc[0] &gt; 1) {\" line4804=\"\" line4805=\"            rgbc[0] = 1\" line4806=\"\" line4807=\"        }\" line4808=\"\" line4809=\"        if (rgbc[1] &gt; 1) {\" line4810=\"\" line4811=\"            rgbc[1] = 1\" line4812=\"\" line4813=\"        }\" line4814=\"\" line4815=\"        if (rgbc[2] &gt; 1) {\" line4816=\"\" line4817=\"            rgbc[2] = 1\" line4818=\"\" line4819=\"        }\" line4820=\"\" line4821=\"        if (rgbc[3] &gt; 1) {\" line4822=\"\" line4823=\"            rgbc[3] = 1\" line4824=\"\" line4825=\"        }\" line4826=\"\" line4827=\"        return rgbc\" line4828=\"\" line4829=\"    }\" line4830=\"\" line4831=\"\" line4832=\"\" line4833=\"    let font: number[] = [];\" line4834=\"\" line4835=\"    font[0] = 0x0022d422;\" line4836=\"\" line4837=\"    font[1] = 0x0022d422;\" line4838=\"\" line4839=\"    font[2] = 0x0022d422;\" line4840=\"\" line4841=\"    font[3] = 0x0022d422;\" line4842=\"\" line4843=\"    font[4] = 0x0022d422;\" line4844=\"\" line4845=\"    font[5] = 0x0022d422;\" line4846=\"\" line4847=\"    font[6] = 0x0022d422;\" line4848=\"\" line4849=\"    font[7] = 0x0022d422;\" line4850=\"\" line4851=\"    font[8] = 0x0022d422;\" line4852=\"\" line4853=\"    font[9] = 0x0022d422;\" line4854=\"\" line4855=\"    font[10] = 0x0022d422;\" line4856=\"\" line4857=\"    font[11] = 0x0022d422;\" line4858=\"\" line4859=\"    font[12] = 0x0022d422;\" line4860=\"\" line4861=\"    font[13] = 0x0022d422;\" line4862=\"\" line4863=\"    font[14] = 0x0022d422;\" line4864=\"\" line4865=\"    font[15] = 0x0022d422;\" line4866=\"\" line4867=\"    font[16] = 0x0022d422;\" line4868=\"\" line4869=\"    font[17] = 0x0022d422;\" line4870=\"\" line4871=\"    font[18] = 0x0022d422;\" line4872=\"\" line4873=\"    font[19] = 0x0022d422;\" line4874=\"\" line4875=\"    font[20] = 0x0022d422;\" line4876=\"\" line4877=\"    font[21] = 0x0022d422;\" line4878=\"\" line4879=\"    font[22] = 0x0022d422;\" line4880=\"\" line4881=\"    font[23] = 0x0022d422;\" line4882=\"\" line4883=\"    font[24] = 0x0022d422;\" line4884=\"\" line4885=\"    font[25] = 0x0022d422;\" line4886=\"\" line4887=\"    font[26] = 0x0022d422;\" line4888=\"\" line4889=\"    font[27] = 0x0022d422;\" line4890=\"\" line4891=\"    font[28] = 0x0022d422;\" line4892=\"\" line4893=\"    font[29] = 0x0022d422;\" line4894=\"\" line4895=\"    font[30] = 0x0022d422;\" line4896=\"\" line4897=\"    font[31] = 0x0022d422;\" line4898=\"\" line4899=\"    font[32] = 0x00000000;\" line4900=\"\" line4901=\"    font[33] = 0x000002e0;\" line4902=\"\" line4903=\"    font[34] = 0x00018060;\" line4904=\"\" line4905=\"    font[35] = 0x00afabea;\" line4906=\"\" line4907=\"    font[36] = 0x00aed6ea;\" line4908=\"\" line4909=\"    font[37] = 0x01991133;\" line4910=\"\" line4911=\"    font[38] = 0x010556aa;\" line4912=\"\" line4913=\"    font[39] = 0x00000060;\" line4914=\"\" line4915=\"    font[40] = 0x000045c0;\" line4916=\"\" line4917=\"    font[41] = 0x00003a20;\" line4918=\"\" line4919=\"    font[42] = 0x00051140;\" line4920=\"\" line4921=\"    font[43] = 0x00023880;\" line4922=\"\" line4923=\"    font[44] = 0x00002200;\" line4924=\"\" line4925=\"    font[45] = 0x00021080;\" line4926=\"\" line4927=\"    font[46] = 0x00000100;\" line4928=\"\" line4929=\"    font[47] = 0x00111110;\" line4930=\"\" line4931=\"    font[48] = 0x0007462e;\" line4932=\"\" line4933=\"    font[49] = 0x00087e40;\" line4934=\"\" line4935=\"    font[50] = 0x000956b9;\" line4936=\"\" line4937=\"    font[51] = 0x0005d629;\" line4938=\"\" line4939=\"    font[52] = 0x008fa54c;\" line4940=\"\" line4941=\"    font[53] = 0x009ad6b7;\" line4942=\"\" line4943=\"    font[54] = 0x008ada88;\" line4944=\"\" line4945=\"    font[55] = 0x00119531;\" line4946=\"\" line4947=\"    font[56] = 0x00aad6aa;\" line4948=\"\" line4949=\"    font[57] = 0x0022b6a2;\" line4950=\"\" line4951=\"    font[58] = 0x00000140;\" line4952=\"\" line4953=\"    font[59] = 0x00002a00;\" line4954=\"\" line4955=\"    font[60] = 0x0008a880;\" line4956=\"\" line4957=\"    font[61] = 0x00052940;\" line4958=\"\" line4959=\"    font[62] = 0x00022a20;\" line4960=\"\" line4961=\"    font[63] = 0x0022d422;\" line4962=\"\" line4963=\"    font[64] = 0x00e4d62e;\" line4964=\"\" line4965=\"    font[65] = 0x000f14be;\" line4966=\"\" line4967=\"    font[66] = 0x000556bf;\" line4968=\"\" line4969=\"    font[67] = 0x0008c62e;\" line4970=\"\" line4971=\"    font[68] = 0x0007463f;\" line4972=\"\" line4973=\"    font[69] = 0x0008d6bf;\" line4974=\"\" line4975=\"    font[70] = 0x000094bf;\" line4976=\"\" line4977=\"    font[71] = 0x00cac62e;\" line4978=\"\" line4979=\"    font[72] = 0x000f909f;\" line4980=\"\" line4981=\"    font[73] = 0x000047f1;\" line4982=\"\" line4983=\"    font[74] = 0x0017c629;\" line4984=\"\" line4985=\"    font[75] = 0x0008a89f;\" line4986=\"\" line4987=\"    font[76] = 0x0008421f;\" line4988=\"\" line4989=\"    font[77] = 0x01f1105f;\" line4990=\"\" line4991=\"    font[78] = 0x01f4105f;\" line4992=\"\" line4993=\"    font[79] = 0x0007462e;\" line4994=\"\" line4995=\"    font[80] = 0x000114bf;\" line4996=\"\" line4997=\"    font[81] = 0x000b6526;\" line4998=\"\" line4999=\"    font[82] = 0x010514bf;\" line5000=\"\" line5001=\"    font[83] = 0x0004d6b2;\" line5002=\"\" line5003=\"    font[84] = 0x0010fc21;\" line5004=\"\" line5005=\"    font[85] = 0x0007c20f;\" line5006=\"\" line5007=\"    font[86] = 0x00744107;\" line5008=\"\" line5009=\"    font[87] = 0x01f4111f;\" line5010=\"\" line5011=\"    font[88] = 0x000d909b;\" line5012=\"\" line5013=\"    font[89] = 0x00117041;\" line5014=\"\" line5015=\"    font[90] = 0x0008ceb9;\" line5016=\"\" line5017=\"    font[91] = 0x0008c7e0;\" line5018=\"\" line5019=\"    font[92] = 0x01041041;\" line5020=\"\" line5021=\"    font[93] = 0x000fc620;\" line5022=\"\" line5023=\"    font[94] = 0x00010440;\" line5024=\"\" line5025=\"    font[95] = 0x01084210;\" line5026=\"\" line5027=\"    font[96] = 0x00000820;\" line5028=\"\" line5029=\"    font[97] = 0x010f4a4c;\" line5030=\"\" line5031=\"    font[98] = 0x0004529f;\" line5032=\"\" line5033=\"    font[99] = 0x00094a4c;\" line5034=\"\" line5035=\"    font[100] = 0x000fd288;\" line5036=\"\" line5037=\"    font[101] = 0x000956ae;\" line5038=\"\" line5039=\"    font[102] = 0x000097c4;\" line5040=\"\" line5041=\"    font[103] = 0x0007d6a2;\" line5042=\"\" line5043=\"    font[104] = 0x000c109f;\" line5044=\"\" line5045=\"    font[105] = 0x000003a0;\" line5046=\"\" line5047=\"    font[106] = 0x0006c200;\" line5048=\"\" line5049=\"    font[107] = 0x0008289f;\" line5050=\"\" line5051=\"    font[108] = 0x000841e0;\" line5052=\"\" line5053=\"    font[109] = 0x01e1105e;\" line5054=\"\" line5055=\"    font[110] = 0x000e085e;\" line5056=\"\" line5057=\"    font[111] = 0x00064a4c;\" line5058=\"\" line5059=\"    font[112] = 0x0002295e;\" line5060=\"\" line5061=\"    font[113] = 0x000f2944;\" line5062=\"\" line5063=\"    font[114] = 0x0001085c;\" line5064=\"\" line5065=\"    font[115] = 0x00012a90;\" line5066=\"\" line5067=\"    font[116] = 0x010a51e0;\" line5068=\"\" line5069=\"    font[117] = 0x010f420e;\" line5070=\"\" line5071=\"    font[118] = 0x00644106;\" line5072=\"\" line5073=\"    font[119] = 0x01e8221e;\" line5074=\"\" line5075=\"    font[120] = 0x00093192;\" line5076=\"\" line5077=\"    font[121] = 0x00222292;\" line5078=\"\" line5079=\"    font[122] = 0x00095b52;\" line5080=\"\" line5081=\"    font[123] = 0x0008fc80;\" line5082=\"\" line5083=\"    font[124] = 0x000003e0;\" line5084=\"\" line5085=\"    font[125] = 0x000013f1;\" line5086=\"\" line5087=\"    font[126] = 0x00841080;\" line5088=\"\" line5089=\"    font[127] = 0x0022d422;\" line5090=\"\" line5091=\"\" line5092=\"\" line5093=\"    let _I2CAddr = 0;\" line5094=\"\" line5095=\"    let _screen = pins.createBuffer(1025);\" line5096=\"\" line5097=\"    let _buf2 = pins.createBuffer(2);\" line5098=\"\" line5099=\"    let _buf3 = pins.createBuffer(3);\" line5100=\"\" line5101=\"    let _buf4 = pins.createBuffer(4);\" line5102=\"\" line5103=\"    let _ZOOM = 1;\" line5104=\"\" line5105=\"\" line5106=\"\" line5107=\"    function cmd1(d: number) {\" line5108=\"\" line5109=\"        let n = d % 256;\" line5110=\"\" line5111=\"        pins.i2cWriteNumber(_I2CAddr, n, NumberFormat.UInt16BE);\" line5112=\"\" line5113=\"    }\" line5114=\"\" line5115=\"\" line5116=\"\" line5117=\"    function cmd2(d1: number, d2: number) {\" line5118=\"\" line5119=\"        _buf3[0] = 0;\" line5120=\"\" line5121=\"        _buf3[1] = d1;\" line5122=\"\" line5123=\"        _buf3[2] = d2;\" line5124=\"\" line5125=\"        pins.i2cWriteBuffer(_I2CAddr, _buf3);\" line5126=\"\" line5127=\"    }\" line5128=\"\" line5129=\"\" line5130=\"\" line5131=\"    function cmd3(d1: number, d2: number, d3: number) {\" line5132=\"\" line5133=\"        _buf4[0] = 0;\" line5134=\"\" line5135=\"        _buf4[1] = d1;\" line5136=\"\" line5137=\"        _buf4[2] = d2;\" line5138=\"\" line5139=\"        _buf4[3] = d3;\" line5140=\"\" line5141=\"        pins.i2cWriteBuffer(_I2CAddr, _buf4);\" line5142=\"\" line5143=\"    }\" line5144=\"\" line5145=\"\" line5146=\"\" line5147=\"    function set_pos(col: number = 0, page: number = 0) {\" line5148=\"\" line5149=\"        cmd1(0xb0 | page) // page number\" line5150=\"\" line5151=\"        let c = col * (_ZOOM + 1)\" line5152=\"\" line5153=\"        cmd1(0x00 | (c % 16)) // lower start column address\" line5154=\"\" line5155=\"        cmd1(0x10 | (c &gt;&gt; 4)) // upper start column address    \" line5156=\"\" line5157=\"    }\" line5158=\"\" line5159=\"\" line5160=\"\" line5161=\"    // clear bit\" line5162=\"\" line5163=\"    function clrbit(d: number, b: number): number {\" line5164=\"\" line5165=\"        if (d &amp; (1 &lt;&lt; b))\" line5166=\"\" line5167=\"            d -= (1 &lt;&lt; b)\" line5168=\"\" line5169=\"        return d\" line5170=\"\" line5171=\"    }\" line5172=\"\" line5173=\"\" line5174=\"\" line5175=\"\" line5176=\"\" line5177=\"\" line5178=\"\" line5179=\"\" line5180=\"    /**\" line5181=\"\" line5182=\"     * A NeoPixel strip\" line5183=\"\" line5184=\"     */\" line5185=\"\" line5186=\"    export class Strip {\" line5187=\"\" line5188=\"        buf: Buffer;\" line5189=\"\" line5190=\"        pin: DigitalPin;\" line5191=\"\" line5192=\"        // TODO: encode as bytes instead of 32bit\" line5193=\"\" line5194=\"        brightness: number;\" line5195=\"\" line5196=\"        start: number; // start offset in LED strip\" line5197=\"\" line5198=\"        _length: number; // number of LEDs\" line5199=\"\" line5200=\"        _mode: NeoPixelMode;\" line5201=\"\" line5202=\"        _matrixWidth: number; // number of leds in a matrix - if any\" line5203=\"\" line5204=\"\" line5205=\"\" line5206=\"        /**\" line5207=\"\" line5208=\"         * Shows all LEDs to a given color (range 0-255 for r, g, b).\" line5209=\"\" line5210=\"         * @param rgb RGB color of the LED\" line5211=\"\" line5212=\"         */\" line5213=\"\" line5214=\"        //% blockId=&quot;neopixel_set_strip_color&quot; block=&quot;%strip|显示 颜色 %rgb=neopixel_colors&quot;\" line5215=\"\" line5216=\"        //% strip.defl=strip\" line5217=\"\" line5218=\"        //% weight=12\" line5219=\"\" line5220=\"        //% parts=&quot;neopixel&quot; subcategory=执行器 group=&quot;彩灯&quot;\" line5221=\"\" line5222=\"        //% color=#2699BF blockGap=10\" line5223=\"\" line5224=\"        showColor(rgb: number) {\" line5225=\"\" line5226=\"            rgb = rgb &gt;&gt; 0;\" line5227=\"\" line5228=\"            this.setAllRGB(rgb);\" line5229=\"\" line5230=\"            this.show();\" line5231=\"\" line5232=\"        }\" line5233=\"\" line5234=\"\" line5235=\"\" line5236=\"        /**\" line5237=\"\" line5238=\"         * Shows a rainbow pattern on all LEDs.\" line5239=\"\" line5240=\"         * @param startHue the start hue value for the rainbow, eg: 1\" line5241=\"\" line5242=\"         * @param endHue the end hue value for the rainbow, eg: 360\" line5243=\"\" line5244=\"         */\" line5245=\"\" line5246=\"        //% blockId=&quot;neopixel_set_strip_rainbow&quot; block=&quot;%strip|显示 彩虹 从 %startHue|到 %endHue&quot;\" line5247=\"\" line5248=\"        //% strip.defl=strip\" line5249=\"\" line5250=\"        //% weight=13\" line5251=\"\" line5252=\"        //% parts=&quot;neopixel&quot; subcategory=执行器 group=&quot;彩灯&quot; \" line5253=\"\" line5254=\"        //% color=#2699BF blockGap=10\" line5255=\"\" line5256=\"        showRainbow(startHue: number = 1, endHue: number = 360) {\" line5257=\"\" line5258=\"            if (this._length &lt;= 0) return;\" line5259=\"\" line5260=\"\" line5261=\"\" line5262=\"            startHue = startHue &gt;&gt; 0;\" line5263=\"\" line5264=\"            endHue = endHue &gt;&gt; 0;\" line5265=\"\" line5266=\"            const saturation = 100;\" line5267=\"\" line5268=\"            const luminance = 50;\" line5269=\"\" line5270=\"            const steps = this._length;\" line5271=\"\" line5272=\"            const direction = HueInterpolationDirection.Clockwise;\" line5273=\"\" line5274=\"\" line5275=\"\" line5276=\"            //hue\" line5277=\"\" line5278=\"            const h1 = startHue;\" line5279=\"\" line5280=\"            const h2 = endHue;\" line5281=\"\" line5282=\"            const hDistCW = ((h2 + 360) - h1) % 360;\" line5283=\"\" line5284=\"            const hStepCW = Math.idiv((hDistCW * 100), steps);\" line5285=\"\" line5286=\"            const hDistCCW = ((h1 + 360) - h2) % 360;\" line5287=\"\" line5288=\"            const hStepCCW = Math.idiv(-(hDistCCW * 100), steps);\" line5289=\"\" line5290=\"            let hStep: number;\" line5291=\"\" line5292=\"            if (direction === HueInterpolationDirection.Clockwise) {\" line5293=\"\" line5294=\"                hStep = hStepCW;\" line5295=\"\" line5296=\"            } else if (direction === HueInterpolationDirection.CounterClockwise) {\" line5297=\"\" line5298=\"                hStep = hStepCCW;\" line5299=\"\" line5300=\"            } else {\" line5301=\"\" line5302=\"                hStep = hDistCW &lt; hDistCCW ? hStepCW : hStepCCW;\" line5303=\"\" line5304=\"            }\" line5305=\"\" line5306=\"            const h1_100 = h1 * 100; //we multiply by 100 so we keep more accurate results while doing interpolation\" line5307=\"\" line5308=\"\" line5309=\"\" line5310=\"            //sat\" line5311=\"\" line5312=\"            const s1 = saturation;\" line5313=\"\" line5314=\"            const s2 = saturation;\" line5315=\"\" line5316=\"            const sDist = s2 - s1;\" line5317=\"\" line5318=\"            const sStep = Math.idiv(sDist, steps);\" line5319=\"\" line5320=\"            const s1_100 = s1 * 100;\" line5321=\"\" line5322=\"\" line5323=\"\" line5324=\"            //lum\" line5325=\"\" line5326=\"            const l1 = luminance;\" line5327=\"\" line5328=\"            const l2 = luminance;\" line5329=\"\" line5330=\"            const lDist = l2 - l1;\" line5331=\"\" line5332=\"            const lStep = Math.idiv(lDist, steps);\" line5333=\"\" line5334=\"            const l1_100 = l1 * 100\" line5335=\"\" line5336=\"\" line5337=\"\" line5338=\"            //interpolate\" line5339=\"\" line5340=\"            if (steps === 1) {\" line5341=\"\" line5342=\"                this.setPixelColor(0, hsl(h1 + hStep, s1 + sStep, l1 + lStep))\" line5343=\"\" line5344=\"            } else {\" line5345=\"\" line5346=\"                this.setPixelColor(0, hsl(startHue, saturation, luminance));\" line5347=\"\" line5348=\"                for (let t = 1; t &lt; steps - 1; t++) {\" line5349=\"\" line5350=\"                    const u = Math.idiv((h1_100 + t * hStep), 100) + 360;\" line5351=\"\" line5352=\"                    const v = Math.idiv((s1_100 + t * sStep), 100);\" line5353=\"\" line5354=\"                    const w = Math.idiv((l1_100 + t * lStep), 100);\" line5355=\"\" line5356=\"                    this.setPixelColor(t, hsl(u, v, w));\" line5357=\"\" line5358=\"                }\" line5359=\"\" line5360=\"                this.setPixelColor(steps - 1, hsl(endHue, saturation, luminance));\" line5361=\"\" line5362=\"            }\" line5363=\"\" line5364=\"            this.show();\" line5365=\"\" line5366=\"        }\" line5367=\"\" line5368=\"\" line5369=\"\" line5370=\"\" line5371=\"\" line5372=\"        /**\" line5373=\"\" line5374=\"         * Set LED to a given color (range 0-255 for r, g, b).\" line5375=\"\" line5376=\"         * You need to call ``show`` to make the changes visible.\" line5377=\"\" line5378=\"         * @param pixeloffset position of the NeoPixel in the strip,eg: 1\" line5379=\"\" line5380=\"         * @param rgb RGB color of the LED\" line5381=\"\" line5382=\"         */\" line5383=\"\" line5384=\"        //% blockId=&quot;neopixel_set_pixel_color&quot; block=&quot;%strip|设置 像素 颜色 在 %pixeloffset|到 %rgb=neopixel_colors&quot;\" line5385=\"\" line5386=\"        //% strip.defl=strip\" line5387=\"\" line5388=\"        //% weight=14\" line5389=\"\" line5390=\"        //% parts=&quot;neopixel&quot; subcategory=执行器 group=&quot;彩灯&quot;\" line5391=\"\" line5392=\"        //% color=#2699BF blockGap=10\" line5393=\"\" line5394=\"        setPixelColor(pixeloffset: number, rgb: number): void {\" line5395=\"\" line5396=\"            this.setPixelRGB((pixeloffset - 1) &gt;&gt; 0, rgb &gt;&gt; 0);\" line5397=\"\" line5398=\"        }\" line5399=\"\" line5400=\"\" line5401=\"\" line5402=\"        /**\" line5403=\"\" line5404=\"         * Send all the changes to the strip.\" line5405=\"\" line5406=\"         */\" line5407=\"\" line5408=\"        //% blockId=&quot;neopixel_show&quot; block=&quot;%strip|显示&quot;\" line5409=\"\" line5410=\"        //% weight=15\" line5411=\"\" line5412=\"        //% strip.defl=strip\" line5413=\"\" line5414=\"        //% parts=&quot;neopixel&quot; subcategory=执行器 group=&quot;彩灯&quot;\" line5415=\"\" line5416=\"        //% color=#2699BF blockGap=10\" line5417=\"\" line5418=\"        show() {\" line5419=\"\" line5420=\"            // only supported in beta\" line5421=\"\" line5422=\"            // ws2812b.setBufferMode(this.pin, this._mode);\" line5423=\"\" line5424=\"            ws2812b.sendBuffer(this.buf, this.pin);\" line5425=\"\" line5426=\"        }\" line5427=\"\" line5428=\"\" line5429=\"\" line5430=\"        /**\" line5431=\"    \" line5432=\"         * Set the brightness of the strip. This flag only applies to future operation.\" line5433=\"    \" line5434=\"         * @param brightness a measure of LED brightness in 0-255. eg: 255\" line5435=\"    \" line5436=\"         */\" line5437=\"\" line5438=\"        //% blockId=&quot;neopixel_set_brightness&quot; block=&quot;%strip|设置 亮度 %brightness&quot;\" line5439=\"\" line5440=\"        //% strip.defl=strip\" line5441=\"\" line5442=\"        //% weight=17\" line5443=\"\" line5444=\"        //% parts=&quot;neopixel&quot; subcategory=执行器 group=&quot;彩灯&quot;\" line5445=\"\" line5446=\"        //% color=#2699BF blockGap=10\" line5447=\"\" line5448=\"        setBrightness(brightness: number): void {\" line5449=\"\" line5450=\"            this.brightness = brightness &amp; 0xff;\" line5451=\"\" line5452=\"        }\" line5453=\"\" line5454=\"\" line5455=\"\" line5456=\"        /**\" line5457=\"    \" line5458=\"         * Set the pin where the neopixel is connected, defaults to P0.\" line5459=\"    \" line5460=\"         */\" line5461=\"\" line5462=\"        //% parts=&quot;neopixel&quot; subcategory=执行器 group=&quot;彩灯&quot;\" line5463=\"\" line5464=\"        //% color=#2699BF blockGap=10\" line5465=\"\" line5466=\"        setPin(pin: DigitalPin): void {\" line5467=\"\" line5468=\"\" line5469=\"\" line5470=\"            this.pin = pin;\" line5471=\"\" line5472=\"            pins.digitalWritePin(this.pin, 0);\" line5473=\"\" line5474=\"            // don't yield to avoid races on initialization\" line5475=\"\" line5476=\"        }\" line5477=\"\" line5478=\"\" line5479=\"\" line5480=\"\" line5481=\"\" line5482=\"\" line5483=\"\" line5484=\"        private setBufferRGB(offset: number, red: number, green: number, blue: number): void {\" line5485=\"\" line5486=\"            if (this._mode === NeoPixelMode.RGB_RGB) {\" line5487=\"\" line5488=\"                this.buf[offset + 0] = red;\" line5489=\"\" line5490=\"                this.buf[offset + 1] = green;\" line5491=\"\" line5492=\"            } else {\" line5493=\"\" line5494=\"                this.buf[offset + 0] = green;\" line5495=\"\" line5496=\"                this.buf[offset + 1] = red;\" line5497=\"\" line5498=\"            }\" line5499=\"\" line5500=\"            this.buf[offset + 2] = blue;\" line5501=\"\" line5502=\"        }\" line5503=\"\" line5504=\"\" line5505=\"\" line5506=\"        private setAllRGB(rgb: number) {\" line5507=\"\" line5508=\"            let red = unpackR(rgb);\" line5509=\"\" line5510=\"            let green = unpackG(rgb);\" line5511=\"\" line5512=\"            let blue = unpackB(rgb);\" line5513=\"\" line5514=\"\" line5515=\"\" line5516=\"            const br3 = this.brightness;\" line5517=\"\" line5518=\"            if (br3 &lt; 255) {\" line5519=\"\" line5520=\"                red = (red * br3) &gt;&gt; 8;\" line5521=\"\" line5522=\"                green = (green * br3) &gt;&gt; 8;\" line5523=\"\" line5524=\"                blue = (blue * br3) &gt;&gt; 8;\" line5525=\"\" line5526=\"            }\" line5527=\"\" line5528=\"            const end3 = this.start + this._length;\" line5529=\"\" line5530=\"            const stride6 = this._mode === NeoPixelMode.RGBW ? 4 : 3;\" line5531=\"\" line5532=\"            for (let i5 = this.start; i5 &lt; end3; ++i5) {\" line5533=\"\" line5534=\"                this.setBufferRGB(i5 * stride6, red, green, blue)\" line5535=\"\" line5536=\"            }\" line5537=\"\" line5538=\"        }\" line5539=\"\" line5540=\"        private setAllW(white: number) {\" line5541=\"\" line5542=\"            if (this._mode !== NeoPixelMode.RGBW)\" line5543=\"\" line5544=\"                return;\" line5545=\"\" line5546=\"\" line5547=\"\" line5548=\"            let br4 = this.brightness;\" line5549=\"\" line5550=\"            if (br4 &lt; 255) {\" line5551=\"\" line5552=\"                white = (white * br4) &gt;&gt; 8;\" line5553=\"\" line5554=\"            }\" line5555=\"\" line5556=\"            let buf8 = this.buf;\" line5557=\"\" line5558=\"            let end4 = this.start + this._length;\" line5559=\"\" line5560=\"            for (let i6 = this.start; i6 &lt; end4; ++i6) {\" line5561=\"\" line5562=\"                let ledoffset3 = i6 * 4;\" line5563=\"\" line5564=\"                buf8[ledoffset3 + 3] = white;\" line5565=\"\" line5566=\"            }\" line5567=\"\" line5568=\"        }\" line5569=\"\" line5570=\"        private setPixelRGB(pixeloffset: number, rgb: number): void {\" line5571=\"\" line5572=\"            if (pixeloffset &lt; 0\" line5573=\"\" line5574=\"                || pixeloffset &gt;= this._length)\" line5575=\"\" line5576=\"                return;\" line5577=\"\" line5578=\"\" line5579=\"\" line5580=\"            let stride7 = this._mode === NeoPixelMode.RGBW ? 4 : 3;\" line5581=\"\" line5582=\"            pixeloffset = (pixeloffset + this.start) * stride7;\" line5583=\"\" line5584=\"\" line5585=\"\" line5586=\"            let red2 = unpackR(rgb);\" line5587=\"\" line5588=\"            let green2 = unpackG(rgb);\" line5589=\"\" line5590=\"            let blue2 = unpackB(rgb);\" line5591=\"\" line5592=\"\" line5593=\"\" line5594=\"            let br5 = this.brightness;\" line5595=\"\" line5596=\"            if (br5 &lt; 255) {\" line5597=\"\" line5598=\"                red2 = (red2 * br5) &gt;&gt; 8;\" line5599=\"\" line5600=\"                green2 = (green2 * br5) &gt;&gt; 8;\" line5601=\"\" line5602=\"                blue2 = (blue2 * br5) &gt;&gt; 8;\" line5603=\"\" line5604=\"            }\" line5605=\"\" line5606=\"            this.setBufferRGB(pixeloffset, red2, green2, blue2)\" line5607=\"\" line5608=\"        }\" line5609=\"\" line5610=\"        private setPixelW(pixeloffset: number, white: number): void {\" line5611=\"\" line5612=\"            if (this._mode !== NeoPixelMode.RGBW)\" line5613=\"\" line5614=\"                return;\" line5615=\"\" line5616=\"\" line5617=\"\" line5618=\"            if (pixeloffset &lt; 0\" line5619=\"\" line5620=\"                || pixeloffset &gt;= this._length)\" line5621=\"\" line5622=\"                return;\" line5623=\"\" line5624=\"\" line5625=\"\" line5626=\"            pixeloffset = (pixeloffset + this.start) * 4;\" line5627=\"\" line5628=\"\" line5629=\"\" line5630=\"            let br6 = this.brightness;\" line5631=\"\" line5632=\"            if (br6 &lt; 255) {\" line5633=\"\" line5634=\"                white = (white * br6) &gt;&gt; 8;\" line5635=\"\" line5636=\"            }\" line5637=\"\" line5638=\"            let buf9 = this.buf;\" line5639=\"\" line5640=\"            buf9[pixeloffset + 3] = white;\" line5641=\"\" line5642=\"        }\" line5643=\"\" line5644=\"    }\" line5645=\"\" line5646=\"\" line5647=\"\" line5648=\"    /**\" line5649=\"    \" line5650=\"     * Create a new NeoPixel driver for `numleds` LEDs.\" line5651=\"    \" line5652=\"     * @param pin the pin where the neopixel is connected.\" line5653=\"    \" line5654=\"     * @param numleds number of leds in the strip, eg: 8,30,60,64\" line5655=\"    \" line5656=\"     */\" line5657=\"\" line5658=\"    //% blockId=&quot;neopixel_create&quot; block=&quot;灯环使用端口 %neopixelpin &quot;\" line5659=\"\" line5660=\"    //% parts=&quot;neopixel&quot; subcategory=执行器 group=&quot;彩灯&quot;\" line5661=\"\" line5662=\"    //% neopixelpin.fieldEditor=&quot;gridpicker&quot;\" line5663=\"\" line5664=\"    //% neopixelpin.fieldOptions.width=220\" line5665=\"\" line5666=\"    //% neopixelpin.fieldOptions.columns=2\" line5667=\"\" line5668=\"    //% weight=18\" line5669=\"\" line5670=\"    //% trackArgs=0,2\" line5671=\"\" line5672=\"    //% blockSetVariable=strip\" line5673=\"\" line5674=\"    //% color=#2699BF blockGap=10\" line5675=\"\" line5676=\"    //% weight=51\" line5677=\"\" line5678=\"    export function create(neopixelpin: Write_pin): Strip {\" line5679=\"\" line5680=\"        let strip2 = new Strip();\" line5681=\"\" line5682=\"        let stride8 = NeoPixelMode.RGBW ? 4 : 3;\" line5683=\"\" line5684=\"        strip2.buf = pins.createBuffer(8 * stride8);\" line5685=\"\" line5686=\"        strip2.start = 0;\" line5687=\"\" line5688=\"        strip2._length = 8;\" line5689=\"\" line5690=\"        strip2._mode = NeoPixelMode.RGB;\" line5691=\"\" line5692=\"        strip2._matrixWidth = 0;\" line5693=\"\" line5694=\"        strip2.setBrightness(128)\" line5695=\"\" line5696=\"        if (neopixelpin == 1) {\" line5697=\"\" line5698=\"            strip2.setPin(DigitalPin.P0);\" line5699=\"\" line5700=\"        }\" line5701=\"\" line5702=\"        if (neopixelpin == 2) {\" line5703=\"\" line5704=\"            strip2.setPin(DigitalPin.P16);\" line5705=\"\" line5706=\"        }\" line5707=\"\" line5708=\"        if (neopixelpin == 3) {\" line5709=\"\" line5710=\"            strip2.setPin(DigitalPin.P1);\" line5711=\"\" line5712=\"        }\" line5713=\"\" line5714=\"        if (neopixelpin == 4) {\" line5715=\"\" line5716=\"            strip2.setPin(DigitalPin.P12);\" line5717=\"\" line5718=\"        }\" line5719=\"\" line5720=\"        if (neopixelpin == 5) {\" line5721=\"\" line5722=\"            strip2.setPin(DigitalPin.P2);\" line5723=\"\" line5724=\"        }\" line5725=\"\" line5726=\"        if (neopixelpin == 6) {\" line5727=\"\" line5728=\"            strip2.setPin(DigitalPin.P8);\" line5729=\"\" line5730=\"        }\" line5731=\"\" line5732=\"\" line5733=\"\" line5734=\"        return strip2;\" line5735=\"\" line5736=\"    }\" line5737=\"\" line5738=\"\" line5739=\"\" line5740=\"    /**\" line5741=\"    \" line5742=\"     * Converts red, green, blue channels into a RGB color\" line5743=\"    \" line5744=\"     * @param red value of the red channel between 0 and 255. eg: 255\" line5745=\"    \" line5746=\"     * @param green value of the green channel between 0 and 255. eg: 255\" line5747=\"    \" line5748=\"     * @param blue value of the blue channel between 0 and 255. eg: 255\" line5749=\"    \" line5750=\"     */\" line5751=\"\" line5752=\"    //% blockId=&quot;neopixel_rgb&quot; block=&quot;红 %red|绿 %green|蓝 %blue&quot;\" line5753=\"\" line5754=\"    //% parts=&quot;neopixel&quot; subcategory=执行器 group=&quot;彩灯&quot;\" line5755=\"\" line5756=\"    //% weight=12\" line5757=\"\" line5758=\"    //% color=#2699BF blockGap=10\" line5759=\"\" line5760=\"    export function rgb(red: number, green: number, blue: number): number {\" line5761=\"\" line5762=\"        return packRGB(red, green, blue);\" line5763=\"\" line5764=\"    }\" line5765=\"\" line5766=\"\" line5767=\"\" line5768=\"    /**\" line5769=\"    \" line5770=\"     * Gets the RGB value of a known color\" line5771=\"    \" line5772=\"    */\" line5773=\"\" line5774=\"    //% blockId=&quot;neopixel_colors&quot; block=&quot;%color&quot;\" line5775=\"\" line5776=\"    //% parts=&quot;neopixel&quot; subcategory=执行器 group=&quot;彩灯&quot;\" line5777=\"\" line5778=\"    //% weight=13\" line5779=\"\" line5780=\"    //% color=#2699BF blockGap=10\" line5781=\"\" line5782=\"    export function colors(color: NeoPixelColors): number {\" line5783=\"\" line5784=\"        return color;\" line5785=\"\" line5786=\"    }\" line5787=\"\" line5788=\"\" line5789=\"\" line5790=\"    function packRGB(a: number, b: number, c: number): number {\" line5791=\"\" line5792=\"        return ((a &amp; 0xFF) &lt;&lt; 16) | ((b &amp; 0xFF) &lt;&lt; 8) | (c &amp; 0xFF);\" line5793=\"\" line5794=\"    }\" line5795=\"\" line5796=\"\" line5797=\"\" line5798=\"    function unpackR(rgb: number): number {\" line5799=\"\" line5800=\"        let r3 = (rgb &gt;&gt; 16) &amp; 0xFF;\" line5801=\"\" line5802=\"        return r3;\" line5803=\"\" line5804=\"    }\" line5805=\"\" line5806=\"\" line5807=\"\" line5808=\"    function unpackG(rgb: number): number {\" line5809=\"\" line5810=\"        let g3 = (rgb &gt;&gt; 8) &amp; 0xFF;\" line5811=\"\" line5812=\"        return g3;\" line5813=\"\" line5814=\"    }\" line5815=\"\" line5816=\"\" line5817=\"\" line5818=\"    function unpackB(rgb: number): number {\" line5819=\"\" line5820=\"        let b3 = (rgb) &amp; 0xFF;\" line5821=\"\" line5822=\"        return b3;\" line5823=\"\" line5824=\"    }\" line5825=\"\" line5826=\"\" line5827=\"\" line5828=\"    export function hsl(h: number, s: number, l: number): number {\" line5829=\"\" line5830=\"        h = Math.round(h);\" line5831=\"\" line5832=\"        s = Math.round(s);\" line5833=\"\" line5834=\"        l = Math.round(l);\" line5835=\"\" line5836=\"\" line5837=\"\" line5838=\"        h = h % 360;\" line5839=\"\" line5840=\"        s = Math.clamp(0, 99, s);\" line5841=\"\" line5842=\"        l = Math.clamp(0, 99, l);\" line5843=\"\" line5844=\"        let c2 = Math.idiv((((100 - Math.abs(2 * l - 100)) * s) &lt;&lt; 8), 10000); //chroma, [0,255]\" line5845=\"\" line5846=\"        let h12 = Math.idiv(h, 60);//[0,6]\" line5847=\"\" line5848=\"        let h22 = Math.idiv((h - h12 * 60) * 256, 60);//[0,255]\" line5849=\"\" line5850=\"        let temp = Math.abs((((h12 % 2) &lt;&lt; 8) + h22) - 256);\" line5851=\"\" line5852=\"        let x = (c2 * (256 - (temp))) &gt;&gt; 8;//[0,255], second largest component of this color\" line5853=\"\" line5854=\"        let r$: number;\" line5855=\"\" line5856=\"        let g$: number;\" line5857=\"\" line5858=\"        let b$: number;\" line5859=\"\" line5860=\"        if (h12 == 0) {\" line5861=\"\" line5862=\"            r$ = c2; g$ = x; b$ = 0;\" line5863=\"\" line5864=\"        } else if (h12 == 1) {\" line5865=\"\" line5866=\"            r$ = x; g$ = c2; b$ = 0;\" line5867=\"\" line5868=\"        } else if (h12 == 2) {\" line5869=\"\" line5870=\"            r$ = 0; g$ = c2; b$ = x;\" line5871=\"\" line5872=\"        } else if (h12 == 3) {\" line5873=\"\" line5874=\"            r$ = 0; g$ = x; b$ = c2;\" line5875=\"\" line5876=\"        } else if (h12 == 4) {\" line5877=\"\" line5878=\"            r$ = x; g$ = 0; b$ = c2;\" line5879=\"\" line5880=\"        } else if (h12 == 5) {\" line5881=\"\" line5882=\"            r$ = c2; g$ = 0; b$ = x;\" line5883=\"\" line5884=\"        }\" line5885=\"\" line5886=\"        let m2 = Math.idiv((Math.idiv((l * 2 &lt;&lt; 8), 100) - c2), 2);\" line5887=\"\" line5888=\"        let r4 = r$ + m2;\" line5889=\"\" line5890=\"        let g4 = g$ + m2;\" line5891=\"\" line5892=\"        let b4 = b$ + m2;\" line5893=\"\" line5894=\"        return packRGB(r4, g4, b4);\" line5895=\"\" line5896=\"    }\" line5897=\"\" line5898=\"\" line5899=\"\" line5900=\"    export enum HueInterpolationDirection {\" line5901=\"\" line5902=\"        Clockwise,\" line5903=\"\" line5904=\"        CounterClockwise,\" line5905=\"\" line5906=\"        Shortest\" line5907=\"\" line5908=\"    }\" line5909=\"\" line5910=\"    /**\" line5911=\"    \" line5912=\"    * show text in OLED\" line5913=\"    \" line5914=\"    * @param oled_x is X alis, eg: 0\" line5915=\"    \" line5916=\"    * @param oled_y is Y alis, eg: 0\" line5917=\"    \" line5918=\"    * @param s is the text will be show, eg: 'Hello!'\" line5919=\"    \" line5920=\"    */\" line5921=\"\" line5922=\"    //% blockId=&quot;OLED12864_I2C_SHOWSTRING1&quot; block=&quot;显示 文本 请选择显示位置%oled|文本 %s&quot;\" line5923=\"\" line5924=\"    //% parts=OLED12864_I2C trackArgs=0\" line5925=\"\" line5926=\"    //% oled.fieldEditor=&quot;gridpicker&quot;\" line5927=\"\" line5928=\"    //% oled.fieldOptions.width=320\" line5929=\"\" line5930=\"    //% oled.fieldOptions.columns=13\" line5931=\"\" line5932=\"    //% group=&quot;OLED显示屏&quot; subcategory=执行器\" line5933=\"\" line5934=\"    //% weight=10 blockGap=10 color=#0855AA\" line5935=\"\" line5936=\"    export function showString(oled: Oled, s: string, color: number = 1) {\" line5937=\"\" line5938=\"        let oled_x = oled % 13;\" line5939=\"\" line5940=\"        let oled_y = Math.floor(oled / 13);\" line5941=\"\" line5942=\"        let crror = 0\" line5943=\"\" line5944=\"        let col2 = 0\" line5945=\"\" line5946=\"        let q = 0\" line5947=\"\" line5948=\"        let ind2 = 0\" line5949=\"\" line5950=\"        let firstoledinit = 0\" line5951=\"\" line5952=\"        if (pins.i2cReadNumber(_I2CAddr, NumberFormat.Int8LE) == 67) {\" line5953=\"\" line5954=\"            init();\" line5955=\"\" line5956=\"        }\" line5957=\"\" line5958=\"        else {\" line5959=\"\" line5960=\"            for (let r = 0; r &lt; s.length; r++) {\" line5961=\"\" line5962=\"                q = font[s.charCodeAt(r)]\" line5963=\"\" line5964=\"                for (let o = 0; o &lt; 5; o++) {\" line5965=\"\" line5966=\"                    col2 = 0\" line5967=\"\" line5968=\"                    for (let p = 0; p &lt; 5; p++) {\" line5969=\"\" line5970=\"                        if (q &amp; (1 &lt;&lt; (5 * o + p)))\" line5971=\"\" line5972=\"                            col2 |= (1 &lt;&lt; (p + 1))\" line5973=\"\" line5974=\"                    }\" line5975=\"\" line5976=\"                    ind2 = (oled_x + r) * 5 * (_ZOOM + 1) + oled_y * 128 + o * (_ZOOM + 1) + 1\" line5977=\"\" line5978=\"                    if (color == 0)\" line5979=\"\" line5980=\"                        col2 = 255 - col2\" line5981=\"\" line5982=\"                    _screen[ind2] = col2\" line5983=\"\" line5984=\"                    if (_ZOOM)\" line5985=\"\" line5986=\"                        _screen[ind2 + 1] = col2\" line5987=\"\" line5988=\"                }\" line5989=\"\" line5990=\"            }\" line5991=\"\" line5992=\"            set_pos(oled_x * 5, oled_y)\" line5993=\"\" line5994=\"            let ind02 = oled_x * 5 * (_ZOOM + 1) + oled_y * 128\" line5995=\"\" line5996=\"            let buf72 = _screen.slice(ind02, ind2 + 1)\" line5997=\"\" line5998=\"            buf72[0] = 0x40\" line5999=\"\" line6000=\"            pins.i2cWriteBuffer(_I2CAddr, buf72)\" line6001=\"\" line6002=\"        }\" line6003=\"\" line6004=\"    }\" line6005=\"\" line6006=\"\" line6007=\"\" line6008=\"    /**\" line6009=\"    \" line6010=\"     * show a number in OLED\" line6011=\"    \" line6012=\"     * @param olednum_x is X alis, eg: 0\" line6013=\"    \" line6014=\"     * @param olednum_y is Y alis, eg: 0\" line6015=\"    \" line6016=\"     * @param num is the number will be show, eg: 12\" line6017=\"    \" line6018=\"     * @param color is number color, eg: 1\" line6019=\"    \" line6020=\"     */\" line6021=\"\" line6022=\"    //% blockId=&quot;OLED12864_I2C_NUMBER&quot; block=&quot;显示 数字 请选择显示位置%oled|数字 %num&quot;\" line6023=\"\" line6024=\"    //% parts=OLED12864_I2C trackArgs=0\" line6025=\"\" line6026=\"    //% olednum.fieldEditor=&quot;gridpicker&quot;\" line6027=\"\" line6028=\"    //% olednum.fieldOptions.width=320\" line6029=\"\" line6030=\"    //% olednum.fieldOptions.columns=13\" line6031=\"\" line6032=\"    //% group=&quot;OLED显示屏&quot; subcategory=执行器\" line6033=\"\" line6034=\"    //% weight=9 blockGap=10 color=#0855AA\" line6035=\"\" line6036=\"    export function showNumber(olednum: Oled, num: number, color: number = 1) {\" line6037=\"\" line6038=\"\" line6039=\"\" line6040=\"        let olednum_x = 0\" line6041=\"\" line6042=\"        let olednum_y = 0\" line6043=\"\" line6044=\"        olednum_x = Math.floor(olednum / 13);\" line6045=\"\" line6046=\"        olednum_y = olednum % 13;\" line6047=\"\" line6048=\"        showString(olednum, num.toString(), color)\" line6049=\"\" line6050=\"    }\" line6051=\"\" line6052=\"\" line6053=\"\" line6054=\"\" line6055=\"\" line6056=\"    export function draw() {\" line6057=\"\" line6058=\"        set_pos()\" line6059=\"\" line6060=\"        pins.i2cWriteBuffer(_I2CAddr, _screen)\" line6061=\"\" line6062=\"    }\" line6063=\"\" line6064=\"    /**\" line6065=\"     * show text in OLED\" line6066=\"     * @param x is X alis, eg: 0\" line6067=\"     * @param y is Y alis, eg: 0\" line6068=\"     * @param s is the text will be show, eg: 'Hello!'\" line6069=\"     * @param color is string color, eg: 1\" line6070=\"     */\" line6071=\"    //% blockId=&quot;OLED12864_I2C_SHOWSTRINGxy&quot; block=&quot;显示 string 在 x %x|y %y|文本 %s|颜色 %color&quot;\" line6072=\"    //% parts=OLED12864_I2C trackArgs=0\" line6073=\"    //% group=&quot;OLED显示屏&quot; subcategory=执行器\" line6074=\"    //% weight=80 blockGap=10 color=#0855AA\" line6075=\"    export function showStringxy(x: number, y: number, s: string, color: number = 1) {\" line6076=\"        let col = 0\" line6077=\"        let e = 0\" line6078=\"        let ind = 0\" line6079=\"        for (let f = 0; f &lt; s.length; f++) {\" line6080=\"            e = font[s.charCodeAt(f)]\" line6081=\"            for (let g = 0; g &lt; 5; g++) {\" line6082=\"                col = 0\" line6083=\"                for (let h = 0; h &lt; 5; h++) {\" line6084=\"                    if (e &amp; (1 &lt;&lt; (5 * g + h)))\" line6085=\"                        col |= (1 &lt;&lt; (h + 1))\" line6086=\"                }\" line6087=\"                ind = (x + f) * 5 * (_ZOOM + 1) + y * 128 + g * (_ZOOM + 1) + 1\" line6088=\"                if (color == 0)\" line6089=\"                    col = 255 - col\" line6090=\"                _screen[ind] = col\" line6091=\"                if (_ZOOM)\" line6092=\"                    _screen[ind + 1] = col\" line6093=\"            }\" line6094=\"        }\" line6095=\"        set_pos(x * 5, y)\" line6096=\"        let ind0 = x * 5 * (_ZOOM + 1) + y * 128\" line6097=\"        let buf7 = _screen.slice(ind0, ind + 1)\" line6098=\"        buf7[0] = 0x40\" line6099=\"        pins.i2cWriteBuffer(_I2CAddr, buf7)\" line6100=\"    }\" line6101=\"\" line6102=\"    /**\" line6103=\"     * show a number in OLED\" line6104=\"     * @param x is X alis, eg: 0\" line6105=\"     * @param y is Y alis, eg: 0\" line6106=\"     * @param num is the number will be show, eg: 12\" line6107=\"     * @param color is number color, eg: 1\" line6108=\"     */\" line6109=\"    //% blockId=&quot;OLED12864_I2C_NUMBERxy&quot; block=&quot;显示 数字 在 x %x|y %y|数字 %num|颜色 %color&quot;\" line6110=\"    //% parts=OLED12864_I2C trackArgs=0\" line6111=\"    //% group=&quot;OLED显示屏&quot; subcategory=执行器\" line6112=\"    //% weight=80 blockGap=10 color=#0855AA\" line6113=\"    export function showNumberxy(x: number, y: number, num: number, color: number = 1) {\" line6114=\"        showStringxy(x, y, num.toString(), color)\" line6115=\"    }\" line6116=\"\" line6117=\"\" line6118=\"    /**\" line6119=\"    \" line6120=\"     * clear screen\" line6121=\"    \" line6122=\"     */\" line6123=\"\" line6124=\"    //% blockId=&quot;OLED12864_I2C_CLEAR&quot; block=&quot;清除&quot;\" line6125=\"\" line6126=\"    //% parts=OLED12864_I2C trackArgs=0\" line6127=\"\" line6128=\"    //% group=&quot;OLED显示屏&quot; subcategory=执行器\" line6129=\"\" line6130=\"    //% weight=8 blockGap=10 color=#0855AA\" line6131=\"\" line6132=\"    export function clear() {\" line6133=\"\" line6134=\"        _screen.fill(0)\" line6135=\"\" line6136=\"        _screen[0] = 0x40\" line6137=\"\" line6138=\"        draw()\" line6139=\"\" line6140=\"    }\" line6141=\"\" line6142=\"\" line6143=\"\" line6144=\"    /**\" line6145=\"    \" line6146=\"     * OLED initialize\" line6147=\"    \" line6148=\"     * @param addr is i2c addr, eg: 60\" line6149=\"    \" line6150=\"     */\" line6151=\"\" line6152=\"    //% blockId=&quot;OLED12864_I2C_init&quot; block=&quot;初始化 OLED &quot;\" line6153=\"\" line6154=\"    //% parts=OLED12864_I2C trackArgs=0\" line6155=\"\" line6156=\"    //% weight=11 blockGap=10\" line6157=\"\" line6158=\"    //% group=&quot;OLED显示屏&quot; subcategory=执行器\" line6159=\"\" line6160=\"    //% blockGap=10  color=#0855AA\" line6161=\"\" line6162=\"    export function init() {\" line6163=\"\" line6164=\"        _I2CAddr = 60;\" line6165=\"\" line6166=\"        cmd1(0xAE)       // SSD1306_DISPLAYOFF\" line6167=\"\" line6168=\"        cmd1(0xA4)       // SSD1306_DISPLAYALLON_RESUME\" line6169=\"\" line6170=\"        cmd2(0xD5, 0xF0) // SSD1306_SETDISPLAYCLOCKDIV\" line6171=\"\" line6172=\"        cmd2(0xA8, 0x3F) // SSD1306_SETMULTIPLEX\" line6173=\"\" line6174=\"        cmd2(0xD3, 0x00) // SSD1306_SETDISPLAYOFFSET\" line6175=\"\" line6176=\"        cmd1(0 | 0x0)    // line #SSD1306_SETSTARTLINE\" line6177=\"\" line6178=\"        cmd2(0x8D, 0x14) // SSD1306_CHARGEPUMP\" line6179=\"\" line6180=\"        cmd2(0x20, 0x00) // SSD1306_MEMORYMODE\" line6181=\"\" line6182=\"        cmd3(0x21, 0, 127) // SSD1306_COLUMNADDR\" line6183=\"\" line6184=\"        cmd3(0x22, 0, 63)  // SSD1306_PAGEADDR\" line6185=\"\" line6186=\"        cmd1(0xa0 | 0x1) // SSD1306_SEGREMAP\" line6187=\"\" line6188=\"        cmd1(0xc8)       // SSD1306_COMSCANDEC\" line6189=\"\" line6190=\"        cmd2(0xDA, 0x12) // SSD1306_SETCOMPINS\" line6191=\"\" line6192=\"        cmd2(0x81, 0xCF) // SSD1306_SETCONTRAST\" line6193=\"\" line6194=\"        cmd2(0xd9, 0xF1) // SSD1306_SETPRECHARGE\" line6195=\"\" line6196=\"        cmd2(0xDB, 0x40) // SSD1306_SETVCOMDETECT\" line6197=\"\" line6198=\"        cmd1(0xA6)       // SSD1306_NORMALDISPLAY\" line6199=\"\" line6200=\"        cmd2(0xD6, 1)    // zoom on\" line6201=\"\" line6202=\"        cmd1(0xAF)       // SSD1306_DISPLAYON\" line6203=\"\" line6204=\"        clear()\" line6205=\"\" line6206=\"        _ZOOM = 1\" line6207=\"\" line6208=\"    }\" line6209=\"\" line6210=\"\" line6211=\"    /////////////////录音模块///////////////////\" line6212=\"\" line6213=\"\" line6214=\"    //% blockId=&quot;record_id&quot; block=&quot;录音模块-播放 %recordID &quot;\" line6215=\"\" line6216=\"    //% magState.shadow=&quot;toggleOnOff&quot;\" line6217=\"\" line6218=\"    //% weight=2\" line6219=\"\" line6220=\"    //% recordID.fieldEditor=&quot;gridpicker&quot;\" line6221=\"\" line6222=\"    //% recordID.fieldOptions.width=220\" line6223=\"\" line6224=\"    //% recordID.fieldOptions.columns=2\" line6225=\"\" line6226=\"    //% expandableArgumentMode=&quot;toggle&quot;\" line6227=\"\" line6228=\"    //% group=&quot;录音模块&quot; subcategory=执行器\" line6229=\"\" line6230=\"    export function Record_id(recordID: Record_list): void {\" line6231=\"        pins.i2cWriteNumber(0x18, recordID, NumberFormat.UInt8BE)\" line6232=\"        basic.pause(8000)\" line6233=\"    }\" line6234=\"\" line6235=\"\" line6236=\"\" line6237=\"    enum Recodpin {\" line6238=\"        //% block=&quot;(P0,P13)&quot;\" line6239=\"\" line6240=\"        rc1 = 13,\" line6241=\"        //% block=&quot;(P1,P14)&quot;\" line6242=\"\" line6243=\"        rc2 = 114,\" line6244=\"\" line6245=\"        //% block=&quot;(P2,P15)&quot;\" line6246=\"\" line6247=\"        rc3 = 215\" line6248=\"    }\" line6249=\"\" line6250=\"\" line6251=\"\" line6252=\"\" line6253=\"    /**\" line6254=\" \" line6255=\"   //% blockId=&quot;test&quot; block=&quot;读取P0、P1、P2端口模拟值 &quot;\" line6256=\" \" line6257=\"   //% subcategory=测试专用\" line6258=\" \" line6259=\"   export function Test(): string {\" line6260=\" \" line6261=\"       let a0 = 0;\" line6262=\" \" line6263=\"       let a1 = 0;\" line6264=\" \" line6265=\"       let a2 = 0;\" line6266=\" \" line6267=\"       let p1 = '';\" line6268=\" \" line6269=\" \" line6270=\" \" line6271=\"       a0 = pins.map(\" line6272=\" \" line6273=\"           pins.analogReadPin(AnalogPin.P0),\" line6274=\" \" line6275=\"           0,\" line6276=\" \" line6277=\"           1023,\" line6278=\" \" line6279=\"           0,\" line6280=\" \" line6281=\"           1023\" line6282=\" \" line6283=\"       );\" line6284=\" \" line6285=\"       a1 = pins.map(\" line6286=\" \" line6287=\"           pins.analogReadPin(AnalogPin.P1),\" line6288=\" \" line6289=\"           0,\" line6290=\" \" line6291=\"           1023,\" line6292=\" \" line6293=\"           0,\" line6294=\" \" line6295=\"           1023\" line6296=\" \" line6297=\"       );\" line6298=\" \" line6299=\"       a2 = pins.map(\" line6300=\" \" line6301=\"           pins.analogReadPin(AnalogPin.P2),\" line6302=\" \" line6303=\"           0,\" line6304=\" \" line6305=\"           1023,\" line6306=\" \" line6307=\"           0,\" line6308=\" \" line6309=\"           1023\" line6310=\" \" line6311=\"       );\" line6312=\" \" line6313=\" \" line6314=\" \" line6315=\"       p1 = a0 + ';' + a1 + ';' + a2\" line6316=\" \" line6317=\"       return p1\" line6318=\" \" line6319=\"   }\" line6320=\" \" line6321=\" \" line6322=\" \" line6323=\"   //% blockId=&quot;test2&quot; block=&quot;读取各端口的数字值 &quot;\" line6324=\" \" line6325=\"   //% subcategory=测试\" line6326=\" \" line6327=\"   export function Test2(): string {\" line6328=\" \" line6329=\"       let d0 = 0;\" line6330=\" \" line6331=\"       let d1 = 0;\" line6332=\" \" line6333=\"       let d2 = 0;\" line6334=\" \" line6335=\"       let d8 = 0;\" line6336=\" \" line6337=\"       let d12 = 0;\" line6338=\" \" line6339=\"       let d16 = 0;\" line6340=\" \" line6341=\"       let p = '';\" line6342=\" \" line6343=\" \" line6344=\" \" line6345=\"       d0 = pins.digitalReadPin(DigitalPin.P0)\" line6346=\" \" line6347=\"       d1 = pins.digitalReadPin(DigitalPin.P1);\" line6348=\" \" line6349=\"       d2 = pins.digitalReadPin(DigitalPin.P2);\" line6350=\" \" line6351=\"       d8 = pins.digitalReadPin(DigitalPin.P8);\" line6352=\" \" line6353=\"       d12 = pins.digitalReadPin(DigitalPin.P12)\" line6354=\" \" line6355=\"       d16 = pins.digitalReadPin(DigitalPin.P16);\" line6356=\" \" line6357=\" \" line6358=\" \" line6359=\" \" line6360=\" \" line6361=\"       p = d0 + ';' + d1 + ';' + d2 + ';' + d8 + ';' + d12 + ';' + d16\" line6362=\" \" line6363=\"       return p\" line6364=\" \" line6365=\"   }**/\" line6366=\"\" line6367=\"\" line6368=\"}\" numlines=\"6369\"></mutation></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></xml>","main.ts":"enum Oled {\n\n    //% block=\" \"\n\n    oled1 = 0,\n\n    //% block=\" \"\n\n    oled2 = 1,\n\n    //% block=\" \"\n\n    oled3 = 2,\n\n    //% block=\" \"\n\n    oled4 = 3,\n\n    //% block=\" \"\n\n    oled5 = 4,\n\n    //% block=\" \"\n\n    oled6 = 5,\n\n    //% block=\" \"\n\n    oled7 = 6,\n\n    //% block=\" \"\n\n    oled8 = 7,\n\n    //% block=\" \"\n\n    oled9 = 8,\n\n    //% block=\" \"\n\n    oled10 = 9,\n\n    //% block=\" \"\n\n    oled11 = 10,\n\n    //% block=\" \"\n\n    oled12 = 11,\n\n    //% block=\" \"\n\n    oled13 = 12,\n\n    //% block=\" \"\n\n    oled14 = 13,\n\n    //% block=\" \"\n\n    oled15 = 14,\n\n    //% block=\" \"\n\n    oled16 = 15,\n\n    //% block=\" \"\n\n    oled17 = 16,\n\n    //% block=\" \"\n\n    oled18 = 17,\n\n    //% block=\" \"\n\n    oled19 = 18,\n\n    //% block=\" \"\n\n    oled20 = 19,\n\n    //% block=\" \"\n\n    oled21 = 20,\n\n    //% block=\" \"\n\n    oled22 = 21,\n\n    //% block=\" \"\n\n    oled23 = 22,\n\n    //% block=\" \"\n\n    oled24 = 23,\n\n    //% block=\" \"\n\n    oled25 = 24,\n\n    //% block=\" \"\n\n    oled26 = 25,\n\n    //% block=\" \"\n\n    oled27 = 26,\n\n    //% block=\" \"\n\n    oled28 = 27,\n\n    //% block=\" \"\n\n    oled29 = 28,\n\n    //% block=\" \"\n\n    oled30 = 29,\n\n    //% block=\" \"\n\n    oled31 = 30,\n\n    //% block=\" \"\n\n    oled32 = 31,\n\n    //% block=\" \"\n\n    oled33 = 32,\n\n    //% block=\" \"\n\n    oled34 = 33,\n\n    //% block=\" \"\n\n    oled35 = 34,\n\n    //% block=\" \"\n\n    oled36 = 35,\n\n    //% block=\" \"\n\n    oled37 = 36,\n\n    //% block=\" \"\n\n    oled38 = 37,\n\n    //% block=\" \"\n\n    oled39 = 38,\n\n    //% block=\" \"\n\n    oled40 = 39,\n\n    //% block=\" \"\n\n    oled41 = 40,\n\n    //% block=\" \"\n\n    oled42 = 41,\n\n    //% block=\" \"\n\n    oled43 = 42,\n\n    //% block=\" \"\n\n    oled44 = 43,\n\n    //% block=\" \"\n\n    oled45 = 44,\n\n    //% block=\" \"\n\n    oled46 = 45,\n\n    //% block=\" \"\n\n    oled47 = 46,\n\n    //% block=\" \"\n\n    oled48 = 47,\n\n    //% block=\" \"\n\n    oled49 = 48,\n\n    //% block=\" \"\n\n    oled50 = 49,\n\n    //% block=\" \"\n\n    oled51 = 50,\n\n    //% block=\" \"\n\n    oled52 = 51,\n\n\n\n\n\n}\nenum Write_pin {\n\n    //% block=\"P0\"\n\n    w0 = 1,\n\n    //% block=\"P16\"\n\n    w1 = 2,\n\n    //% block=\"P1\"\n\n    w2 = 3,\n\n    //% block=\"P12\"\n\n    w3 = 4,\n\n    //% block=\"P2\"\n\n    w4 = 5,\n\n    //% block=\"P8\"\n\n    w5 = 6\n\n\n\n}\nenum Read_pin {\n\n    //% block=\"P0\"\n\n    r0 = 1,\n\n    //% block=\"P1\"\n\n    r1 = 2,\n\n    //% block=\"P2\"\n\n    r2 = 3\n\n\n\n}\nenum Ultrasonic_pin {\n\n    //% block=\"(P0,P13)\"\n\n    u1 = 13,\n\n    //% block=\"(P16,P10)\"\n\n    u2 = 1610,\n\n    //% block=\"(P1,P14)\"\n\n    u3 = 114,\n\n    //% block=\"(P12,P9)\"\n\n    u4 = 129,\n\n    //% block=\"(P2,P15)\"\n\n    u5 = 215,\n\n    //% block=\"(P8,P7)\"\n\n    u6 = 87\n\n}\nenum Recodpin {\n\n    //% block=\"(P0,P13)\"\n\n    rc1 = 13,\n    //% block=\"(P1,P14)\"\n\n    rc2 = 114,\n\n    //% block=\"(P2,P15)\"\n\n    rc3 = 215\n\n}\nenum Record_list {//\n\n    //% block=\"声音1\"\n\n    rl1 = 1,\n\n    //% block=\"声音2\"\n\n    rl2 = 2,\n\n    //% block=\"声音3\"\n\n    rl3 = 3,\n    //% block=\"声音4\"\n\n    rl4 = 4,\n    //% block=\"声音5\"\n\n    rl5 = 5,\n    //% block=\"录音\"\n\n    rl6 = 6\n\n}\nenum PingUnit {\n\n    //% block=\"厘米\"\n\n    Centimeters,\n\n    //% block=\"微秒\"\n\n    MicroSeconds,\n\n\n\n    //% block=\"英寸\"\n\n    Inches\n\n}\nenum Grayscale_pin {\n\n    //% block=\"P13\"\n\n    g0 = 1,\n\n    //% block=\"P16\"\n\n    g1 = 2,\n\n    //% block=\"P0\"\n\n    g2 = 3,\n\n    //% block=\"P10\"\n\n    g3 = 4,\n\n    //% block=\"P14\"\n\n    g4 = 5,\n\n    //% block=\"P12\"\n\n    g5 = 6,\n\n    //% block=\"P1\"\n\n    g6 = 7,\n\n    //% block=\"P9\"\n\n    g7 = 8,\n\n    //% block=\"P15\"\n\n    g8 = 9,\n\n    //% block=\"P8\"\n\n    g9 = 10,\n\n    //% block=\"P2\"\n\n    g10 = 11,\n\n    //% block=\"P7\"\n\n    g11 = 12\n\n}\nenum gs {\n\n    //% block=\"上\"\n\n    g0 = 1,\n\n    //% block=\"下\"\n\n    g1 = 2,\n\n    //% block=\"左\"\n\n    g2 = 3,\n\n    //% block=\"右\"\n\n    g3 = 4\n\n\n\n}\nenum PINs {\n\n    P0,\n\n    P1,\n\n    P2,\n\n    P3,\n\n    P4,\n\n    P5,\n\n    P6,\n\n    P7,\n\n    P8,\n\n    P9,\n\n    P10,\n\n    P11,\n\n    P12,\n\n    P13,\n\n    P14,\n\n    P15,\n\n    P16,\n\n    P19,\n\n    P20\n\n}\nenum TMP36Type {\n\n    //% block=\"(℃)\" enumval=0\n\n    TMP36_temperature_C,\n\n\n\n    //% block=\"(℉)\" enumval=1\n\n    TMP36_temperature_F,\n\n}\nenum RGB {\n\n    //% block=\"红\"\n\n    RED,\n\n    //% block=\"绿\"\n\n    GREEN,\n\n    //% block=\"蓝\"\n\n    BLUE,\n\n    //% block=\"全部\"\n\n    CLEAR\n\n}\nenum NeoPixelColors {\n\n    //% block=红\n\n    Red = 0xFF0000,\n\n    //% block=橙\n\n    Orange = 0xFFA500,\n\n    //% block=黄\n\n    Yellow = 0xFFFF00,\n\n    //% block=绿\n\n    Green = 0x00FF00,\n\n    //% block=蓝\n\n    Blue = 0x0000FF,\n\n    //% block=靛蓝\n\n    Indigo = 0x4b0082,\n\n    //% block=紫罗兰\n\n    Violet = 0x8a2be2,\n\n    //% block=紫\n\n    Purple = 0xFF00FF,\n\n    //% block=白\n\n    White = 0xFFFFFF,\n\n    //% block=黑\n\n    Black = 0x000000\n\n}\nenum NeoPixelMode {\n\n    //% block=\"RGB (GRB 格式)\"\n\n    RGB = 1,\n\n    //% block=\"RGB+W\"\n\n    RGBW = 2,\n\n    //% block=\"RGB (RGB 格式)\"\n\n    RGB_RGB = 3\n\n}\nnamespace Microbit {\n\n\n\n    export enum DHT11_state {\n\n        //% block=\"温度(℃)\" enumval=0\n\n        DHT11_temperature_C,\n\n\n\n        //% block=\"湿度(0~100)\" enumval=1\n\n        DHT11_humidity,\n\n    }\n\n\n\n    export enum Distance_Unit_List {\n\n        //% block=\"厘米\" \n\n        Distance_Unit_cm,\n\n\n\n        //% block=\"英寸\"\n\n        Distance_Unit_inch,\n\n    }\n\n\n\n    //% blockId=buttonState\n\n    //% weight=27\n\n    //% buttonpin.fieldEditor=\"gridpicker\"\n\n    //% buttonpin.fieldOptions.width=220\n\n    //% buttonpin.fieldOptions.columns=2\n\n    //% block=\"按钮传感器 %buttonpin\"\n\n    //% subcategory=传感器\n\n    export function buttonState(buttonpin: Write_pin): number {\n\n        let pin16\n\n        if (buttonpin == 1) {\n\n\n\n            pin16 = DigitalPin.P0;\n\n        }\n\n        if (buttonpin == 2) {\n\n            pin16 = DigitalPin.P16;\n\n        }\n\n        if (buttonpin == 3) {\n\n            pin16 = DigitalPin.P1;\n\n        }\n\n        if (buttonpin == 4) {\n\n\n\n            pin16 = DigitalPin.P12;\n\n        }\n\n        if (buttonpin == 5) {\n\n            pin16 = DigitalPin.P2;\n\n        }\n\n        if (buttonpin == 6) {\n\n            pin16 = DigitalPin.P8;\n\n        }\n\n\n\n\n\n        return pins.digitalReadPin(pin16);\n\n    }\n\n\n\n    //% blockId=hState\n\n    //% weight=27\n\n    //% hallpin.fieldEditor=\"gridpicker\"\n\n    //% hallpin.fieldOptions.width=220\n\n    //% hallpin.fieldOptions.columns=1\n\n    //% block=\"霍尔传感器 %hallpin\"\n\n    //% subcategory=传感器\n\n    export function hState(hallpin: Read_pin): number {\n\n        let pin18\n\n        if (hallpin == 1) {\n\n\n\n            pin18 = AnalogPin.P0;\n\n        }\n\n        if (hallpin == 2) {\n\n            pin18 = AnalogPin.P1;\n\n        }\n\n        if (hallpin == 3) {\n\n            pin18 = AnalogPin.P2;\n\n        }\n        if (pins.analogReadPin(pin18) < 512)\n            return (0);\n        else\n            return (1);\n\n    }\n\n\n\n    //% blockId=farState\n\n    //% weight=38\n\n    //% farStatepin.fieldEditor=\"gridpicker\"\n\n    //% farStatepin.fieldOptions.width=220\n\n    //% farStatepin.fieldOptions.columns=2\n\n    //% block=\"远距离光电传感器 %farStatepin\"\n\n    //% subcategory=传感器\n\n    export function farState(farStatepin: Write_pin): number {\n\n        let pin17\n\n        if (farStatepin == 1) {\n\n\n\n            pin17 = DigitalPin.P0;\n\n        }\n\n        if (farStatepin == 2) {\n\n            pin17 = DigitalPin.P16;\n\n        }\n\n        if (farStatepin == 3) {\n\n            pin17 = DigitalPin.P1;\n\n        }\n\n        if (farStatepin == 4) {\n\n\n\n            pin17 = DigitalPin.P12;\n\n        }\n\n        if (farStatepin == 5) {\n\n            pin17 = DigitalPin.P2;\n\n        }\n\n        if (farStatepin == 6) {\n\n            pin17 = DigitalPin.P8;\n\n        }\n\n        return pins.digitalReadPin(pin17);\n\n    }\n\n\n\n    //% blockId=potentiometerRead\n\n    //% weight=37\n\n    //% potentiometerpin.fieldEditor=\"gridpicker\"\n\n    //% potentiometerpin.fieldOptions.width=220\n\n    //% potentiometerpin.fieldOptions.columns=1\n\n    //% block=\"电位器 %potentiometerpin\"\n\n    //% subcategory=传感器\n\n    export function potentiometerRead(potentiometerpin: Read_pin): number {\n\n        let pin15\n\n        if (potentiometerpin == 1) {\n\n\n\n            pin15 = AnalogPin.P0;\n\n        }\n\n        if (potentiometerpin == 2) {\n\n            pin15 = AnalogPin.P1;\n\n        }\n\n        if (potentiometerpin == 3) {\n\n            pin15 = AnalogPin.P2;\n\n        }\n\n        return pins.analogReadPin(pin15);\n\n    }\n\n\n\n    //% blockId=\"ReadGrayLevel\" block=\"灰度传感器 %graylevelpin\"\n\n    //% weight=36\n\n    //% graylevelpin.fieldEditor=\"gridpicker\"\n\n    //% graylevelpin.fieldOptions.width=220\n\n    //% graylevelpin.fieldOptions.columns=1\n\n    //% subcategory=传感器\n\n    export function ReadGrayLevel(graylevelpin: Read_pin): number {\n\n        let voltage7 = 0;\n\n        let grayLevel = 0;\n\n        let pin13\n\n        if (graylevelpin == 1) {\n\n\n\n            pin13 = AnalogPin.P0;\n\n        }\n\n        if (graylevelpin == 2) {\n\n            pin13 = AnalogPin.P1;\n\n        }\n\n        if (graylevelpin == 3) {\n\n            pin13 = AnalogPin.P2;\n\n        }\n\n        voltage7 = pins.map(\n\n            pins.analogReadPin(pin13),\n\n            0,\n\n            1023,\n\n            80,\n\n            1023\n\n        );\n\n        grayLevel = voltage7;\n\n        return Math.round(grayLevel);\n\n    }\n\n\n\n    //% blockId=\"readlightintensity\" block=\"光敏传感器 %lightintensitypin\"\n\n    //% weight=35\n\n    //% lightintensitypin.fieldEditor=\"gridpicker\"\n\n    //% lightintensitypin.fieldOptions.width=220\n\n    //% lightintensitypin.fieldOptions.columns=1\n\n    //% subcategory=传感器\n\n    export function ReadLightIntensity(lightintensitypin: Read_pin): number {\n\n        let voltage2 = 0;\n\n        let lightintensity = 0;\n\n        let pin2\n\n        if (lightintensitypin == 1) {\n\n            pin2 = AnalogPin.P0;\n\n\n\n        }\n\n        if (lightintensitypin == 2) {\n\n            pin2 = AnalogPin.P1;\n\n        }\n\n        if (lightintensitypin == 3) {\n\n            pin2 = AnalogPin.P2;\n\n\n\n        }\n\n        voltage2 = pins.map(\n\n            pins.analogReadPin(pin2),\n\n            0,\n\n            1023,\n\n            0,\n\n            1023\n\n        );\n\n        lightintensity = voltage2;\n\n        return Math.round(1023 - lightintensity);\n\n\n\n    }\n\n\n\n    //% blockId=\"Readflame\" block=\"火焰传感器 %flamepin\"\n\n    //% weight=34\n\n    //% flamepin.fieldEditor=\"gridpicker\"\n\n    //% flamepin.fieldOptions.width=220\n\n    //% flamepin.fieldOptions.columns=1\n\n    //% subcategory=传感器\n\n    export function Readflame(flamepin: Read_pin): number {\n\n        let voltage6 = 0;\n\n        let flame = 0;\n\n        let pin12\n\n        if (flamepin == 1) {\n\n\n\n            pin12 = AnalogPin.P0;\n\n        }\n\n        if (flamepin == 2) {\n\n            pin12 = AnalogPin.P1;\n\n        }\n\n        if (flamepin == 3) {\n\n            pin12 = AnalogPin.P2;\n\n        }\n\n        voltage6 = pins.map(\n\n            pins.analogReadPin(pin12),\n\n            0,\n\n            1023,\n\n            0,\n\n            1023\n\n        );\n\n        flame = voltage6;\n\n        return Math.round(1023 - flame);\n\n    }\n\n\n\n    //% blockId=\"octopus_ReadWaterLevel\" block=\"水位传感器 %waterlevelpin\"\n\n    //% weight=33\n\n    //% waterlevelpin.fieldEditor=\"gridpicker\"\n\n    //% waterlevelpin.fieldOptions.width=220\n\n    //% waterlevelpin.fieldOptions.columns=1\n\n    //% subcategory=传感器\n\n\n\n    export function ReadWaterLevel(waterlevelpin: Read_pin): number {\n\n        let voltage4 = 0;\n\n        let waterLevel = 0;\n\n        let pin10\n\n        if (waterlevelpin == 1) {\n\n\n\n            pin10 = AnalogPin.P0;\n\n        }\n\n        if (waterlevelpin == 2) {\n\n            pin10 = AnalogPin.P1;\n\n        }\n\n        if (waterlevelpin == 3) {\n\n            pin10 = AnalogPin.P2;\n\n        }\n\n        voltage4 = pins.analogReadPin(pin10);\n\n        if (voltage4 > 620) { waterLevel = 100; }\n\n        else if (voltage4 > 618) { waterLevel = 98; }\n\n        else if (voltage4 > 617) { waterLevel = 96; }\n\n        else if (voltage4 > 616) { waterLevel = 94; }\n\n        else if (voltage4 > 614) { waterLevel = 92; }\n\n        else if (voltage4 > 612) { waterLevel = 90; }\n\n        else if (voltage4 > 610) { waterLevel = 88; }\n\n        else if (voltage4 > 609) { waterLevel = 86; }\n\n        else if (voltage4 > 607) { waterLevel = 85; }\n\n        else if (voltage4 > 606) { waterLevel = 83; }\n\n        else if (voltage4 > 605) { waterLevel = 81; }\n\n        else if (voltage4 > 604) { waterLevel = 80; }\n\n        else if (voltage4 > 603) { waterLevel = 78; }\n\n        else if (voltage4 > 602) { waterLevel = 77; }\n\n        else if (voltage4 > 600) { waterLevel = 75; }\n\n        else if (voltage4 > 598) { waterLevel = 73; }\n\n        else if (voltage4 > 596) { waterLevel = 72; }\n\n        else if (voltage4 > 594) { waterLevel = 70; }\n\n        else if (voltage4 > 592) { waterLevel = 68; }\n\n        else if (voltage4 > 590) { waterLevel = 65; }\n\n        else if (voltage4 > 588) { waterLevel = 63; }\n\n        else if (voltage4 > 586) { waterLevel = 62; }\n\n        else if (voltage4 > 583) { waterLevel = 60; }\n\n        else if (voltage4 > 580) { waterLevel = 58; }\n\n        else if (voltage4 > 575) { waterLevel = 56; }\n\n        else if (voltage4 > 574) { waterLevel = 55; }\n\n        else if (voltage4 > 573) { waterLevel = 54; }\n\n\n\n        else if (voltage4 > 572) { waterLevel = 53; }\n\n        else if (voltage4 > 570) { waterLevel = 52; }\n\n        else if (voltage4 > 568) { waterLevel = 51; }\n\n        else if (voltage4 > 566) { waterLevel = 50; }\n\n        else if (voltage4 > 563) { waterLevel = 49; }\n\n        else if (voltage4 > 560) { waterLevel = 48; }\n\n        else if (voltage4 > 557) { waterLevel = 47; }\n\n        else if (voltage4 > 554) { waterLevel = 46; }\n\n        else if (voltage4 > 551) { waterLevel = 45; }\n\n        else if (voltage4 > 548) { waterLevel = 44; }\n\n        else if (voltage4 > 545) { waterLevel = 43; }\n\n        else if (voltage4 > 542) { waterLevel = 42; }\n\n        else if (voltage4 > 539) { waterLevel = 41; }\n\n        else if (voltage4 > 536) { waterLevel = 40; }\n\n        else if (voltage4 > 533) { waterLevel = 39; }\n\n        else if (voltage4 > 530) { waterLevel = 38; }\n\n        else if (voltage4 > 527) { waterLevel = 37; }\n\n        else if (voltage4 > 523) { waterLevel = 36; }\n\n        else if (voltage4 > 516) { waterLevel = 35; }\n\n        else if (voltage4 > 510) { waterLevel = 34; }\n\n        else if (voltage4 > 506) { waterLevel = 33; }\n\n        else if (voltage4 > 500) { waterLevel = 32; }\n\n        else if (voltage4 > 497) { waterLevel = 31; }\n\n        else if (voltage4 > 494) { waterLevel = 30; }\n\n        else if (voltage4 > 481) { waterLevel = 29; }\n\n        else if (voltage4 > 478) { waterLevel = 28; }\n\n        else if (voltage4 > 475) { waterLevel = 27; }\n\n        else if (voltage4 > 472) { waterLevel = 26; }\n\n        else if (voltage4 > 469) { waterLevel = 25; }\n\n        else if (voltage4 > 466) { waterLevel = 24; }\n\n        else if (voltage4 > 463) { waterLevel = 23; }\n\n        else if (voltage4 > 460) { waterLevel = 22; }\n\n        else if (voltage4 > 457) { waterLevel = 21; }\n\n        else if (voltage4 > 454) { waterLevel = 19; }\n\n        else if (voltage4 > 451) { waterLevel = 18; }\n\n        else if (voltage4 > 448) { waterLevel = 17; }\n\n        else if (voltage4 > 445) { waterLevel = 16; }\n\n        else if (voltage4 > 442) { waterLevel = 15; }\n\n        else if (voltage4 > 439) { waterLevel = 14; }\n\n        else if (voltage4 > 436) { waterLevel = 13; }\n\n        else if (voltage4 > 433) { waterLevel = 12; }\n\n        else if (voltage4 > 430) { waterLevel = 11; }\n\n        else if (voltage4 > 427) { waterLevel = 10; }\n\n        else if (voltage4 > 424) { waterLevel = 9; }\n\n        else if (voltage4 > 421) { waterLevel = 8; }\n\n        else if (voltage4 > 418) { waterLevel = 7; }\n\n        else if (voltage4 > 415) { waterLevel = 6; }\n\n        else if (voltage4 > 412) { waterLevel = 5; }\n\n        else if (voltage4 > 409) { waterLevel = 4; }\n\n        else if (voltage4 > 406) { waterLevel = 3; }\n\n        else if (voltage4 > 403) { waterLevel = 2; }\n\n        else if (voltage4 > 400) { waterLevel = 1; }\n\n        else { waterLevel = 0; }\n\n\n\n        return Math.round(waterLevel);\n\n    }\n\n\n\n    //% blockId=\"ReadGasConcentration\" block=\"可燃气体传感器 %gasconcentrationpin\"\n\n    //% weight=32\n\n    //% gasconcentrationpin.fieldEditor=\"gridpicker\"\n\n    //% gasconcentrationpin.fieldOptions.width=220\n\n    //% gasconcentrationpin.fieldOptions.columns=1\n\n    //% subcategory=传感器\n\n    export function ReadGasConcentration(gasconcentrationpin: Read_pin): number {\n\n        let voltage5 = 0;\n\n        let gasConcentration = 0;\n\n        let pin11\n\n        if (gasconcentrationpin == 1) {\n\n\n\n            pin11 = AnalogPin.P0;\n\n        }\n\n        if (gasconcentrationpin == 2) {\n\n            pin11 = AnalogPin.P1;\n\n        }\n\n        if (gasconcentrationpin == 3) {\n\n            pin11 = AnalogPin.P2;\n\n        }\n\n        voltage5 = pins.map(\n\n            pins.analogReadPin(pin11),\n\n            0,\n\n            1023,\n\n            0,\n\n            1023\n\n        );\n\n        gasConcentration = voltage5;\n\n        return Math.round(gasConcentration);\n\n    }\n\n\n\n    //% blockId=\"readsoilmoisture\" block=\"土壤湿度传感器 %soilhumiditypin\"\n\n    //% weight=31\n\n    //% soilmoisturepin.fieldEditor=\"gridpicker\"\n\n    //% soilmoisturepin.fieldOptions.width=220\n\n    //% soilmoisturepin.fieldOptions.columns=1\n\n    //% subcategory=传感器\n\n    export function ReadSoilHumidity(soilmoisturepin: Read_pin): number {\n\n        let voltage = 0;\n\n        let soilmoisture = 0;\n\n        let pin\n\n        if (soilmoisturepin == 1) {\n\n            pin = AnalogPin.P0;\n\n        }\n\n        if (soilmoisturepin == 2) {\n\n            pin = AnalogPin.P1;\n\n        }\n\n        if (soilmoisturepin == 3) {\n\n            pin = AnalogPin.P2;\n\n\n\n        }\n\n        voltage = pins.map(\n\n            pins.analogReadPin(pin),\n\n            0,\n\n            1023,\n\n            0,\n\n            1023\n\n        );\n\n        soilmoisture = voltage;\n\n        return Math.round(soilmoisture);\n\n    }\n\n\n\n    //% blockId=\"readWaterTemp\" block=\"防水温度传感器 %waterproofpin\"\n\n    //% weight=30\n\n    //% waterproofpin.fieldEditor=\"gridpicker\"\n\n    //% waterproofpin.fieldOptions.width=220\n\n    //% waterproofpin.fieldOptions.columns=1\n\n    //% subcategory=传感器\n\n    export function readWaterTemp(waterproofpin: Read_pin): number {\n\n        let voltage22 = 0;\n\n        let waterProofTemp = 0;\n\n        let pin14\n\n        if (waterproofpin == 1) {\n\n\n\n            pin14 = AnalogPin.P0;\n\n        }\n\n        if (waterproofpin == 2) {\n\n            pin14 = AnalogPin.P1;\n\n        }\n\n        if (waterproofpin == 3) {\n\n            pin14 = AnalogPin.P2;\n\n        }\n\n        voltage22 = pins.analogReadPin(pin14);//%获得原始值\n\n        if (voltage22 > 1001) { waterProofTemp = 100; }\n\n        else if (voltage22 > 1000) { waterProofTemp = 98; }\n\n        else if (voltage22 > 999) { waterProofTemp = 97; }\n\n        else if (voltage22 > 998) { waterProofTemp = 96; }\n\n        else if (voltage22 > 997) { waterProofTemp = 95; }\n\n        else if (voltage22 > 996) { waterProofTemp = 93; }\n\n        else if (voltage22 > 995) { waterProofTemp = 92; }\n\n        else if (voltage22 > 994) { waterProofTemp = 91; }\n\n        else if (voltage22 > 993) { waterProofTemp = 90; }\n\n        else if (voltage22 > 992) { waterProofTemp = 89; }\n\n        else if (voltage22 > 991) { waterProofTemp = 88; }\n\n        else if (voltage22 > 990) { waterProofTemp = 87; }\n\n        else if (voltage22 > 989) { waterProofTemp = 86; }\n\n        else if (voltage22 > 988) { waterProofTemp = 85; }\n\n        else if (voltage22 > 987) { waterProofTemp = 84; }\n\n        else if (voltage22 > 986) { waterProofTemp = 83; }\n\n        else if (voltage22 > 985) { waterProofTemp = 82; }\n\n        else if (voltage22 > 984) { waterProofTemp = 81; }\n\n        else if (voltage22 > 982) { waterProofTemp = 80; }\n\n        else if (voltage22 > 981) { waterProofTemp = 79; }\n\n        else if (voltage22 > 980) { waterProofTemp = 78; }\n\n        else if (voltage22 > 978) { waterProofTemp = 77; }\n\n        else if (voltage22 > 977) { waterProofTemp = 76; }\n\n        else if (voltage22 > 975) { waterProofTemp = 75; }\n\n        else if (voltage22 > 974) { waterProofTemp = 74; }\n\n        else if (voltage22 > 972) { waterProofTemp = 73; }\n\n        else if (voltage22 > 971) { waterProofTemp = 72; }\n\n        else if (voltage22 > 969) { waterProofTemp = 71; }\n\n        else if (voltage22 > 967) { waterProofTemp = 70; }\n\n        else if (voltage22 > 965) { waterProofTemp = 69; }\n\n        else if (voltage22 > 963) { waterProofTemp = 68; }\n\n        else if (voltage22 > 961) { waterProofTemp = 67; }\n\n        else if (voltage22 > 959) { waterProofTemp = 66; }\n\n        else if (voltage22 > 957) { waterProofTemp = 65; }\n\n        else if (voltage22 > 955) { waterProofTemp = 64; }\n\n        else if (voltage22 > 953) { waterProofTemp = 63; }\n\n        else if (voltage22 > 950) { waterProofTemp = 62; }\n\n        else if (voltage22 > 948) { waterProofTemp = 61; }\n\n        else if (voltage22 > 943) { waterProofTemp = 59; }\n\n        else if (voltage22 > 940) { waterProofTemp = 58; }\n\n        else if (voltage22 > 937) { waterProofTemp = 57; }\n\n        else if (voltage22 > 934) { waterProofTemp = 56; }\n\n        else if (voltage22 > 931) { waterProofTemp = 55; }\n\n        else if (voltage22 > 928) { waterProofTemp = 54; }\n\n        else if (voltage22 > 924) { waterProofTemp = 53; }\n\n        else if (voltage22 > 921) { waterProofTemp = 52; }\n\n        else if (voltage22 > 917) { waterProofTemp = 51; }\n\n        else if (voltage22 > 914) { waterProofTemp = 51; }\n\n        else if (voltage22 > 910) { waterProofTemp = 49; }\n\n        else if (voltage22 > 906) { waterProofTemp = 48; }\n\n        else if (voltage22 > 902) { waterProofTemp = 47; }\n\n        else if (voltage22 > 898) { waterProofTemp = 46; }\n\n        else if (voltage22 > 893) { waterProofTemp = 45; }\n\n        else if (voltage22 > 889) { waterProofTemp = 44; }\n\n        else if (voltage22 > 884) { waterProofTemp = 43; }\n\n        else if (voltage22 > 879) { waterProofTemp = 42; }\n\n        else if (voltage22 > 874) { waterProofTemp = 41; }\n\n        else if (voltage22 > 869) { waterProofTemp = 40; }\n\n        else if (voltage22 > 864) { waterProofTemp = 39; }\n\n        else if (voltage22 > 858) { waterProofTemp = 38; }\n\n        else if (voltage22 > 852) { waterProofTemp = 37; }\n\n        else if (voltage22 > 846) { waterProofTemp = 36; }\n\n        else if (voltage22 > 840) { waterProofTemp = 35; }\n\n        else if (voltage22 > 834) { waterProofTemp = 34; }\n\n        else if (voltage22 > 827) { waterProofTemp = 33; }\n\n        else if (voltage22 > 821) { waterProofTemp = 32; }\n\n        else if (voltage22 > 814) { waterProofTemp = 31; }\n\n        else if (voltage22 > 806) { waterProofTemp = 30; }\n\n        else if (voltage22 > 799) { waterProofTemp = 29; }\n\n        else if (voltage22 > 791) { waterProofTemp = 28; }\n\n        else if (voltage22 > 784) { waterProofTemp = 27; }\n\n        else if (voltage22 > 776) { waterProofTemp = 26; }\n\n        else if (voltage22 > 767) { waterProofTemp = 25; }\n\n        else if (voltage22 > 759) { waterProofTemp = 24; }\n\n        else if (voltage22 > 750) { waterProofTemp = 23; }\n\n        else if (voltage22 > 741) { waterProofTemp = 22; }\n\n        else if (voltage22 > 732) { waterProofTemp = 21; }\n\n        else if (voltage22 > 713) { waterProofTemp = 19; }\n\n        else if (voltage22 > 703) { waterProofTemp = 18; }\n\n        else if (voltage22 > 692) { waterProofTemp = 17; }\n\n        else if (voltage22 > 682) { waterProofTemp = 16; }\n\n        else if (voltage22 > 671) { waterProofTemp = 15; }\n\n        else if (voltage22 > 661) { waterProofTemp = 14; }\n\n        else if (voltage22 > 650) { waterProofTemp = 13; }\n\n        else if (voltage22 > 638) { waterProofTemp = 12; }\n\n        else if (voltage22 > 627) { waterProofTemp = 11; }\n\n        else if (voltage22 > 615) { waterProofTemp = 10; }\n\n        else if (voltage22 > 604) { waterProofTemp = 9; }\n\n        else if (voltage22 > 592) { waterProofTemp = 8; }\n\n        else if (voltage22 > 579) { waterProofTemp = 7; }\n\n        else if (voltage22 > 567) { waterProofTemp = 6; }\n\n        else if (voltage22 > 555) { waterProofTemp = 5; }\n\n        else if (voltage22 > 542) { waterProofTemp = 4; }\n\n        else if (voltage22 > 530) { waterProofTemp = 3; }\n\n        else if (voltage22 > 517) { waterProofTemp = 2; }\n\n        else if (voltage22 > 504) { waterProofTemp = 1; }\n\n        else { waterProofTemp = 0; }\n\n        return waterProofTemp;\n\n    }\n\n\n\n    /**\n\n    * get Ultrasonic distance\n\n    */\n\n    //% blockId=sonarbit\n\n    //% weight=29\n\n\n\n    //% subcategory=传感器\n\n    //% blockId=sonar_ping block=\"超声波传感器 %ultpins 单位 %unit\"\n\n    //% ultpins.fieldEditor=\"gridpicker\"\n\n    //% ultpins.fieldOptions.width=220\n\n    //% ultpins.fieldOptions.columns=2\n\n    export function ping(ultpins: Ultrasonic_pin, unit: PingUnit, maxCmDistance = 500): number {\n\n        // send pulse\n\n\n\n        let d\n\n        let distance\n\n        let echopin\n\n        let trigpin\n\n        if (ultpins == 13) {\n\n            trigpin = DigitalPin.P0;\n\n            echopin = DigitalPin.P13;\n\n        }\n\n        if (ultpins == 114) {\n\n            trigpin = DigitalPin.P1;\n\n            echopin = DigitalPin.P14;\n\n        }\n\n        if (ultpins == 215) {\n\n            trigpin = DigitalPin.P2;\n\n            echopin = DigitalPin.P15;\n\n        }\n\n        if (ultpins == 87) {\n\n            trigpin = DigitalPin.P8;\n\n            echopin = DigitalPin.P7;\n\n        }\n\n        if (ultpins == 129) {\n\n            trigpin = DigitalPin.P12;\n\n            echopin = DigitalPin.P9;\n\n        }\n\n        if (ultpins == 1610) {\n\n            trigpin = DigitalPin.P16;\n\n            echopin = DigitalPin.P10;\n\n        }\n\n        pins.setPull(trigpin, PinPullMode.PullNone);\n\n        pins.digitalWritePin(trigpin, 0);\n\n        control.waitMicros(2);\n\n        pins.digitalWritePin(trigpin, 1);\n\n        control.waitMicros(10);\n\n        pins.digitalWritePin(trigpin, 0);\n\n\n\n        // read pulse\n\n        d = pins.pulseIn(echopin, PulseValue.High, maxCmDistance * 50);\n\n        distance = d * 34 / 2 / 1000 * 3 / 2;\n\n        switch (unit) {\n\n            case PingUnit.Centimeters: return Math.round(distance);\n\n            case PingUnit.Inches: return Math.round(distance / 30.48);\n\n            default: return Math.round(d);\n\n        }\n\n    }\n\n\n\n\n\n    //% pin.fieldEditor=\"gridpicker\"\n\n    //% pin.fieldOptions.width=220\n\n    //% pin.fieldOptions.columns=2\n\n    //% subcategory=传感器\n\n    //% blockId=\"pinpullup\" block=\"巡线传感器 %pin \"\n\n    //%weight=28\n\n\n\n    export function pinpullup(pin: Grayscale_pin): number {\n\n        let pin33\n\n        if (pin == 1) {\n\n\n\n            pin33 = DigitalPin.P13;\n\n        }\n\n        if (pin == 2) {\n\n            pin33 = DigitalPin.P16;\n\n        }\n\n        if (pin == 3) {\n\n            pin33 = DigitalPin.P0;\n\n        }\n\n        if (pin == 4) {\n\n\n\n            pin33 = DigitalPin.P10;\n\n        }\n\n        if (pin == 5) {\n\n            pin33 = DigitalPin.P14;\n\n        }\n\n        if (pin == 6) {\n\n            pin33 = DigitalPin.P12;\n\n        }\n\n        if (pin == 7) {\n\n\n\n            pin33 = DigitalPin.P1;\n\n        }\n\n        if (pin == 8) {\n\n            pin33 = DigitalPin.P9;\n\n        }\n\n        if (pin == 9) {\n\n            pin33 = DigitalPin.P15;\n\n        }\n\n        if (pin == 10) {\n\n\n\n            pin33 = DigitalPin.P8;\n\n        }\n\n        if (pin == 11) {\n\n            pin33 = DigitalPin.P2;\n\n        }\n\n        if (pin == 12) {\n\n            pin33 = DigitalPin.P7;\n\n        }\n\n        return pins.digitalReadPin(pin33);\n\n\n\n\n\n\n\n    }\n\n    //////人体红外/////\n\n    //% weight=27\n\n    //% pirpin.fieldEditor=\"gridpicker\"\n\n    //% pirpin.fieldOptions.width=220\n\n    //% pirpin.fieldOptions.columns=2\n\n    //% blockId=\"PIR\" block=\"人体红外传感器 %pirpin 检测到运动\"\n\n\n\n    //% subcategory=传感器 \n\n    export function pir(pirpin: Write_pin): number {\n\n        let pin48\n        let rt\n\n        if (pirpin == 1) {\n\n\n\n            pin48 = DigitalPin.P0;\n\n        }\n\n        if (pirpin == 2) {\n\n            pin48 = DigitalPin.P16;\n\n        }\n\n        if (pirpin == 3) {\n\n            pin48 = DigitalPin.P1;\n\n        }\n\n        if (pirpin == 4) {\n\n\n\n            pin48 = DigitalPin.P12;\n\n        }\n\n        if (pirpin == 5) {\n\n            pin48 = DigitalPin.P2;\n\n        }\n\n        if (pirpin == 6) {\n\n            pin48 = DigitalPin.P8;\n\n        }\n\n\n\n        if (pins.digitalReadPin(pin48) == 1) {\n\n            rt = 0\n\n        }\n\n        else {\n\n            rt = 1\n\n        }\n        return rt\n\n    }\n\n\n    /////////摇杆////////////////////\n\n    export enum rocket {\n        //% block=\"X\"\n\n        x = 2,\n\n        //% block=\"Y\"\n\n        y = 1\n    }\n    export enum rock {\n        //% block=\"向上\"\n\n        orient1 = 2,\n\n        //% block=\"向下\"\n\n        orient2 = 1,\n\n        //% block=\"向左\"\n\n        orient3 = 4,\n\n        //% block=\"向右\"\n\n        orient4 = 3\n    }\n\n    //% weight=27\n\n    //% direction.fieldEditor=\"gridpicker\"\n\n    //% direction.fieldOptions.width=220\n\n    //% direction.fieldOptions.columns=2\n\n    //% blockId=\"ROCKET\" block=\"摇杆 %direction 方向\"\n\n    //% subcategory=传感器 \n\n    export function rocker(direction: rocket): number {\n\n        let GetBuff = pins.createBuffer(3)\n\n        GetBuff = pins.i2cReadBuffer(97, 3)\n\n        let re = GetBuff.getNumber(NumberFormat.Int8BE, direction)\n        re = -re\n        return re\n\n    }\n    //% weight=27\n\n    //% direction.fieldEditor=\"gridpicker\"\n\n    //% direction.fieldOptions.width=220\n\n    //% direction.fieldOptions.columns=2\n\n    //% blockId=\"ROCKETORI\" block=\"检测到摇杆 %orientation \"\n\n    //% subcategory=传感器 \n\n    export function rockerori(orientation: rock): boolean {\n\n        let GetBuff = pins.createBuffer(3)\n\n        GetBuff = pins.i2cReadBuffer(97, 3)\n        let ud = GetBuff.getNumber(NumberFormat.Int8BE, 1)\n        let lr = GetBuff.getNumber(NumberFormat.Int8BE, 2)\n        let flag\n        if (orientation == 1) {\n            if (ud > 50)\n                flag = true\n            else\n                flag = false\n        }\n        if (orientation == 2) {\n            if (ud < -50)\n                flag = true\n            else\n                flag = false\n        }\n        if (orientation == 3) {\n            if (lr < -50)\n                flag = true\n            else\n                flag = false\n        }\n        if (orientation == 4) {\n            if (lr > 50)\n                flag = true\n            else\n                flag = false\n        }\n        return flag\n\n    }\n\n\n\n    ////////////////执行器/////////////////////////////////////\n\n    export enum enPos {\n\n        //% blockId=\"forward\" block=\"前进\"\n\n        forward = 1,\n\n        //% blockId=\"stop\" block=\"后退\"\n\n        stop = 2\n\n    }\n\n    export enum enMotorcolor {\n        //% block=\"红\"\n\n        red = 81,\n\n        //% block=\"绿\"\n\n        blue = 82,\n\n        //% block=\"蓝\"\n\n        green = 83,\n\n        //% block=\"黄\"\n\n        yellow = 84\n\n    }\n\n    export enum enServo {\n        S1 = 0,\n        S2,\n        S3,\n        S4\n    }\n\n\n\n    export enum enMotors {\n\n\n\n        M2 = 10,\n\n        M3 = 12,\n\n        M1 = 8,\n\n        M4 = 14\n\n    }\n\n\n    const PCA9685_ADD = 0x40\n\n    const MODE1 = 0x00\n\n    const SUBADR1 = 0x02\n\n    const SUBADR2 = 0x03\n\n    const SUBADR3 = 0x04\n\n    const PRESCALE = 0xFE\n\n    const LED0_ON_L = 0x06\n\n    const LED0_ON_H = 0x07\n\n    const LED0_OFF_L = 0x08\n\n    const LED0_OFF_H = 0x09\n\n    const ALL_LED_ON_L = 0xFA\n\n    const ALL_LED_ON_H = 0xFB\n\n    const ALL_LED_OFF_L = 0xFC\n\n    const ALL_LED_OFF_H = 0xFD\n\n\n\n    const STP_CHA_L = 2047\n\n    const STP_CHA_H = 4095\n\n\n\n    const STP_CHB_L = 1\n\n    const STP_CHB_H = 2047\n\n\n\n    const STP_CHC_L = 1023\n\n    const STP_CHC_H = 3071\n\n\n\n    const STP_CHD_L = 3071\n\n    const STP_CHD_H = 1023\n\n\n\n    let initialized = false\n\n    let caraddress1 = 81\n    let caraddress2 = 82\n\n\n\n    function i2cwrite(addr: number, reg: number, value: number) {\n\n        let buf6 = pins.createBuffer(2)\n\n        buf6[0] = reg\n\n        buf6[1] = value\n\n        pins.i2cWriteBuffer(addr, buf6)\n\n    }\n\n\n\n    function i2cread(addr: number, reg: number) {\n\n        pins.i2cWriteNumber(addr, reg, NumberFormat.UInt8BE);\n\n        let val = pins.i2cReadNumber(addr, NumberFormat.UInt8BE);\n\n        return val;\n\n    }\n\n\n\n    function initPCA9685(): void {\n        i2cwrite(PCA9685_ADD, MODE1, 0x00)\n        setFreq(50);\n        initialized = true\n    }\n\n    function setFreq(freq: number): void {\n        // Constrain the frequency\n        let prescaleval = 25000000;\n        prescaleval /= 4096;\n        prescaleval /= freq;\n        prescaleval -= 1;\n        let prescale = prescaleval; //Math.Floor(prescaleval + 0.5);\n        let oldmode = i2cread(PCA9685_ADD, MODE1);\n        let newmode = (oldmode & 0x7F) | 0x10; // sleep\n        i2cwrite(PCA9685_ADD, MODE1, newmode); // go to sleep\n        i2cwrite(PCA9685_ADD, PRESCALE, prescale); // set the prescaler\n        i2cwrite(PCA9685_ADD, MODE1, oldmode);\n        control.waitMicros(5000);\n        i2cwrite(PCA9685_ADD, MODE1, oldmode | 0xa1);\n    }\n\n\n    function setPwm(channel: number, on: number, off: number): void {\n        if (channel < 0 || channel > 15)\n            return;\n        if (!initialized) {\n            initPCA9685();\n        }\n        let buf22 = pins.createBuffer(5);\n        buf22[0] = LED0_ON_L + 4 * channel;\n        buf22[1] = on & 0xff;\n        buf22[2] = (on >> 8) & 0xff;\n        buf22[3] = off & 0xff;\n        buf22[4] = (off >> 8) & 0xff;\n        pins.i2cWriteBuffer(PCA9685_ADD, buf22);\n    }\n\n\n\n\n    //% blockId=SuperBit_MotorRun \n\n    //% weight=27\n\n    //% index.fieldEditor=\"gridpicker\"\n\n    //% index.fieldOptions.width=220\n\n    //% index.fieldOptions.columns=2\n\n    //% block=\"电机|%index|速度(-255~255) %speed\"\n\n    //% speed.min=-255 speed.max=255\n\n    //% subcategory=执行器\n\n    export function MotorRun(index: enMotors, speed: number): void {\n\n        if (!initialized) {\n\n            initPCA9685()\n\n        }\n\n        speed = speed * 16; // map 255 to 4096\n\n        if (speed >= 4096) {\n\n            speed = 4095\n\n        }\n\n        if (speed <= -4096) {\n\n            speed = -4095\n\n        }\n\n\n\n        let a = index\n\n        let b = index + 1\n\n\n\n        if (a > 10) {\n\n            if (speed >= 0) {\n\n                setPwm(a, 0, speed)\n\n                setPwm(b, 0, 0)\n\n            } else {\n\n                setPwm(a, 0, 0)\n\n                setPwm(b, 0, -speed)\n\n            }\n\n        }\n\n        else {\n\n            if (speed >= 0) {\n\n                setPwm(b, 0, speed)\n\n                setPwm(a, 0, 0)\n\n            } else {\n\n                setPwm(b, 0, 0)\n\n                setPwm(a, 0, -speed)\n\n            }\n\n        }\n\n    }\n    //% blockId=SuperBit_runMotor block=\"|%motoraddress|电机以|%speed|速度转动\"\n\n    //% speed.min=-100 speed.max=100\n\n    //% parts=\"SuperBit_runMotor\" subcategory=执行器 group=\"伺服电机\"\n\n    export function runMotor(motoraddress: enMotorcolor, speed: number): void {\n        speed = speed / 2\n\n        let speed_Buff\n\n        if (speed < 0) {\n\n            speed = -speed\n\n            speed_Buff = (~speed) + 1\n\n            speed_Buff = speed_Buff | 0x80\n\n        }\n\n        else {\n\n            speed_Buff = speed\n\n        }\n\n        let SetBuff = pins.createBuffer(4)\n\n        SetBuff.setNumber(NumberFormat.UInt8BE, 0, 0x11)\n\n        SetBuff.setNumber(NumberFormat.UInt8BE, 1, speed_Buff)\n\n        SetBuff.setNumber(NumberFormat.UInt8BE, 2, 0)\n\n        SetBuff.setNumber(NumberFormat.UInt8BE, 3, 0)\n\n        pins.i2cWriteBuffer(motoraddress, SetBuff)\n\n\n    }\n    //% blockId=\"writemotorlocation\" block=\"|%motoraddress|电机以|%speed|速度转到|%location|的位置\"\n\n    //% speed.min=0 speed.max=100\n\n    //% location.min=-360 location.max=360\n\n    //% parts=\"writemotorlocation\" subcategory=执行器 group=\"伺服电机\"\n\n    export function Writemotorlocation(motoraddress: enMotorcolor, speed: number, location: number): void {\n\n        speed = speed / 2\n\n        let speed_Buff2\n\n        if (speed < 0) {\n\n            speed = -speed\n\n            speed_Buff2 = (~speed) + 1\n\n            speed_Buff2 = speed_Buff2 | 0x80\n\n        }\n        else {\n\n            speed_Buff2 = speed\n\n        }\n\n        let location_Buff2\n\n        if (location < 0) {\n\n            location = -location\n\n            location_Buff2 = (~location) + 1\n\n            location_Buff2 = location_Buff2 | 0x8000\n\n        }\n\n        else {\n\n            location_Buff2 = location\n\n        }\n        let SetBuff2 = pins.createBuffer(4)\n\n        SetBuff2.setNumber(NumberFormat.UInt8BE, 0, 0x3)\n\n        SetBuff2.setNumber(NumberFormat.UInt8BE, 1, speed_Buff2)\n\n        SetBuff2.setNumber(NumberFormat.UInt8BE, 2, location_Buff2 >> 8)\n\n        SetBuff2.setNumber(NumberFormat.UInt8BE, 3, location_Buff2)\n        pins.i2cWriteBuffer(motoraddress, SetBuff2)\n\n\n        let GetBuff = pins.createBuffer(6)\n\n\n        GetBuff = pins.i2cReadBuffer(motoraddress, 6)\n\n        let flag = GetBuff.getNumber(NumberFormat.Int8BE, 5);\n\n        while (flag != 3) {\n            GetBuff = pins.i2cReadBuffer(motoraddress, 6)\n            flag = GetBuff.getNumber(NumberFormat.Int8BE, 5)\n\n\n        }\n\n        while (flag != 11) {\n            GetBuff = pins.i2cReadBuffer(motoraddress, 6)\n            flag = GetBuff.getNumber(NumberFormat.Int8BE, 5);\n\n        }\n\n\n    }\n\n    //% blockId=\"writemotorrelativelocation\" block=\"|%motoraddress|电机以|%speed|速度转|%location|度\"\n\n    //% speed.min=-100 speed.max=100\n    //% location.min=0 \n    //% parts=\"writemotorrelativelocation\" subcategory=执行器 group=\"伺服电机\"\n\n    export function Writemotorrelativelocation(motoraddress: enMotorcolor, speed: number, location: number): void {\n\n        speed = speed / 2\n\n        let location_Buff22\n\n        if (speed < 0) {\n\n            speed = -speed\n\n            location_Buff22 = (~location) + 1\n\n            location_Buff22 = location_Buff22 | 0x8000\n\n        }\n\n        else {\n            speed = speed\n\n            location_Buff22 = location\n\n        }\n\n        let SetBuff22 = pins.createBuffer(4)\n\n        SetBuff22.setNumber(NumberFormat.UInt8BE, 0, 0x4)\n\n        SetBuff22.setNumber(NumberFormat.UInt8BE, 1, speed)\n\n        SetBuff22.setNumber(NumberFormat.UInt8BE, 2, location_Buff22 >> 8)\n\n        SetBuff22.setNumber(NumberFormat.UInt8BE, 3, location_Buff22)\n        let GetBuff = pins.createBuffer(6)\n        let flag = 0\n\n        pins.i2cWriteBuffer(motoraddress, SetBuff22)\n        while (flag != 4) {\n            GetBuff = pins.i2cReadBuffer(motoraddress, 6)\n            flag = GetBuff.getNumber(NumberFormat.Int8BE, 5)\n        }\n\n        while (flag != 11) {\n            GetBuff = pins.i2cReadBuffer(motoraddress, 6)\n            flag = GetBuff.getNumber(NumberFormat.Int8BE, 5)\n        }\n    }\n    //% blockId=\"writemotorrelativetime\" block=\"|%motoraddress|电机以|%speed|速度转|%second|秒\"\n\n    //% speed.min=-100 speed.max=100\n\n    //% parts=\"writemotorrelativetime\" subcategory=执行器 group=\"伺服电机\"\n\n    export function Writemotorrelativetime(motoraddress: enMotorcolor, speed: number, time: number): void {\n\n        speed = speed / 2\n\n        time = time * 10\n\n        let speed_Buff3\n\n        if (speed < 0) {\n\n            speed = -speed\n\n            speed_Buff3 = (~speed) + 1\n\n            speed_Buff3 = speed_Buff3 | 0x80\n\n        }\n\n        else {\n\n            speed_Buff3 = speed\n\n        }\n        let SetBuff222 = pins.createBuffer(4)\n\n        SetBuff222.setNumber(NumberFormat.UInt8BE, 0, 0x12)\n\n        SetBuff222.setNumber(NumberFormat.UInt8BE, 1, speed_Buff3)\n\n        SetBuff222.setNumber(NumberFormat.UInt8BE, 2, time >> 8)\n\n        SetBuff222.setNumber(NumberFormat.UInt8BE, 3, time)\n        let flag = 0\n        pins.i2cWriteBuffer(motoraddress, SetBuff222)\n        while (flag != 7) {\n            let GetBuff = pins.i2cReadBuffer(motoraddress, 6)\n            flag = GetBuff.getNumber(NumberFormat.Int8BE, 5);\n\n        }\n        while (flag != 11) {\n            let GetBuff = pins.i2cReadBuffer(motoraddress, 6)\n            flag = GetBuff.getNumber(NumberFormat.Int8BE, 5);\n\n\n        }\n\n\n    }\n\n    //% blockId=SuperBit_runDMotor block=\"双电机以|%speed1| |%speed2|速度转动\"\n\n    //% speed1.min=-100 speed1.max=100\n\n    //% speed2.min=-100 speed2.max=100\n\n    //% parts=\"SuperBit_runDMotor\" subcategory=执行器 group=\"伺服电机\"\n\n    export function runDMotor(speed1: number, speed2: number): void {\n\n        speed1 = -speed1 / 2\n\n        speed2 = speed2 / 2\n\n        let speed_Buff1\n\n        if (speed1 < 0) {\n\n            speed1 = -speed1\n\n            speed_Buff1 = (~speed1) + 1\n\n            speed_Buff1 = speed_Buff1 | 0x80\n\n        }\n\n        else {\n\n            speed_Buff1 = speed1\n\n        }\n\n        let speed_Buff23\n\n        if (speed2 < 0) {\n\n            speed2 = -speed2\n\n            speed_Buff23 = (~speed2) + 1\n\n            speed_Buff23 = speed_Buff23 | 0x80\n\n        }\n\n        else {\n\n            speed_Buff23 = speed2\n\n        }\n\n        let SetBuff3 = pins.createBuffer(4)\n        let SetBuffc = pins.createBuffer(4)\n\n\n        SetBuff3.setNumber(NumberFormat.UInt8BE, 0, 0x11)\n\n        SetBuff3.setNumber(NumberFormat.UInt8BE, 1, speed_Buff1)\n\n        SetBuff3.setNumber(NumberFormat.UInt8BE, 2, 0)\n\n        SetBuff3.setNumber(NumberFormat.UInt8BE, 3, 0)\n\n        pins.i2cWriteBuffer(caraddress1, SetBuff3)\n\n\n        SetBuffc.setNumber(NumberFormat.UInt8BE, 0, 0x11)\n\n        SetBuffc.setNumber(NumberFormat.UInt8BE, 1, speed_Buff23)\n\n        SetBuffc.setNumber(NumberFormat.UInt8BE, 2, 0)\n\n        SetBuffc.setNumber(NumberFormat.UInt8BE, 3, 0)\n\n        pins.i2cWriteBuffer(caraddress2, SetBuffc)\n\n    }\n    //% blockId=\"writeDmotorlocation\" block=\"双电机以|%speed1| |%speed2|速度转|%location|度\"\n\n    //% speed1.min=-100 speed1.max=100\n\n    //% speed2.min=-100 speed2.max=100\n    //% location.min=0 \n    //% parts=\"writeDmotorlocation\" subcategory=执行器 group=\"伺服电机\"\n\n    export function WriteDmotorlocation(speed1: number, speed2: number, location: number): void {\n\n        speed1 = -speed1 / 2\n\n        speed2 = speed2 / 2\n\n        let location1\n        let location_Buff1\n\n        let location2\n        let location_Buff2\n\n        location2 = ~location\n        location1 = ~location\n\n        if (speed2 < 0) {\n\n            speed2 = -speed2\n\n            location_Buff2 = location2 + 1\n\n            location_Buff2 = location_Buff2 | 0x8000\n\n        }\n\n        else {\n\n            location_Buff2 = location\n\n        }\n\n\n\n        if (speed1 < 0) {\n\n            speed1 = -speed1\n\n            location_Buff1 = location1 + 1\n\n            location_Buff1 = location_Buff1 | 0x8000\n\n        }\n\n        else {\n\n            location_Buff1 = location\n\n        }\n        if (speed1 == 0) {\n            location_Buff1 = 0\n        }\n\n        if (speed2 == 0) {\n            location_Buff2 = 0\n        }\n\n        let SetBuff23 = pins.createBuffer(4)\n        let SetBuff2c = pins.createBuffer(4)\n\n\n        SetBuff2c.setNumber(NumberFormat.UInt8BE, 0, 0x4)\n\n        SetBuff2c.setNumber(NumberFormat.UInt8BE, 1, speed2)\n\n        SetBuff2c.setNumber(NumberFormat.UInt8BE, 2, location_Buff2 >> 8)\n\n        SetBuff2c.setNumber(NumberFormat.UInt8BE, 3, location_Buff2)\n\n        SetBuff23.setNumber(NumberFormat.UInt8BE, 0, 0x4)\n\n        SetBuff23.setNumber(NumberFormat.UInt8BE, 1, speed1)\n\n        SetBuff23.setNumber(NumberFormat.UInt8BE, 2, location_Buff1 >> 8)\n\n        SetBuff23.setNumber(NumberFormat.UInt8BE, 3, location_Buff1)\n        //发送控制参数\n        pins.i2cWriteBuffer(caraddress1, SetBuff23)\n        pins.i2cWriteBuffer(caraddress2, SetBuff2c)\n        //接着读一次电机1\n        let GetBuff = pins.createBuffer(6)\n        GetBuff = pins.i2cReadBuffer(caraddress2, 6)\n        let flag = GetBuff.getNumber(NumberFormat.Int8BE, 5)//获取了第6位\n        //接着读一次电机2\n        let GetBuff1 = pins.createBuffer(6)\n        GetBuff1 = pins.i2cReadBuffer(caraddress1, 6)\n        let flag1 = GetBuff1.getNumber(NumberFormat.Int8BE, 5)//获取了第6位\n        //4为正在运行\n        while (true) {//如果没有在运行，则一直读取\n\n            GetBuff = pins.i2cReadBuffer(caraddress2, 6)\n            flag = GetBuff.getNumber(NumberFormat.Int8BE, 5)\n            GetBuff1 = pins.i2cReadBuffer(caraddress1, 6)\n            flag1 = GetBuff1.getNumber(NumberFormat.Int8BE, 5)\n            if ((flag1 == 4) || (flag == 4)) break;//当有一个电机转动起来的时候，就退出死循环\n\n\n        }\n        //11为运行结束\n        while (true) {\n\n            GetBuff = pins.i2cReadBuffer(caraddress2, 6)\n            flag = GetBuff.getNumber(NumberFormat.Int8BE, 5)\n            GetBuff1 = pins.i2cReadBuffer(caraddress1, 6)\n            flag1 = GetBuff1.getNumber(NumberFormat.Int8BE, 5)\n            if ((flag1 == 11) && (flag == 11)) break;//当有两个电机都执行完毕的时候，就退出死循环\n\n        }\n\n    }\n\n    //% blockId=\"writeDmotortime\" block=\"双电机以|%speed1| |%speed2|速度转|%time|秒\"\n\n    //% speed1.min=-100 speed1.max=100\n\n    //% speed2.min=-100 speed2.max=100\n    //% time.min=0 \n    //% parts=\"writeDmotortime\" subcategory=执行器 group=\"伺服电机\"\n\n    export function writeDmotortime(speed1: number, speed2: number, time: number): void {\n\n        speed1 = -speed1 / 2\n\n        speed2 = speed2 / 2\n        time = time * 10\n        let speed_Buff3\n        let speed_Buff4\n\n        if (speed1 < 0) {\n\n            speed1 = -speed1\n\n            speed_Buff3 = (~speed1) + 1\n\n            speed_Buff3 = speed_Buff3 | 0x80\n\n        }\n\n        else {\n\n            speed_Buff3 = speed1\n\n        }\n        if (speed2 < 0) {\n\n            speed2 = -speed2\n\n            speed_Buff4 = (~speed2) + 1\n\n            speed_Buff4 = speed_Buff4 | 0x80\n\n        }\n\n        else {\n\n            speed_Buff4 = speed2\n\n        }\n\n        let SetBuff3 = pins.createBuffer(4)\n\n        SetBuff3.setNumber(NumberFormat.UInt8BE, 0, 0x12)\n\n        SetBuff3.setNumber(NumberFormat.UInt8BE, 1, speed_Buff3)\n\n        SetBuff3.setNumber(NumberFormat.UInt8BE, 2, time >> 8)\n\n        SetBuff3.setNumber(NumberFormat.UInt8BE, 3, time)\n        let SetBuff4 = pins.createBuffer(4)\n\n        SetBuff4.setNumber(NumberFormat.UInt8BE, 0, 0x12)\n\n        SetBuff4.setNumber(NumberFormat.UInt8BE, 1, speed_Buff4)\n\n        SetBuff4.setNumber(NumberFormat.UInt8BE, 2, time >> 8)\n\n        SetBuff4.setNumber(NumberFormat.UInt8BE, 3, time)\n\n        pins.i2cWriteBuffer(caraddress1, SetBuff3)\n        pins.i2cWriteBuffer(caraddress2, SetBuff4)\n        let GetBuff = pins.createBuffer(6)\n        GetBuff = pins.i2cReadBuffer(caraddress2, 6)\n        let flag = GetBuff.getNumber(NumberFormat.Int8BE, 5)//获取了第6位\n        //接着读一次电机2\n        let GetBuff1 = pins.createBuffer(6)\n        GetBuff1 = pins.i2cReadBuffer(caraddress1, 6)\n        let flag1 = GetBuff1.getNumber(NumberFormat.Int8BE, 5)//获取了第6位\n\n        while (true) {//如果没有在运行，则一直读取\n\n            GetBuff = pins.i2cReadBuffer(caraddress2, 6)\n            flag = GetBuff.getNumber(NumberFormat.Int8BE, 5)\n            GetBuff1 = pins.i2cReadBuffer(caraddress1, 6)\n            flag1 = GetBuff1.getNumber(NumberFormat.Int8BE, 5)\n            if ((flag1 == 0x7) || (flag == 0x7)) break;//当有一个电机转动起来的时候，就退出死循环\n\n\n        }\n        //11为运行结束\n        while (true) {\n\n            GetBuff = pins.i2cReadBuffer(caraddress2, 6)\n            flag = GetBuff.getNumber(NumberFormat.Int8BE, 5)\n            GetBuff1 = pins.i2cReadBuffer(caraddress1, 6)\n            flag1 = GetBuff1.getNumber(NumberFormat.Int8BE, 5)\n            if ((flag1 == 11) && (flag == 11)) break;//当有两个电机都执行完毕的时候，就退出死循环\n\n        }\n\n    }\n\n    //% blockId=SuperBit_DMotor block=\"左电机设置为|%motoraddress1|右电机设置为|%motoraddress2|\"\n\n    //% parts=\"SuperBit_DMotor\" subcategory=执行器 group=\"伺服电机\"\n\n    export function DMotor(motoraddress1: enMotorcolor, motoraddress2: enMotorcolor): void {\n        caraddress1 = motoraddress1\n\n        caraddress2 = motoraddress2\n\n    }\n\n\n    //% blockId=SuperBit_Servo4 block=\"舵机| %num|角度 %value\"\n    //% num.min=1 num.max=4 value.min=0 value.max=300\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=20\n    //%  subcategory=执行器 \n    export function Servo4(num: enServo, value: number): void {\n\n        // 50hz: 20,000 us\n        let us = (value * 1800 * 0.6 / 180 + 600); // 0.6 ~ 2.4\n        let pwm = us * 4096 / 20000;\n        setPwm(num, 0, pwm);\n\n    }\n\n    //% blockId=\"readmotorspeed\" block=\"读取|%motoraddress|电机的速度 \"\n\n    //% parts=\"readmotorspeed\" subcategory=执行器 group=\"伺服电机\"\n\n    export function Readmotorspeed(motoraddress: enMotorcolor): number {\n\n        let GetBuff = pins.createBuffer(6)\n\n        GetBuff = pins.i2cReadBuffer(motoraddress, 6)\n\n\n\n        return GetBuff.getNumber(NumberFormat.Int8BE, 0);\n\n    }\n\n    //% blockId=\"readmotorlocation\" block=\"读取|%motoraddress|电机的位置\"\n\n    //% parts=\"readmotorlocation\" subcategory=执行器 group=\"伺服电机\"\n\n    export function Readmotorlocation(motoraddress: enMotorcolor): number {\n\n        let GetBuff2 = pins.createBuffer(6)\n\n        GetBuff2 = pins.i2cReadBuffer(motoraddress, 5)\n\n        let location_Buff\n\n        let This_location\n\n        location_Buff = (GetBuff2.getNumber(NumberFormat.Int8BE, 1) << 8) + GetBuff2.getNumber(NumberFormat.Int8BE, 2)\n\n        if (location_Buff & 0x0080) {\n\n            This_location = location_Buff + 0x0100\n\n        }\n\n        else {\n\n            This_location = location_Buff\n\n        }\n\n\n\n\n        return This_location;\n\n    }\n    //% blockId=\"laser_controller\" block=\"激光 %laserpin 切换至 %laserState || 激光 %intensity\"\n\n    //% laserState.shadow=\"toggleOnOff\"\n\n    //% weight=25\n\n    //% laserpin.fieldEditor=\"gridpicker\"\n\n    //% laserpin.fieldOptions.width=220\n\n    //% laserpin.fieldOptions.columns=2\n\n    //% intensity.min=0 intensity.max=1023\n\n    //% expandableArgumentMode=\"toggle\"\n\n    //% subcategory=执行器\n\n    export function laserController(laserpin: Write_pin, laserState: boolean, intensity: number = 1023): void {\n\n        let pin79\n\n        if (laserpin == 1) {\n\n\n\n            pin79 = AnalogPin.P0;\n\n        }\n\n        if (laserpin == 2) {\n\n            pin79 = AnalogPin.P16;\n\n        }\n\n        if (laserpin == 3) {\n\n            pin79 = AnalogPin.P1;\n\n        }\n\n        if (laserpin == 4) {\n\n\n\n            pin79 = AnalogPin.P12;\n\n        }\n\n        if (laserpin == 5) {\n\n            pin79 = AnalogPin.P2;\n\n        }\n\n        if (laserpin == 6) {\n\n            pin79 = AnalogPin.P8;\n\n        }\n\n        if (laserState) {\n\n            pins.analogSetPeriod(pin79, 1023);\n\n            pins.analogWritePin(pin79, Math.map(intensity, 0, 1023, 0, 1023));\n\n        }\n\n        else {\n\n            pins.analogWritePin(pin79, 0);\n\n            intensity = 0;\n\n        }\n\n    }\n\n\n\n    /**\n\n    * toggle fans\n\n    */\n\n    //% blockId=fans block=\"风扇 %fanpin 切换至 $fanstate || 速度 %speed\"\n\n    //% fanstate.shadow=\"toggleOnOff\"\n\n    //% weight=24\n\n    //% fanpin.fieldEditor=\"gridpicker\"\n\n    //% fanpin.fieldOptions.width=220\n\n    //% fanpin.fieldOptions.columns=1\n\n    //% speed.min=0 speed.max=1023\n\n    //% expandableArgumentMode=\"toggle\"\n\n    //% subcategory=执行器\n\n    export function motorFan(fanpin: Read_pin, fanstate: boolean, speed: number = 1023): void {\n\n        let pin3\n\n\n\n\n\n        if (fanpin == 1) {\n\n\n\n            pin3 = AnalogPin.P0;\n\n        }\n\n        if (fanpin == 2) {\n\n            pin3 = AnalogPin.P1;\n\n        }\n\n        if (fanpin == 3) {\n\n            pin3 = AnalogPin.P2;\n\n        }\n\n\n\n        if (fanstate) {\n\n            pins.analogSetPeriod(pin3, 1023);\n\n            pins.analogWritePin(pin3, Math.map(speed, 0, 1023, 0, 1023));\n\n        }\n\n        else {\n\n            pins.analogWritePin(pin3, 0);\n\n            speed = 0;\n\n        }\n\n\n\n    }\n\n\n\n    //% blockId=\"elecmagnet\" block=\"电磁铁 %elecpin 切换至 %magState || 磁力 %force\"\n\n    //% magState.shadow=\"toggleOnOff\"\n\n    //% weight=23\n\n    //% elecpin.fieldEditor=\"gridpicker\"\n\n    //% elecpin.fieldOptions.width=220\n\n    //% elecpin.fieldOptions.columns=2\n\n    //% force.min=0 force.max=1023\n\n    //% expandableArgumentMode=\"toggle\"\n\n    //% subcategory=执行器\n\n    export function elecmagnet(elecpin: Write_pin, magState: boolean, force: number = 1023): void {\n\n        let pin8\n\n        if (elecpin == 1) {\n\n\n\n            pin8 = AnalogPin.P0;\n\n        }\n\n        if (elecpin == 2) {\n\n            pin8 = AnalogPin.P16;\n\n        }\n\n        if (elecpin == 3) {\n\n            pin8 = AnalogPin.P1;\n\n        }\n\n        if (elecpin == 4) {\n\n\n\n            pin8 = AnalogPin.P12;\n\n        }\n\n        if (elecpin == 5) {\n\n            pin8 = AnalogPin.P2;\n\n        }\n\n        if (elecpin == 6) {\n\n            pin8 = AnalogPin.P8;\n\n        }\n\n\n\n        if (magState == true) {\n\n            pins.analogSetPeriod(pin8, 1023)\n\n            pins.analogWritePin(pin8, Math.map(force, 0, 1023, 0, 1023))\n\n        }\n\n        else {\n\n            pins.analogWritePin(pin8, 0)\n\n            force = 0\n\n        }\n\n    }\n\n\n\n    ////////////////////////////////////////////\n\n\n\n    /**\n   * toggle led\n   */\n    //% blockId=LEDR block=\"红色 LED %pin 切换到 $ledstate \"\n    //% ledstate.shadow=\"toggleOnOff\"\n    //% expandableArgumentMode=\"toggle\"\n    //% subcategory=执行器\n    export function ledRBrightness(pin: DigitalPin, ledstate: boolean): void {\n        if (ledstate) {\n            pins.digitalWritePin(pin, 0)\n        }\n        else {\n            pins.digitalWritePin(pin, 1)\n        }\n    }\n\n    /**\n    * toggle led\n    */\n    //% blockId=LEDG block=\"绿色 LED %pin 切换到 $ledstate \"\n    //% ledstate.shadow=\"toggleOnOff\"\n    //% expandableArgumentMode=\"toggle\"\n    //% subcategory=执行器\n    export function ledGBrightness(pin: DigitalPin, ledstate: boolean): void {\n        if (ledstate) {\n            pins.digitalWritePin(pin, 0)\n        }\n        else {\n            pins.digitalWritePin(pin, 1)\n        }\n    }\n\n    /**\n    * toggle led\n    */\n    //% blockId=LEDB block=\"蓝色 LED %pin 切换到 $ledstate \"\n    //% ledstate.shadow=\"toggleOnOff\"\n    //% expandableArgumentMode=\"toggle\"\n    //% subcategory=执行器\n    export function ledBBrightness(pin: DigitalPin, ledstate: boolean): void {\n        if (ledstate) {\n            pins.digitalWritePin(pin, 0)\n        }\n        else {\n            pins.digitalWritePin(pin, 1)\n        }\n    }\n\n    /**\n    * toggle led\n    */\n    //% blockId=LEDY block=\"黄色 LED %pin 切换到 $ledstate \"\n    //% ledstate.shadow=\"toggleOnOff\"\n    //% expandableArgumentMode=\"toggle\"\n    //% subcategory=执行器\n    export function ledYBrightness(pin: DigitalPin, ledstate: boolean): void {\n        if (ledstate) {\n            pins.digitalWritePin(pin, 0)\n        }\n        else {\n            pins.digitalWritePin(pin, 1)\n        }\n    }\n\n\n\n\n\n\n\n    enum LCS_Constants {\n\n        // Constants\n\n        ADDRESS = 0x29,\n\n        ID = 0x12, // Register should be equal to 0x44 for the TCS34721 or TCS34725, or 0x4D for the TCS34723 or TCS34727.\n\n\n\n        COMMAND_BIT = 0x80,\n\n\n\n        ENABLE = 0x00,\n\n        ENABLE_AIEN = 0x10, // RGBC Interrupt Enable\n\n        ENABLE_WEN = 0x08, // Wait enable - Writing 1 activates the wait timer\n\n        ENABLE_AEN = 0x02, // RGBC Enable - Writing 1 actives the ADC, 0 disables it\n\n        ENABLE_PON = 0x01, // Power on - Writing 1 activates the internal oscillator, 0 disables it\n\n        ATIME = 0x01, // Integration time\n\n        WTIME = 0x03, // Wait time (if ENABLE_WEN is asserted)\n\n        AILTL = 0x04, // Clear channel lower interrupt threshold\n\n        AILTH = 0x05,\n\n        AIHTL = 0x06, // Clear channel upper interrupt threshold\n\n        AIHTH = 0x07,\n\n        PERS = 0x0C, // Persistence register - basic SW filtering mechanism for interrupts\n\n        PERS_NONE = 0x00, // Every RGBC cycle generates an interrupt\n\n        PERS_1_CYCLE = 0x01, // 1 clean channel value outside threshold range generates an interrupt\n\n        PERS_2_CYCLE = 0x02, // 2 clean channel values outside threshold range generates an interrupt\n\n        PERS_3_CYCLE = 0x03, // 3 clean channel values outside threshold range generates an interrupt\n\n        PERS_5_CYCLE = 0x04, // 5 clean channel values outside threshold range generates an interrupt\n\n        PERS_10_CYCLE = 0x05, // 10 clean channel values outside threshold range generates an interrupt\n\n        PERS_15_CYCLE = 0x06, // 15 clean channel values outside threshold range generates an interrupt\n\n        PERS_20_CYCLE = 0x07, // 20 clean channel values outside threshold range generates an interrupt\n\n        PERS_25_CYCLE = 0x08, // 25 clean channel values outside threshold range generates an interrupt\n\n        PERS_30_CYCLE = 0x09, // 30 clean channel values outside threshold range generates an interrupt\n\n        PERS_35_CYCLE = 0x0A, // 35 clean channel values outside threshold range generates an interrupt\n\n        PERS_40_CYCLE = 0x0B, // 40 clean channel values outside threshold range generates an interrupt\n\n        PERS_45_CYCLE = 0x0C, // 45 clean channel values outside threshold range generates an interrupt\n\n        PERS_50_CYCLE = 0x0D, // 50 clean channel values outside threshold range generates an interrupt\n\n        PERS_55_CYCLE = 0x0E, // 55 clean channel values outside threshold range generates an interrupt\n\n        PERS_60_CYCLE = 0x0F, // 60 clean channel values outside threshold range generates an interrupt\n\n        CONFIG = 0x0D,\n\n        CONFIG_WLONG = 0x02, // Choose between short and long (12x) wait times via WTIME\n\n        CONTROL = 0x0F, // Set the gain level for the sensor\n\n        STATUS = 0x13,\n\n        STATUS_AINT = 0x10, // RGBC Clean channel interrupt\n\n        STATUS_AVALID = 0x01, // Indicates that the RGBC channels have completed an integration cycle\n\n\n\n        CDATAL = 0x14, // Clear channel data\n\n        CDATAH = 0x15,\n\n        RDATAL = 0x16, // Red channel data\n\n        RDATAH = 0x17,\n\n        GDATAL = 0x18, // Green channel data\n\n        GDATAH = 0x19,\n\n        BDATAL = 0x1A, // Blue channel data\n\n        BDATAH = 0x1B,\n\n\n\n        GAIN_1X = 0x00, //  1x gain\n\n        GAIN_4X = 0x01, //  4x gain\n\n        GAIN_16X = 0x02, // 16x gain\n\n        GAIN_60X = 0x03  // 60x gain\n\n    }\n\n\n\n    let LCS_integration_time_val = 0\n\n\n\n    // I2C functions\n\n\n\n    function I2C_WriteReg8(addr: number, reg: number, val: number) {\n\n        let buf32 = pins.createBuffer(2)\n\n        buf32.setNumber(NumberFormat.UInt8BE, 0, reg)\n\n        buf32.setNumber(NumberFormat.UInt8BE, 1, val)\n\n        pins.i2cWriteBuffer(addr, buf32)\n\n    }\n\n\n\n    function I2C_ReadReg8(addr: number, reg: number): number {\n\n        let buf42 = pins.createBuffer(1)\n\n        buf42.setNumber(NumberFormat.UInt8BE, 0, reg)\n\n        pins.i2cWriteBuffer(addr, buf42)\n\n        buf42 = pins.i2cReadBuffer(addr, 1)\n\n        return buf42.getNumber(NumberFormat.UInt8BE, 0);\n\n    }\n\n\n\n    function I2C_ReadReg16(addr: number, reg: number): number {\n\n        let buf52 = pins.createBuffer(1)\n\n        buf52.setNumber(NumberFormat.UInt8BE, 0, reg)\n\n        pins.i2cWriteBuffer(addr, buf52)\n\n        buf52 = pins.i2cReadBuffer(addr, 2)\n\n        // Little endian\n\n        return ((buf52.getNumber(NumberFormat.UInt8BE, 1) << 8) | buf52.getNumber(NumberFormat.UInt8BE, 0));\n\n    }\n\n    function LCS_get_raw_data(delay: boolean = false): number[] {\n\n        if (delay) {\n\n            // Delay for the integration time to allow reading immediately after the previous read.\n\n            basic.pause((256 - LCS_integration_time_val) * 2.4)\n\n        }\n\n\n\n        let div = (256 - LCS_integration_time_val) * 1024\n\n        let rgbc = [0, 0, 0, 0]\n\n        rgbc[0] = I2C_ReadReg16(LCS_Constants.ADDRESS, (LCS_Constants.COMMAND_BIT | LCS_Constants.RDATAL)) / div\n\n        rgbc[1] = I2C_ReadReg16(LCS_Constants.ADDRESS, (LCS_Constants.COMMAND_BIT | LCS_Constants.GDATAL)) / div\n\n        rgbc[2] = I2C_ReadReg16(LCS_Constants.ADDRESS, (LCS_Constants.COMMAND_BIT | LCS_Constants.BDATAL)) / div\n\n        rgbc[3] = I2C_ReadReg16(LCS_Constants.ADDRESS, (LCS_Constants.COMMAND_BIT | LCS_Constants.CDATAL)) / div\n\n        if (rgbc[0] > 1) {\n\n            rgbc[0] = 1\n\n        }\n\n        if (rgbc[1] > 1) {\n\n            rgbc[1] = 1\n\n        }\n\n        if (rgbc[2] > 1) {\n\n            rgbc[2] = 1\n\n        }\n\n        if (rgbc[3] > 1) {\n\n            rgbc[3] = 1\n\n        }\n\n        return rgbc\n\n    }\n\n\n\n    let font: number[] = [];\n\n    font[0] = 0x0022d422;\n\n    font[1] = 0x0022d422;\n\n    font[2] = 0x0022d422;\n\n    font[3] = 0x0022d422;\n\n    font[4] = 0x0022d422;\n\n    font[5] = 0x0022d422;\n\n    font[6] = 0x0022d422;\n\n    font[7] = 0x0022d422;\n\n    font[8] = 0x0022d422;\n\n    font[9] = 0x0022d422;\n\n    font[10] = 0x0022d422;\n\n    font[11] = 0x0022d422;\n\n    font[12] = 0x0022d422;\n\n    font[13] = 0x0022d422;\n\n    font[14] = 0x0022d422;\n\n    font[15] = 0x0022d422;\n\n    font[16] = 0x0022d422;\n\n    font[17] = 0x0022d422;\n\n    font[18] = 0x0022d422;\n\n    font[19] = 0x0022d422;\n\n    font[20] = 0x0022d422;\n\n    font[21] = 0x0022d422;\n\n    font[22] = 0x0022d422;\n\n    font[23] = 0x0022d422;\n\n    font[24] = 0x0022d422;\n\n    font[25] = 0x0022d422;\n\n    font[26] = 0x0022d422;\n\n    font[27] = 0x0022d422;\n\n    font[28] = 0x0022d422;\n\n    font[29] = 0x0022d422;\n\n    font[30] = 0x0022d422;\n\n    font[31] = 0x0022d422;\n\n    font[32] = 0x00000000;\n\n    font[33] = 0x000002e0;\n\n    font[34] = 0x00018060;\n\n    font[35] = 0x00afabea;\n\n    font[36] = 0x00aed6ea;\n\n    font[37] = 0x01991133;\n\n    font[38] = 0x010556aa;\n\n    font[39] = 0x00000060;\n\n    font[40] = 0x000045c0;\n\n    font[41] = 0x00003a20;\n\n    font[42] = 0x00051140;\n\n    font[43] = 0x00023880;\n\n    font[44] = 0x00002200;\n\n    font[45] = 0x00021080;\n\n    font[46] = 0x00000100;\n\n    font[47] = 0x00111110;\n\n    font[48] = 0x0007462e;\n\n    font[49] = 0x00087e40;\n\n    font[50] = 0x000956b9;\n\n    font[51] = 0x0005d629;\n\n    font[52] = 0x008fa54c;\n\n    font[53] = 0x009ad6b7;\n\n    font[54] = 0x008ada88;\n\n    font[55] = 0x00119531;\n\n    font[56] = 0x00aad6aa;\n\n    font[57] = 0x0022b6a2;\n\n    font[58] = 0x00000140;\n\n    font[59] = 0x00002a00;\n\n    font[60] = 0x0008a880;\n\n    font[61] = 0x00052940;\n\n    font[62] = 0x00022a20;\n\n    font[63] = 0x0022d422;\n\n    font[64] = 0x00e4d62e;\n\n    font[65] = 0x000f14be;\n\n    font[66] = 0x000556bf;\n\n    font[67] = 0x0008c62e;\n\n    font[68] = 0x0007463f;\n\n    font[69] = 0x0008d6bf;\n\n    font[70] = 0x000094bf;\n\n    font[71] = 0x00cac62e;\n\n    font[72] = 0x000f909f;\n\n    font[73] = 0x000047f1;\n\n    font[74] = 0x0017c629;\n\n    font[75] = 0x0008a89f;\n\n    font[76] = 0x0008421f;\n\n    font[77] = 0x01f1105f;\n\n    font[78] = 0x01f4105f;\n\n    font[79] = 0x0007462e;\n\n    font[80] = 0x000114bf;\n\n    font[81] = 0x000b6526;\n\n    font[82] = 0x010514bf;\n\n    font[83] = 0x0004d6b2;\n\n    font[84] = 0x0010fc21;\n\n    font[85] = 0x0007c20f;\n\n    font[86] = 0x00744107;\n\n    font[87] = 0x01f4111f;\n\n    font[88] = 0x000d909b;\n\n    font[89] = 0x00117041;\n\n    font[90] = 0x0008ceb9;\n\n    font[91] = 0x0008c7e0;\n\n    font[92] = 0x01041041;\n\n    font[93] = 0x000fc620;\n\n    font[94] = 0x00010440;\n\n    font[95] = 0x01084210;\n\n    font[96] = 0x00000820;\n\n    font[97] = 0x010f4a4c;\n\n    font[98] = 0x0004529f;\n\n    font[99] = 0x00094a4c;\n\n    font[100] = 0x000fd288;\n\n    font[101] = 0x000956ae;\n\n    font[102] = 0x000097c4;\n\n    font[103] = 0x0007d6a2;\n\n    font[104] = 0x000c109f;\n\n    font[105] = 0x000003a0;\n\n    font[106] = 0x0006c200;\n\n    font[107] = 0x0008289f;\n\n    font[108] = 0x000841e0;\n\n    font[109] = 0x01e1105e;\n\n    font[110] = 0x000e085e;\n\n    font[111] = 0x00064a4c;\n\n    font[112] = 0x0002295e;\n\n    font[113] = 0x000f2944;\n\n    font[114] = 0x0001085c;\n\n    font[115] = 0x00012a90;\n\n    font[116] = 0x010a51e0;\n\n    font[117] = 0x010f420e;\n\n    font[118] = 0x00644106;\n\n    font[119] = 0x01e8221e;\n\n    font[120] = 0x00093192;\n\n    font[121] = 0x00222292;\n\n    font[122] = 0x00095b52;\n\n    font[123] = 0x0008fc80;\n\n    font[124] = 0x000003e0;\n\n    font[125] = 0x000013f1;\n\n    font[126] = 0x00841080;\n\n    font[127] = 0x0022d422;\n\n\n\n    let _I2CAddr = 0;\n\n    let _screen = pins.createBuffer(1025);\n\n    let _buf2 = pins.createBuffer(2);\n\n    let _buf3 = pins.createBuffer(3);\n\n    let _buf4 = pins.createBuffer(4);\n\n    let _ZOOM = 1;\n\n\n\n    function cmd1(d: number) {\n\n        let n = d % 256;\n\n        pins.i2cWriteNumber(_I2CAddr, n, NumberFormat.UInt16BE);\n\n    }\n\n\n\n    function cmd2(d1: number, d2: number) {\n\n        _buf3[0] = 0;\n\n        _buf3[1] = d1;\n\n        _buf3[2] = d2;\n\n        pins.i2cWriteBuffer(_I2CAddr, _buf3);\n\n    }\n\n\n\n    function cmd3(d1: number, d2: number, d3: number) {\n\n        _buf4[0] = 0;\n\n        _buf4[1] = d1;\n\n        _buf4[2] = d2;\n\n        _buf4[3] = d3;\n\n        pins.i2cWriteBuffer(_I2CAddr, _buf4);\n\n    }\n\n\n\n    function set_pos(col: number = 0, page: number = 0) {\n\n        cmd1(0xb0 | page) // page number\n\n        let c = col * (_ZOOM + 1)\n\n        cmd1(0x00 | (c % 16)) // lower start column address\n\n        cmd1(0x10 | (c >> 4)) // upper start column address    \n\n    }\n\n\n\n    // clear bit\n\n    function clrbit(d: number, b: number): number {\n\n        if (d & (1 << b))\n\n            d -= (1 << b)\n\n        return d\n\n    }\n\n\n\n\n\n\n\n\n    /**\n\n     * A NeoPixel strip\n\n     */\n\n    export class Strip {\n\n        buf: Buffer;\n\n        pin: DigitalPin;\n\n        // TODO: encode as bytes instead of 32bit\n\n        brightness: number;\n\n        start: number; // start offset in LED strip\n\n        _length: number; // number of LEDs\n\n        _mode: NeoPixelMode;\n\n        _matrixWidth: number; // number of leds in a matrix - if any\n\n\n\n        /**\n\n         * Shows all LEDs to a given color (range 0-255 for r, g, b).\n\n         * @param rgb RGB color of the LED\n\n         */\n\n        //% blockId=\"neopixel_set_strip_color\" block=\"%strip|显示 颜色 %rgb=neopixel_colors\"\n\n        //% strip.defl=strip\n\n        //% weight=12\n\n        //% parts=\"neopixel\" subcategory=执行器 group=\"彩灯\"\n\n        //% color=#2699BF blockGap=10\n\n        showColor(rgb: number) {\n\n            rgb = rgb >> 0;\n\n            this.setAllRGB(rgb);\n\n            this.show();\n\n        }\n\n\n\n        /**\n\n         * Shows a rainbow pattern on all LEDs.\n\n         * @param startHue the start hue value for the rainbow, eg: 1\n\n         * @param endHue the end hue value for the rainbow, eg: 360\n\n         */\n\n        //% blockId=\"neopixel_set_strip_rainbow\" block=\"%strip|显示 彩虹 从 %startHue|到 %endHue\"\n\n        //% strip.defl=strip\n\n        //% weight=13\n\n        //% parts=\"neopixel\" subcategory=执行器 group=\"彩灯\" \n\n        //% color=#2699BF blockGap=10\n\n        showRainbow(startHue: number = 1, endHue: number = 360) {\n\n            if (this._length <= 0) return;\n\n\n\n            startHue = startHue >> 0;\n\n            endHue = endHue >> 0;\n\n            const saturation = 100;\n\n            const luminance = 50;\n\n            const steps = this._length + 1;\n\n            const direction = HueInterpolationDirection.Clockwise;\n\n\n\n            //hue\n\n            const h1 = startHue;\n\n            const h2 = endHue;\n\n            const hDistCW = ((h2 + 360) - h1) % 360;\n\n            const hStepCW = Math.idiv((hDistCW * 100), steps);\n\n            const hDistCCW = ((h1 + 360) - h2) % 360;\n\n            const hStepCCW = Math.idiv(-(hDistCCW * 100), steps);\n\n            let hStep: number;\n\n            if (direction === HueInterpolationDirection.Clockwise) {\n\n                hStep = hStepCW;\n\n            } else if (direction === HueInterpolationDirection.CounterClockwise) {\n\n                hStep = hStepCCW;\n\n            } else {\n\n                hStep = hDistCW < hDistCCW ? hStepCW : hStepCCW;\n\n            }\n\n            const h1_100 = h1 * 100; //we multiply by 100 so we keep more accurate results while doing interpolation\n\n\n\n            //sat\n\n            const s1 = saturation;\n\n            const s2 = saturation;\n\n            const sDist = s2 - s1;\n\n            const sStep = Math.idiv(sDist, steps);\n\n            const s1_100 = s1 * 100;\n\n\n\n            //lum\n\n            const l1 = luminance;\n\n            const l2 = luminance;\n\n            const lDist = l2 - l1;\n\n            const lStep = Math.idiv(lDist, steps);\n\n            const l1_100 = l1 * 100\n\n\n\n            //interpolate\n\n            if (steps === 1) {\n\n                this.setPixelColor(0, hsl(h1 + hStep, s1 + sStep, l1 + lStep))\n\n            } else {\n\n                this.setPixelColor(0, hsl(startHue, saturation, luminance));\n\n                for (let t = 1; t < steps - 1; t++) {\n\n                    const u = Math.idiv((h1_100 + t * hStep), 100) + 360;\n\n                    const v = Math.idiv((s1_100 + t * sStep), 100);\n\n                    const w = Math.idiv((l1_100 + t * lStep), 100);\n\n                    this.setPixelColor(t, hsl(u, v, w));\n\n                }\n\n                this.setPixelColor(steps - 1, hsl(endHue, saturation, luminance));\n\n            }\n\n            this.show();\n\n        }\n\n\n\n\n\n\n        setPixelColor(pixeloffset: number, rgb: number): void {\n\n            this.setPixelRGB((pixeloffset - 1) >> 0, rgb >> 0);\n\n        }\n\n\n\n\n\n        show() {\n\n            // only supported in beta\n\n            // ws2812b.setBufferMode(this.pin, this._mode);\n\n            ws2812b.sendBuffer(this.buf, this.pin);\n\n        }\n\n\n\n        /**\n    \n         * Set the brightness of the strip. This flag only applies to future operation.\n    \n         * @param brightness a measure of LED brightness in 0-255. eg: 255\n    \n         */\n\n        //% blockId=\"neopixel_set_brightness\" block=\"%strip|设置 亮度 %brightness\"\n\n        //% strip.defl=strip\n\n        //% weight=17\n\n        //% parts=\"neopixel\" subcategory=执行器 group=\"彩灯\"\n\n        //% color=#2699BF blockGap=10\n\n        setBrightness(brightness: number): void {\n\n            this.brightness = brightness & 0xff;\n\n        }\n\n\n\n        /**\n    \n         * Set the pin where the neopixel is connected, defaults to P0.\n    \n         */\n\n        //% parts=\"neopixel\" subcategory=执行器 group=\"彩灯\"\n\n        //% color=#2699BF blockGap=10\n\n        setPin(pin: DigitalPin): void {\n\n\n\n            this.pin = pin;\n\n            pins.digitalWritePin(this.pin, 0);\n\n            // don't yield to avoid races on initialization\n\n        }\n\n\n\n\n\n\n\n        private setBufferRGB(offset: number, red: number, green: number, blue: number): void {\n\n            if (this._mode === NeoPixelMode.RGB_RGB) {\n\n                this.buf[offset + 0] = red;\n\n                this.buf[offset + 1] = green;\n\n            } else {\n\n                this.buf[offset + 0] = green;\n\n                this.buf[offset + 1] = red;\n\n            }\n\n            this.buf[offset + 2] = blue;\n\n        }\n\n\n\n        private setAllRGB(rgb: number) {\n\n            let red = unpackR(rgb);\n\n            let green = unpackG(rgb);\n\n            let blue = unpackB(rgb);\n\n\n\n            const br3 = this.brightness;\n\n            if (br3 < 255) {\n\n                red = (red * br3) >> 8;\n\n                green = (green * br3) >> 8;\n\n                blue = (blue * br3) >> 8;\n\n            }\n\n            const end3 = this.start + this._length;\n\n            const stride6 = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n\n            for (let i5 = this.start; i5 < end3; ++i5) {\n\n                this.setBufferRGB(i5 * stride6, red, green, blue)\n\n            }\n\n        }\n\n        private setAllW(white: number) {\n\n            if (this._mode !== NeoPixelMode.RGBW)\n\n                return;\n\n\n\n            let br4 = this.brightness;\n\n            if (br4 < 255) {\n\n                white = (white * br4) >> 8;\n\n            }\n\n            let buf8 = this.buf;\n\n            let end4 = this.start + this._length;\n\n            for (let i6 = this.start; i6 < end4; ++i6) {\n\n                let ledoffset3 = i6 * 4;\n\n                buf8[ledoffset3 + 3] = white;\n\n            }\n\n        }\n\n        private setPixelRGB(pixeloffset: number, rgb: number): void {\n\n            if (pixeloffset < 0\n\n                || pixeloffset >= this._length)\n\n                return;\n\n\n\n            let stride7 = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n\n            pixeloffset = (pixeloffset + this.start) * stride7;\n\n\n\n            let red2 = unpackR(rgb);\n\n            let green2 = unpackG(rgb);\n\n            let blue2 = unpackB(rgb);\n\n\n\n            let br5 = this.brightness;\n\n            if (br5 < 255) {\n\n                red2 = (red2 * br5) >> 8;\n\n                green2 = (green2 * br5) >> 8;\n\n                blue2 = (blue2 * br5) >> 8;\n\n            }\n\n            this.setBufferRGB(pixeloffset, red2, green2, blue2)\n\n        }\n\n        private setPixelW(pixeloffset: number, white: number): void {\n\n            if (this._mode !== NeoPixelMode.RGBW)\n\n                return;\n\n\n\n            if (pixeloffset < 0\n\n                || pixeloffset >= this._length)\n\n                return;\n\n\n\n            pixeloffset = (pixeloffset + this.start) * 4;\n\n\n\n            let br6 = this.brightness;\n\n            if (br6 < 255) {\n\n                white = (white * br6) >> 8;\n\n            }\n\n            let buf9 = this.buf;\n\n            buf9[pixeloffset + 3] = white;\n\n        }\n\n    }\n\n\n\n    /**\n    \n     * Create a new NeoPixel driver for `numleds` LEDs.\n    \n     * @param pin the pin where the neopixel is connected.\n    \n     * @param numleds number of leds in the strip, eg: 8,30,60,64\n    \n     */\n\n    //% blockId=\"neopixel_create\" block=\"灯环使用端口 %neopixelpin \"\n\n    //% parts=\"neopixel\" subcategory=执行器 group=\"彩灯\"\n\n    //% neopixelpin.fieldEditor=\"gridpicker\"\n\n    //% neopixelpin.fieldOptions.width=220\n\n    //% neopixelpin.fieldOptions.columns=2\n\n    //% weight=18\n\n    //% trackArgs=0,2\n\n    //% blockSetVariable=strip\n\n    //% color=#2699BF blockGap=10\n\n    //% weight=51\n\n    export function create(neopixelpin: Write_pin): Strip {\n\n        let strip2 = new Strip();\n\n        let stride8 = NeoPixelMode.RGBW ? 4 : 3;\n\n        strip2.buf = pins.createBuffer(8 * stride8);\n\n        strip2.start = 0;\n\n        strip2._length = 8;\n\n        strip2._mode = NeoPixelMode.RGB;\n\n        strip2._matrixWidth = 0;\n\n        strip2.setBrightness(128)\n\n        if (neopixelpin == 1) {\n\n            strip2.setPin(DigitalPin.P0);\n\n        }\n\n        if (neopixelpin == 2) {\n\n            strip2.setPin(DigitalPin.P16);\n\n        }\n\n        if (neopixelpin == 3) {\n\n            strip2.setPin(DigitalPin.P1);\n\n        }\n\n        if (neopixelpin == 4) {\n\n            strip2.setPin(DigitalPin.P12);\n\n        }\n\n        if (neopixelpin == 5) {\n\n            strip2.setPin(DigitalPin.P2);\n\n        }\n\n        if (neopixelpin == 6) {\n\n            strip2.setPin(DigitalPin.P8);\n\n        }\n\n\n\n        return strip2;\n\n    }\n\n\n\n    /**\n    \n     * Converts red, green, blue channels into a RGB color\n    \n     * @param red value of the red channel between 0 and 255. eg: 255\n    \n     * @param green value of the green channel between 0 and 255. eg: 255\n    \n     * @param blue value of the blue channel between 0 and 255. eg: 255\n    \n     */\n\n    //% blockId=\"neopixel_rgb\" block=\"红 %red|绿 %green|蓝 %blue\"\n\n    //% parts=\"neopixel\" subcategory=执行器 group=\"彩灯\"\n\n    //% weight=12\n\n    //% color=#2699BF blockGap=10\n\n    export function rgb(red: number, green: number, blue: number): number {\n\n        return packRGB(red, green, blue);\n\n    }\n\n\n\n    /**\n    \n     * Gets the RGB value of a known color\n    \n    */\n\n    //% blockId=\"neopixel_colors\" block=\"%color\"\n\n    //% parts=\"neopixel\" subcategory=执行器 group=\"彩灯\"\n\n    //% weight=13\n\n    //% color=#2699BF blockGap=10\n\n    export function colors(color: NeoPixelColors): number {\n\n        return color;\n\n    }\n\n\n\n    function packRGB(a: number, b: number, c: number): number {\n\n        return ((a & 0xFF) << 16) | ((b & 0xFF) << 8) | (c & 0xFF);\n\n    }\n\n\n\n    function unpackR(rgb: number): number {\n\n        let r3 = (rgb >> 16) & 0xFF;\n\n        return r3;\n\n    }\n\n\n\n    function unpackG(rgb: number): number {\n\n        let g3 = (rgb >> 8) & 0xFF;\n\n        return g3;\n\n    }\n\n\n\n    function unpackB(rgb: number): number {\n\n        let b3 = (rgb) & 0xFF;\n\n        return b3;\n\n    }\n\n\n\n    export function hsl(h: number, s: number, l: number): number {\n\n        h = Math.round(h);\n\n        s = Math.round(s);\n\n        l = Math.round(l);\n\n\n\n        h = h % 360;\n\n        s = Math.clamp(0, 99, s);\n\n        l = Math.clamp(0, 99, l);\n\n        let c2 = Math.idiv((((100 - Math.abs(2 * l - 100)) * s) << 8), 10000); //chroma, [0,255]\n\n        let h12 = Math.idiv(h, 60);//[0,6]\n\n        let h22 = Math.idiv((h - h12 * 60) * 256, 60);//[0,255]\n\n        let temp = Math.abs((((h12 % 2) << 8) + h22) - 256);\n\n        let x = (c2 * (256 - (temp))) >> 8;//[0,255], second largest component of this color\n\n        let r$: number;\n\n        let g$: number;\n\n        let b$: number;\n\n        if (h12 == 0) {\n\n            r$ = c2; g$ = x; b$ = 0;\n\n        } else if (h12 == 1) {\n\n            r$ = x; g$ = c2; b$ = 0;\n\n        } else if (h12 == 2) {\n\n            r$ = 0; g$ = c2; b$ = x;\n\n        } else if (h12 == 3) {\n\n            r$ = 0; g$ = x; b$ = c2;\n\n        } else if (h12 == 4) {\n\n            r$ = x; g$ = 0; b$ = c2;\n\n        } else if (h12 == 5) {\n\n            r$ = c2; g$ = 0; b$ = x;\n\n        }\n\n        let m2 = Math.idiv((Math.idiv((l * 2 << 8), 100) - c2), 2);\n\n        let r4 = r$ + m2;\n\n        let g4 = g$ + m2;\n\n        let b4 = b$ + m2;\n\n        return packRGB(r4, g4, b4);\n\n    }\n\n\n\n    export enum HueInterpolationDirection {\n\n        Clockwise,\n\n        CounterClockwise,\n\n        Shortest\n\n    }\n\n    /**\n    \n    * show text in OLED\n    \n    * @param oled_x is X alis, eg: 0\n    \n    * @param oled_y is Y alis, eg: 0\n    \n    * @param s is the text will be show, eg: 'Hello!'\n    \n    */\n\n    //% blockId=\"OLED12864_I2C_SHOWSTRING1\" block=\"显示 文本 请选择显示位置%oled|文本 %s\"\n\n    //% parts=OLED12864_I2C trackArgs=0\n\n    //% oled.fieldEditor=\"gridpicker\"\n\n    //% oled.fieldOptions.width=320\n\n    //% oled.fieldOptions.columns=13\n\n    //% group=\"OLED显示屏\" subcategory=执行器\n\n    //% weight=10 blockGap=10 color=#0855AA\n\n    export function showString(oled: Oled, s: string, color: number = 1) {\n\n        let oled_x = oled % 13;\n\n        let oled_y = Math.floor(oled / 13);\n\n        let crror = 0\n\n        let col2 = 0\n\n        let q = 0\n\n        let ind2 = 0\n\n        let firstoledinit = 0\n\n        if (pins.i2cReadNumber(_I2CAddr, NumberFormat.Int8LE) == 67) {\n\n            init();\n\n        }\n\n        else {\n\n            for (let r = 0; r < s.length; r++) {\n\n                q = font[s.charCodeAt(r)]\n\n                for (let o = 0; o < 5; o++) {\n\n                    col2 = 0\n\n                    for (let p = 0; p < 5; p++) {\n\n                        if (q & (1 << (5 * o + p)))\n\n                            col2 |= (1 << (p + 1))\n\n                    }\n\n                    ind2 = (oled_x + r) * 5 * (_ZOOM + 1) + oled_y * 128 + o * (_ZOOM + 1) + 1\n\n                    if (color == 0)\n\n                        col2 = 255 - col2\n\n                    _screen[ind2] = col2\n\n                    if (_ZOOM)\n\n                        _screen[ind2 + 1] = col2\n\n                }\n\n            }\n\n            set_pos(oled_x * 5, oled_y)\n\n            let ind02 = oled_x * 5 * (_ZOOM + 1) + oled_y * 128\n\n            let buf72 = _screen.slice(ind02, ind2 + 1)\n\n            buf72[0] = 0x40\n\n            pins.i2cWriteBuffer(_I2CAddr, buf72)\n\n        }\n\n    }\n\n\n\n    /**\n    \n     * show a number in OLED\n    \n     * @param olednum_x is X alis, eg: 0\n    \n     * @param olednum_y is Y alis, eg: 0\n    \n     * @param num is the number will be show, eg: 12\n    \n     * @param color is number color, eg: 1\n    \n     */\n\n    //% blockId=\"OLED12864_I2C_NUMBER\" block=\"显示 数字 请选择显示位置%oled|数字 %num\"\n\n    //% parts=OLED12864_I2C trackArgs=0\n\n    //% olednum.fieldEditor=\"gridpicker\"\n\n    //% olednum.fieldOptions.width=320\n\n    //% olednum.fieldOptions.columns=13\n\n    //% group=\"OLED显示屏\" subcategory=执行器\n\n    //% weight=9 blockGap=10 color=#0855AA\n\n    export function showNumber(olednum: Oled, num: number, color: number = 1) {\n\n\n\n        let olednum_x = 0\n\n        let olednum_y = 0\n\n        olednum_x = Math.floor(olednum / 13);\n\n        olednum_y = olednum % 13;\n\n        showString(olednum, num.toString(), color)\n\n    }\n\n\n\n\n\n    export function draw() {\n\n        set_pos()\n\n        pins.i2cWriteBuffer(_I2CAddr, _screen)\n\n    }\n\n    /**\n     * show text in OLED\n     * @param x is X alis, eg: 0\n     * @param y is Y alis, eg: 0\n     * @param s is the text will be show, eg: 'Hello!'\n     * @param color is string color, eg: 1\n     */\n    //% blockId=\"OLED12864_I2C_SHOWSTRINGxy\" block=\"显示 string 在 x %x|y %y|文本 %s|颜色 %color\"\n    //% parts=OLED12864_I2C trackArgs=0\n    //% group=\"OLED显示屏\" subcategory=执行器\n    //% weight=80 blockGap=10 color=#0855AA\n    export function showStringxy(x: number, y: number, s: string, color: number = 1) {\n        let col = 0\n        let e = 0\n        let ind = 0\n        for (let f = 0; f < s.length; f++) {\n            e = font[s.charCodeAt(f)]\n            for (let g = 0; g < 5; g++) {\n                col = 0\n                for (let h = 0; h < 5; h++) {\n                    if (e & (1 << (5 * g + h)))\n                        col |= (1 << (h + 1))\n                }\n                ind = (x + f) * 5 * (_ZOOM + 1) + y * 128 + g * (_ZOOM + 1) + 1\n                if (color == 0)\n                    col = 255 - col\n                _screen[ind] = col\n                if (_ZOOM)\n                    _screen[ind + 1] = col\n            }\n        }\n        set_pos(x * 5, y)\n        let ind0 = x * 5 * (_ZOOM + 1) + y * 128\n        let buf7 = _screen.slice(ind0, ind + 1)\n        buf7[0] = 0x40\n        pins.i2cWriteBuffer(_I2CAddr, buf7)\n    }\n\n    /**\n     * show a number in OLED\n     * @param x is X alis, eg: 0\n     * @param y is Y alis, eg: 0\n     * @param num is the number will be show, eg: 12\n     * @param color is number color, eg: 1\n     */\n    //% blockId=\"OLED12864_I2C_NUMBERxy\" block=\"显示 数字 在 x %x|y %y|数字 %num|颜色 %color\"\n    //% parts=OLED12864_I2C trackArgs=0\n    //% group=\"OLED显示屏\" subcategory=执行器\n    //% weight=80 blockGap=10 color=#0855AA\n    export function showNumberxy(x: number, y: number, num: number, color: number = 1) {\n        showStringxy(x, y, num.toString(), color)\n    }\n\n\n    /**\n    \n     * clear screen\n    \n     */\n\n    //% blockId=\"OLED12864_I2C_CLEAR\" block=\"清除\"\n\n    //% parts=OLED12864_I2C trackArgs=0\n\n    //% group=\"OLED显示屏\" subcategory=执行器\n\n    //% weight=8 blockGap=10 color=#0855AA\n\n    export function clear() {\n\n        _screen.fill(0)\n\n        _screen[0] = 0x40\n\n        draw()\n\n    }\n\n\n\n    /**\n    \n     * OLED initialize\n    \n     * @param addr is i2c addr, eg: 60\n    \n     */\n\n    //% blockId=\"OLED12864_I2C_init\" block=\"初始化 OLED \"\n\n    //% parts=OLED12864_I2C trackArgs=0\n\n    //% weight=11 blockGap=10\n\n    //% group=\"OLED显示屏\" subcategory=执行器\n\n    //% blockGap=10  color=#0855AA\n\n    export function init() {\n\n        _I2CAddr = 60;\n\n        cmd1(0xAE)       // SSD1306_DISPLAYOFF\n\n        cmd1(0xA4)       // SSD1306_DISPLAYALLON_RESUME\n\n        cmd2(0xD5, 0xF0) // SSD1306_SETDISPLAYCLOCKDIV\n\n        cmd2(0xA8, 0x3F) // SSD1306_SETMULTIPLEX\n\n        cmd2(0xD3, 0x00) // SSD1306_SETDISPLAYOFFSET\n\n        cmd1(0 | 0x0)    // line #SSD1306_SETSTARTLINE\n\n        cmd2(0x8D, 0x14) // SSD1306_CHARGEPUMP\n\n        cmd2(0x20, 0x00) // SSD1306_MEMORYMODE\n\n        cmd3(0x21, 0, 127) // SSD1306_COLUMNADDR\n\n        cmd3(0x22, 0, 63)  // SSD1306_PAGEADDR\n\n        cmd1(0xa0 | 0x1) // SSD1306_SEGREMAP\n\n        cmd1(0xc8)       // SSD1306_COMSCANDEC\n\n        cmd2(0xDA, 0x12) // SSD1306_SETCOMPINS\n\n        cmd2(0x81, 0xCF) // SSD1306_SETCONTRAST\n\n        cmd2(0xd9, 0xF1) // SSD1306_SETPRECHARGE\n\n        cmd2(0xDB, 0x40) // SSD1306_SETVCOMDETECT\n\n        cmd1(0xA6)       // SSD1306_NORMALDISPLAY\n\n        cmd2(0xD6, 1)    // zoom on\n\n        cmd1(0xAF)       // SSD1306_DISPLAYON\n\n        clear()\n\n        _ZOOM = 1\n\n    }\n\n\n    /////////////////录音模块///////////////////\n\n\n    //% blockId=\"record_id\" block=\"录音模块-播放 %recordID \"\n\n    //% magState.shadow=\"toggleOnOff\"\n\n    //% weight=2\n\n    //% recordID.fieldEditor=\"gridpicker\"\n\n    //% recordID.fieldOptions.width=220\n\n    //% recordID.fieldOptions.columns=2\n\n    //% expandableArgumentMode=\"toggle\"\n\n    //% group=\"录音模块\" subcategory=执行器\n\n    export function Record_id(recordID: Record_list): void {\n        pins.i2cWriteNumber(0x18, recordID, NumberFormat.UInt8BE)\n    }\n\n\n\n    enum Recodpin {\n        //% block=\"(P0,P13)\"\n\n        rc1 = 13,\n        //% block=\"(P1,P14)\"\n\n        rc2 = 114,\n\n        //% block=\"(P2,P15)\"\n\n        rc3 = 215\n    }\n\n\n\n\n    /**\n \n   //% blockId=\"test\" block=\"读取P0、P1、P2端口模拟值 \"\n \n   //% subcategory=测试专用\n \n   export function Test(): string {\n \n       let a0 = 0;\n \n       let a1 = 0;\n \n       let a2 = 0;\n \n       let p1 = '';\n \n \n \n       a0 = pins.map(\n \n           pins.analogReadPin(AnalogPin.P0),\n \n           0,\n \n           1023,\n \n           0,\n \n           1023\n \n       );\n \n       a1 = pins.map(\n \n           pins.analogReadPin(AnalogPin.P1),\n \n           0,\n \n           1023,\n \n           0,\n \n           1023\n \n       );\n \n       a2 = pins.map(\n \n           pins.analogReadPin(AnalogPin.P2),\n \n           0,\n \n           1023,\n \n           0,\n \n           1023\n \n       );\n \n \n \n       p1 = a0 + ';' + a1 + ';' + a2\n \n       return p1\n \n   }\n \n \n \n   //% blockId=\"test2\" block=\"读取各端口的数字值 \"\n \n   //% subcategory=测试\n \n   export function Test2(): string {\n \n       let d0 = 0;\n \n       let d1 = 0;\n \n       let d2 = 0;\n \n       let d8 = 0;\n \n       let d12 = 0;\n \n       let d16 = 0;\n \n       let p = '';\n \n \n \n       d0 = pins.digitalReadPin(DigitalPin.P0)\n \n       d1 = pins.digitalReadPin(DigitalPin.P1);\n \n       d2 = pins.digitalReadPin(DigitalPin.P2);\n \n       d8 = pins.digitalReadPin(DigitalPin.P8);\n \n       d12 = pins.digitalReadPin(DigitalPin.P12)\n \n       d16 = pins.digitalReadPin(DigitalPin.P16);\n \n \n \n \n \n       p = d0 + ';' + d1 + ';' + d2 + ';' + d8 + ';' + d12 + ';' + d16\n \n       return p\n \n   }**/\n\n\n}\n","pxt.json":"{\n    \"name\": \" extension0304\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"ws2812b\": \"github:microsoft/pxt-ws2812b#v0.1.1\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"_locales/zh-CN/README.md\",\n        \"heart.cpp\",\n        \"MAX30105.cpp\",\n        \"MAX30105.h\",\n        \"shims.d.ts\",\n        \"enums.d.ts\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"targetVersions\": {\n        \"target\": \"5.0.12\",\n        \"targetId\": \"microbit\"\n    },\n    \"supportedTargets\": [\n        \"microbit\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n","shims.d.ts":"// Auto-generated. Do not edit.\n\n\n    /**\n     * Andy England @ SparkFun Electronics\n     * June 4, 2019\n     * https://github.com/sparkfun/pxt-gator-particle\n     *\n     * Development environment specifics:\n     * Written in Microsoft PXT\n     * Tested with a SparkFun Gator:Particle Sensor\n     *\n     * This code is released under the [MIT License](http://opensource.org/licenses/MIT).\n     * Please review the LICENSE.md file included with this example. If you have any questions\n     * or concerns with licensing, please contact techsupport@sparkfun.com.\n     * Distributed as-is; no warranty is given.\n     */\n\ndeclare namespace Microbit {\n}\n\n// Auto-generated. Do not edit. Really.\n","test.ts":"// tests go here; this will not be compiled when this package is used as an extension.\n"}